"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toast = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const icons_1 = require("../icons");
const Spinner_1 = require("../Spinner");
const STATUS_TO_COLOR_SCHEME = {
    success: 'success',
    error: 'error',
    warning: 'warning',
    info: 'main',
    loading: 'main',
};
const STATUS_TO_ICON = {
    success: icons_1.BxsCheckCircle,
    error: icons_1.BxsErrorCircle,
    warning: icons_1.BxsErrorCircle,
    info: icons_1.BxsInfoCircle,
    loading: Spinner_1.SpinnerIcon,
};
const Toast = (_a) => {
    var { status = 'success', title, id, description, isClosable, onClose, onCloseComplete } = _a, toastStyleProps = __rest(_a, ["status", "title", "id", "description", "isClosable", "onClose", "onCloseComplete"]);
    const styles = (0, react_2.useMultiStyleConfig)('Toast', Object.assign({ colorScheme: STATUS_TO_COLOR_SCHEME[status] }, toastStyleProps));
    const StatusIcon = (0, react_1.useMemo)(() => {
        return STATUS_TO_ICON[status];
    }, [status]);
    return ((0, jsx_runtime_1.jsx)(react_2.Box, { sx: styles.wrapper, children: (0, jsx_runtime_1.jsxs)(react_2.Alert, { sx: styles.container, id: String(id), "aria-live": "assertive", children: [(0, jsx_runtime_1.jsx)(react_2.Icon, { sx: styles.icon, as: StatusIcon }), (0, jsx_runtime_1.jsxs)(react_2.Box, { sx: styles.content, children: [(0, jsx_runtime_1.jsx)(react_2.AlertTitle, { sx: styles.title, children: title }), (0, jsx_runtime_1.jsx)(react_2.AlertDescription, { sx: styles.description, children: description })] }), isClosable && ((0, jsx_runtime_1.jsx)(react_2.CloseButton, { variant: "clear", colorScheme: "neutral", children: (0, jsx_runtime_1.jsx)(icons_1.BxX, { "aria-hidden": "true" }), onClick: () => {
                        onClose === null || onClose === void 0 ? void 0 : onClose();
                        onCloseComplete === null || onCloseComplete === void 0 ? void 0 : onCloseComplete();
                    }, __css: styles.close }))] }) }));
};
exports.Toast = Toast;
