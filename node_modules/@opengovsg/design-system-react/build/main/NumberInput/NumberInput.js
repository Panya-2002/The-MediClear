"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const IconButton_1 = require("../IconButton");
const icons_1 = require("../icons");
exports.NumberInput = (0, react_2.forwardRef)((_a, ref) => {
    var _b;
    var { showSteppers = true, clampValueOnBlur = false, isSuccess, isPrefilled } = _a, props = __rest(_a, ["showSteppers", "clampValueOnBlur", "isSuccess", "isPrefilled"]);
    const styles = (0, react_2.useMultiStyleConfig)('NumberInput', Object.assign(Object.assign({}, props), { isSuccess,
        isPrefilled }));
    const stepperWrapperRef = (0, react_1.useRef)(null);
    /**
     * Used here so this component can retrieve a parent FormControl's props, if
     * any. This allows a FormControl parent component to pass props such as
     * isInvalid, isDisabled, etc, to this component.
     */
    const controlProps = (0, react_2.useFormControlProps)(props);
    const { htmlProps, getInputProps, getIncrementButtonProps, getDecrementButtonProps, } = (0, react_2.useNumberInput)(Object.assign(Object.assign({}, controlProps), { clampValueOnBlur }));
    const inputProps = getInputProps({ placeholder: props.placeholder });
    const incProps = getIncrementButtonProps();
    const decProps = getDecrementButtonProps();
    const inputRef = (0, react_2.useMergeRefs)(inputProps.ref, ref);
    const inputEndPadding = showSteppers
        ? (_b = stepperWrapperRef.current) === null || _b === void 0 ? void 0 : _b.offsetWidth
        : undefined;
    return ((0, jsx_runtime_1.jsxs)(react_2.Box, Object.assign({}, htmlProps, { __css: styles.root, children: [(0, jsx_runtime_1.jsx)(react_2.chakra.input, Object.assign({}, inputProps, { paddingInlineEnd: inputEndPadding, 
                // Passing in ref to the input element so that it can be focused by
                // the parent.
                // No point passing the ref to the div wrapper as the main component
                // is this input.
                ref: inputRef, __css: styles.field })), showSteppers && ((0, jsx_runtime_1.jsxs)(react_2.Box, { __css: styles.stepperWrapper, ref: stepperWrapperRef, children: [(0, jsx_runtime_1.jsx)(IconButton_1.IconButton, Object.assign({ sx: styles.stepperButton, "aria-hidden": true, "aria-label": "Decrement number", variant: "clear", icon: (0, jsx_runtime_1.jsx)(icons_1.BxMinus, {}) }, decProps)), (0, jsx_runtime_1.jsx)(react_2.Divider, { sx: styles.stepperDivider, orientation: "vertical" }), (0, jsx_runtime_1.jsx)(IconButton_1.IconButton, Object.assign({ sx: styles.stepperButton, "aria-hidden": true, "aria-label": "Increment number", variant: "clear", icon: (0, jsx_runtime_1.jsx)(icons_1.BxPlus, {}) }, incProps))] }))] })));
});
exports.NumberInput.displayName = 'NumberInput';
