"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Searchbar = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const IconButton_1 = require("../IconButton");
const icons_1 = require("../icons");
exports.Searchbar = (0, react_2.forwardRef)((_a, ref) => {
    var { onSearch, defaultIsExpanded, isExpanded: isExpandedProp, onExpansion: onExpansionProp, showClearButton = true, collapseOnClear, size, focusOnExpand = true } = _a, props = __rest(_a, ["onSearch", "defaultIsExpanded", "isExpanded", "onExpansion", "showClearButton", "collapseOnClear", "size", "focusOnExpand"]);
    const [isExpanded, onExpansion] = (0, react_2.useControllableState)({
        defaultValue: defaultIsExpanded,
        value: isExpandedProp,
        onChange: onExpansionProp,
    });
    const innerRef = (0, react_1.useRef)(null);
    const styles = (0, react_2.useMultiStyleConfig)('Searchbar', Object.assign({ isExpanded,
        size }, props));
    const inputRef = (0, react_2.useMergeRefs)(innerRef, ref);
    const handleSearch = (0, react_1.useCallback)((e) => {
        if (e.key === 'Enter' && innerRef.current && onSearch) {
            onSearch(innerRef.current.value);
        }
    }, [onSearch]);
    const handleClearButtonClick = (0, react_1.useCallback)(() => {
        var _a;
        if (innerRef.current) {
            innerRef.current.value = '';
        }
        if (collapseOnClear) {
            onExpansion(false);
        }
        (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [collapseOnClear, onExpansion]);
    const handleExpansion = (0, react_1.useCallback)(() => {
        onExpansion(true);
        if (focusOnExpand) {
            // Set timeout to allow the input to expand before focusing
            setTimeout(() => {
                var _a;
                (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            }, 0);
        }
    }, [focusOnExpand, onExpansion]);
    return ((0, jsx_runtime_1.jsxs)(react_2.InputGroup, { flex: isExpanded ? 1 : 0, size: size, children: [isExpanded ? ((0, jsx_runtime_1.jsx)(react_2.InputLeftElement, { pointerEvents: "none", children: (0, jsx_runtime_1.jsx)(react_2.Box, { __css: styles.icon, children: (0, jsx_runtime_1.jsx)(react_2.Icon, { as: icons_1.BxSearch }) }) })) : ((0, jsx_runtime_1.jsx)(IconButton_1.IconButton, { "aria-label": "Expand search", icon: (0, jsx_runtime_1.jsx)(icons_1.BxSearch, {}), variant: "clear", colorScheme: "neutral", onClick: handleExpansion, sx: styles.icon })), (0, jsx_runtime_1.jsx)(react_2.Input, Object.assign({ hidden: !isExpanded, "aria-label": "Press enter to search", ref: inputRef, sx: styles.field, onKeyDown: handleSearch }, props)), showClearButton && isExpanded && ((0, jsx_runtime_1.jsx)(react_2.InputRightElement, { children: (0, jsx_runtime_1.jsx)(IconButton_1.IconButton, { "aria-label": "Clear search", icon: (0, jsx_runtime_1.jsx)(icons_1.BxX, {}), size: size, variant: "clear", colorScheme: "neutral", onClick: handleClearButtonClick, sx: styles.icon }) }))] }));
});
exports.Searchbar.displayName = 'Searchbar';
