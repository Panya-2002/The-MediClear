"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Button_1 = require("../Button");
const icons_1 = require("../icons");
/**
 * @preconditions Must be a child of Menu component,
 * and returned using a render prop (see implementation in Menu.stories).
 */
const MenuButton = (_a) => {
    var { isOpen, isStretch, chevronSize } = _a, props = __rest(_a, ["isOpen", "isStretch", "chevronSize"]);
    const styles = (0, react_2.useMultiStyleConfig)('Menu', props);
    const ChevronIcon = (0, react_1.useMemo)(() => ((0, jsx_runtime_1.jsx)(react_2.Icon, { as: isOpen ? icons_1.BxsChevronUp : icons_1.BxsChevronDown, fontSize: chevronSize, sx: styles.chevron })), [chevronSize, isOpen, styles.chevron]);
    return ((0, jsx_runtime_1.jsx)(react_2.MenuButton, Object.assign({ as: Button_1.Button, rightIcon: ChevronIcon, width: isStretch ? '100%' : undefined, sx: styles.button }, props)));
};
/**
 * @preconditions Must be a child of Menu component
 * after MenuButton, and returned using a render prop
 * (see implementation in Menu.stories).
 *
 * Used to wrap MenuItem component
 */
const MenuList = react_2.MenuList;
/**
 * Item in MenuList
 */
const MenuItem = react_2.MenuItem;
/**
 * Divider in DropdownMenu
 */
const MenuDivider = react_2.MenuDivider;
/**
 * Used to wrap MenuButton, MenuItem and MenuList components
 */
const Menu = (_a) => {
    var { isStretch } = _a, props = __rest(_a, ["isStretch"]);
    return (0, jsx_runtime_1.jsx)(react_2.Menu, Object.assign({ matchWidth: isStretch, gutter: 4 }, props));
};
exports.Menu = Menu;
exports.Menu.Button = MenuButton;
exports.Menu.List = MenuList;
exports.Menu.Item = MenuItem;
exports.Menu.Divider = MenuDivider;
exports.Menu.Button.displayName = 'Menu.Button';
exports.Menu.List.displayName = 'Menu.List';
exports.Menu.Item.displayName = 'Menu.Item';
exports.Menu.Divider.displayName = 'Menu.Divider';
