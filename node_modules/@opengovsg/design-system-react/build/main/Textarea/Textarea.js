"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Textarea = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_textarea_autosize_1 = __importDefault(require("react-textarea-autosize"));
const react_1 = require("@chakra-ui/react");
const utils_1 = require("@chakra-ui/utils");
exports.Textarea = (0, react_1.forwardRef)((_a, ref) => {
    var { minAutosizeRows = 3, maxAutosizeRows = 6 } = _a, props = __rest(_a, ["minAutosizeRows", "maxAutosizeRows"]);
    const inputStyles = (0, react_1.useStyleConfig)('Textarea', props);
    // Omit extra props so they will not be passed into the DOM and trigger
    // React warnings.
    const inputProps = (0, utils_1.omit)(props, ['isSuccess', 'isPrefilled']);
    return ((0, jsx_runtime_1.jsx)(react_1.Textarea
    //Chakra sets a default minH which prevents autosize to control starting height.
    // Set here instead of on the theme to prevent all base text areas from having no minH.
    , Object.assign({ 
        //Chakra sets a default minH which prevents autosize to control starting height.
        // Set here instead of on the theme to prevent all base text areas from having no minH.
        minH: "unset", ref: ref, as: react_textarea_autosize_1.default, minRows: minAutosizeRows, maxRows: maxAutosizeRows, sx: inputStyles }, inputProps)));
});
exports.Textarea.displayName = 'Textarea';
