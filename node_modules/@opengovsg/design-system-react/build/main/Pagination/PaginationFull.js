"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaginationFull = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Desktop variant for the Pagination component.
 */
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const icons_1 = require("../icons");
const usePaginationRange_1 = require("./usePaginationRange");
// Separate constant to denote a separator in the pagination component.
const SEPARATOR = '\u2026';
const FullPageButton = ({ selectedPage, page, onClick, isDisabled, }) => {
    const isSelected = (0, react_1.useMemo)(() => page === selectedPage, [page, selectedPage]);
    const styles = (0, react_2.useMultiStyleConfig)('Pagination');
    const handleClick = (0, react_1.useCallback)(() => {
        if (page === SEPARATOR)
            return;
        onClick(page);
    }, [onClick, page]);
    if (page === SEPARATOR) {
        return ((0, jsx_runtime_1.jsx)(react_2.chakra.li, { "aria-disabled": isDisabled, sx: styles.separator, children: page }));
    }
    return ((0, jsx_runtime_1.jsx)(react_2.chakra.li, { children: (0, jsx_runtime_1.jsx)(react_2.Button, { variant: "unstyled", "aria-current": isSelected ? 'page' : 'false', sx: styles.button, onClick: handleClick, isDisabled: isDisabled, children: page }) }));
};
const PaginationFull = ({ siblingCount = 1, pageSize, onPageChange, totalCount, currentPage, isDisabled, }) => {
    const paginationRange = (0, usePaginationRange_1.usePaginationRange)({
        totalCount,
        pageSize,
        currentPage,
        siblingCount,
        separator: SEPARATOR,
    });
    const styles = (0, react_2.useMultiStyleConfig)('Pagination', { variant: 'full' });
    const totalPageCount = Math.ceil(totalCount / pageSize);
    const isDisableNextPage = isDisabled || currentPage >= totalPageCount;
    const isDisablePrevPage = isDisabled || currentPage <= 1;
    const handlePageBack = (0, react_1.useCallback)(() => {
        if (isDisablePrevPage)
            return;
        onPageChange(currentPage - 1);
    }, [currentPage, isDisablePrevPage, onPageChange]);
    const handlePageNext = (0, react_1.useCallback)(() => {
        if (isDisableNextPage)
            return;
        onPageChange(currentPage + 1);
    }, [currentPage, isDisableNextPage, onPageChange]);
    return ((0, jsx_runtime_1.jsx)(react_2.chakra.nav, { "aria-label": "Pagination", children: (0, jsx_runtime_1.jsxs)(react_2.chakra.ul, { display: "flex", flexFlow: "row nowrap", listStyleType: "none", alignItems: "center", gap: "2px", children: [(0, jsx_runtime_1.jsx)(react_2.chakra.li, { children: (0, jsx_runtime_1.jsx)(react_2.IconButton, { variant: "unstyled", sx: styles.stepper, "aria-label": "Previous page", isDisabled: isDisablePrevPage, onClick: handlePageBack, icon: (0, jsx_runtime_1.jsx)(icons_1.BxChevronLeft, {}) }) }), paginationRange.map((p, i) => ((0, jsx_runtime_1.jsx)(FullPageButton, { page: p, isDisabled: isDisabled, selectedPage: currentPage, onClick: onPageChange }, i))), (0, jsx_runtime_1.jsx)(react_2.chakra.li, { children: (0, jsx_runtime_1.jsx)(react_2.IconButton, { variant: "unstyled", sx: styles.stepper, "aria-label": "Next page", isDisabled: isDisableNextPage, onClick: handlePageNext, icon: (0, jsx_runtime_1.jsx)(icons_1.BxChevronRight, {}) }) })] }) }));
};
exports.PaginationFull = PaginationFull;
