"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SidebarItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const utils_1 = require("@chakra-ui/utils");
const lodash_1 = require("lodash");
const SidebarContext_1 = require("./SidebarContext");
exports.SidebarItem = (0, react_2.forwardRef)((_a, ref) => {
    var { children, icon, iconProps, isActive } = _a, props = __rest(_a, ["children", "icon", "iconProps", "isActive"]);
    const styles = (0, SidebarContext_1.useSidebarStyles)();
    const { nested } = (0, SidebarContext_1.useSidebarNestContext)();
    const css = (0, react_1.useMemo)(() => {
        if (!nested) {
            return (0, lodash_1.merge)({}, styles.item, styles.label, styles.parent);
        }
        return (0, lodash_1.merge)({}, styles.item, styles.label, styles.child);
    }, [nested, styles.child, styles.item, styles.label, styles.parent]);
    const dataActive = (0, react_1.useMemo)(() => {
        if ((0, utils_1.isFunction)(isActive)) {
            return isActive();
        }
        return isActive;
    }, [isActive]);
    return ((0, jsx_runtime_1.jsx)(react_2.chakra.li, { listStyleType: "none", children: (0, jsx_runtime_1.jsxs)(react_2.Box, Object.assign({ __css: css, ref: ref }, props, { "data-active": (0, utils_1.dataAttr)(dataActive), children: [icon ? (0, jsx_runtime_1.jsx)(react_2.Icon, Object.assign({ as: icon, __css: styles.icon }, iconProps)) : null, children] })) }));
});
exports.SidebarItem.displayName = 'SidebarItem';
