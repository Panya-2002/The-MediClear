"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SidebarList = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const utils_1 = require("@chakra-ui/utils");
const lodash_1 = require("lodash");
const icons_1 = require("../icons");
const SidebarContext_1 = require("./SidebarContext");
const SidebarSection = ({ children, isOpen, }) => {
    const { reduceMotion } = (0, SidebarContext_1.useSidebarContext)();
    const styles = (0, SidebarContext_1.useSidebarStyles)();
    const child = (0, jsx_runtime_1.jsx)(react_2.chakra.ul, { __css: styles.nest, children: children });
    if (reduceMotion)
        return child;
    return (0, jsx_runtime_1.jsx)(react_2.Collapse, { in: isOpen, children: child });
};
exports.SidebarList = (0, react_2.forwardRef)((_a, ref) => {
    var { label, children, icon, iconProps, isActive, defaultIsExpanded, isExpanded: isExpandedProp, onExpand: onExpandProp, onlyCaretToggle = false, onClick } = _a, props = __rest(_a, ["label", "children", "icon", "iconProps", "isActive", "defaultIsExpanded", "isExpanded", "onExpand", "onlyCaretToggle", "onClick"]);
    const styles = (0, SidebarContext_1.useSidebarStyles)();
    const { reduceMotion } = (0, SidebarContext_1.useSidebarContext)();
    const { isOpen, onToggle } = (0, react_2.useDisclosure)({
        defaultIsOpen: defaultIsExpanded,
        isOpen: isExpandedProp,
        onClose: () => onExpandProp === null || onExpandProp === void 0 ? void 0 : onExpandProp(false),
        onOpen: () => onExpandProp === null || onExpandProp === void 0 ? void 0 : onExpandProp(true),
    });
    const handleExpandSection = (0, react_1.useCallback)(() => {
        if (!onlyCaretToggle) {
            onToggle();
        }
        onClick === null || onClick === void 0 ? void 0 : onClick();
    }, [onClick, onToggle, onlyCaretToggle]);
    const dataActive = (0, react_1.useMemo)(() => {
        if ((0, utils_1.isFunction)(isActive)) {
            return isActive();
        }
        return isActive;
    }, [isActive]);
    const itemCss = (0, react_1.useMemo)(() => {
        const mergedStyles = (0, lodash_1.merge)({}, styles.item, styles.parent);
        if (onlyCaretToggle)
            return mergedStyles;
        return (0, lodash_1.merge)({}, mergedStyles, { cursor: 'pointer' });
    }, [onlyCaretToggle, styles.item, styles.parent]);
    const SectionWrapper = (0, react_1.useMemo)(() => {
        if (onlyCaretToggle)
            return react_2.chakra.div;
        return react_2.chakra.button;
    }, [onlyCaretToggle]);
    const ToggleChevronWrapper = (0, react_1.useMemo)(() => {
        if (onlyCaretToggle)
            return react_2.chakra.button;
        return react_2.chakra.div;
    }, [onlyCaretToggle]);
    return ((0, jsx_runtime_1.jsx)(react_2.chakra.li, Object.assign({ __css: styles.list, pl: 0, ref: ref }, props, { children: (0, jsx_runtime_1.jsxs)(react_2.Box, { children: [(0, jsx_runtime_1.jsxs)(SectionWrapper, { __css: itemCss, "data-expanded": (0, utils_1.dataAttr)(isOpen), "data-active": (0, utils_1.dataAttr)(dataActive), onClick: handleExpandSection, children: [(0, jsx_runtime_1.jsxs)(react_2.chakra.span, { flex: 1, __css: styles.label, children: [icon ? ((0, jsx_runtime_1.jsx)(react_2.Icon, Object.assign({ as: icon, __css: styles.icon }, iconProps))) : null, label] }), (0, jsx_runtime_1.jsx)(ToggleChevronWrapper, { layerStyle: "focusRing.default", "aria-label": onlyCaretToggle ? 'Toggle section' : undefined, onClick: onToggle, display: "flex", outline: "none", children: (0, jsx_runtime_1.jsx)(icons_1.ToggleChevron, { reduceMotion: reduceMotion, isOpen: isOpen, styles: styles.icon }) })] }), (0, jsx_runtime_1.jsx)(SidebarContext_1.SidebarNestProvider, { nested: true, children: (0, jsx_runtime_1.jsx)(SidebarSection, { isOpen: isOpen, children: children }) })] }) })));
});
exports.SidebarList.displayName = 'SidebarList';
