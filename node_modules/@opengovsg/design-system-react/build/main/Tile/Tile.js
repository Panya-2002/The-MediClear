"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tile = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@chakra-ui/react");
const [TileStylesProvider, useTileStyles] = (0, react_1.createStylesContext)('Tile');
exports.Tile = (0, react_1.forwardRef)((_a, ref) => {
    var { badge, icon, children, variant, isSelected } = _a, props = __rest(_a, ["badge", "icon", "children", "variant", "isSelected"]);
    const styles = (0, react_1.useMultiStyleConfig)('Tile', Object.assign(Object.assign({}, props), { variant }));
    return (
    // Ref passed into the component as a whole so that it can be focused
    (0, jsx_runtime_1.jsx)(TileStylesProvider, { value: styles, children: (0, jsx_runtime_1.jsxs)(react_1.Button, Object.assign({ variant: "unstyled", sx: styles.container, isActive: isSelected, ref: ref }, props, { children: [(0, jsx_runtime_1.jsxs)(react_1.HStack, { spacing: "1rem", children: [icon && (0, jsx_runtime_1.jsx)(react_1.Icon, { __css: styles.icon, as: icon }), badge] }), children] })) }));
});
const TileTitle = (props) => {
    const styles = useTileStyles();
    // Allow consumers to override default style props with their own styling
    return (0, jsx_runtime_1.jsx)(react_1.Text, Object.assign({ sx: styles.title }, props));
};
const TileSubtitle = (props) => {
    const styles = useTileStyles();
    // Allow consumers to override default style props with their own styling
    return (0, jsx_runtime_1.jsx)(react_1.Text, Object.assign({ sx: styles.subtitle }, props));
};
const TileText = (props) => {
    const styles = useTileStyles();
    // Allow consumers to override default style props with their own styling
    return (0, jsx_runtime_1.jsx)(react_1.Text, Object.assign({ sx: styles.text }, props));
};
exports.Tile.Title = TileTitle;
exports.Tile.Subtitle = TileSubtitle;
exports.Tile.Text = TileText;
exports.Tile.displayName = 'Tile';
exports.Tile.Title.displayName = 'Tile.Title';
exports.Tile.Subtitle.displayName = 'Tile.Subtitle';
exports.Tile.Text.displayName = 'Tile.Text';
