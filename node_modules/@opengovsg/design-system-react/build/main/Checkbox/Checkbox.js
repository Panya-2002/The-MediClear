"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkbox = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const icons_1 = require("../icons");
const Input_1 = require("../Input");
const useCheckboxOthers_1 = require("./useCheckboxOthers");
exports.Checkbox = (0, react_2.forwardRef)((_a, ref) => {
    var { children, colorScheme } = _a, props = __rest(_a, ["children", "colorScheme"]);
    // Passing all props for cleanliness but the size prop is the most relevant
    const { icon: iconStyles } = (0, react_2.useMultiStyleConfig)('Checkbox', props);
    return ((0, jsx_runtime_1.jsx)(react_2.Checkbox, Object.assign({ icon: (0, jsx_runtime_1.jsx)(react_2.Icon, { as: icons_1.BxCheckAnimated, __css: iconStyles, 
            // This prop needs to be passed explicitly for animations
            isChecked: props.isChecked }), colorScheme: colorScheme, ref: ref }, props, { children: children })));
});
exports.Checkbox.displayName = 'Checkbox';
/**
 * Components to support the "Others" option.
 */
const [CheckboxWithOthersStylesProvider, useCheckboxWithOthersStyles] = (0, react_2.createStylesContext)('Checkbox');
/**
 * Provides context values for the Others option.
 */
const OthersWrapper = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    const checkboxRef = (0, react_1.useRef)(null);
    const inputRef = (0, react_1.useRef)(null);
    // Passing all props for cleanliness but size and colorScheme are the most relevant
    const styles = (0, react_2.useMultiStyleConfig)('Checkbox', props);
    return ((0, jsx_runtime_1.jsx)(CheckboxWithOthersStylesProvider, { value: styles, children: (0, jsx_runtime_1.jsx)(useCheckboxOthers_1.CheckboxOthersContext.Provider, { value: { checkboxRef, inputRef }, children: (0, jsx_runtime_1.jsx)(react_2.Box, { __css: styles.othersContainer, children: children }) }) }));
};
/**
 * Wrapper for the checkbox part of the Others option.
 */
const OthersCheckbox = (0, react_2.forwardRef)((props, ref) => {
    const { checkboxRef, inputRef } = (0, useCheckboxOthers_1.useCheckboxOthers)();
    const styles = useCheckboxWithOthersStyles();
    const mergedCheckboxRef = (0, react_2.useMergeRefs)(checkboxRef, ref);
    const handleCheckboxChange = (e) => {
        var _a, _b;
        // Upon checking checkbox, focus text input
        if (e.target.checked) {
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, e);
    };
    return ((0, jsx_runtime_1.jsx)(exports.Checkbox, Object.assign({ ref: mergedCheckboxRef, __css: styles.othersCheckbox }, props, { onChange: handleCheckboxChange, children: "Other" })));
});
OthersCheckbox.displayName = 'OthersCheckbox';
/**
 * Wrapper for the input part of the Others option.
 */
const OthersInput = (0, react_2.forwardRef)((props, ref) => {
    const { checkboxRef, inputRef } = (0, useCheckboxOthers_1.useCheckboxOthers)();
    const styles = useCheckboxWithOthersStyles();
    const mergedInputRef = (0, react_2.useMergeRefs)(inputRef, ref);
    const handleInputChange = (e) => {
        var _a, _b, _c;
        // If there is text in the input, ensure the checkbox is checked.
        if (e.target.value && !((_a = checkboxRef.current) === null || _a === void 0 ? void 0 : _a.checked)) {
            (_b = checkboxRef.current) === null || _b === void 0 ? void 0 : _b.click();
        }
        (_c = props.onChange) === null || _c === void 0 ? void 0 : _c.call(props, e);
    };
    return ((0, jsx_runtime_1.jsx)(Input_1.Input, Object.assign({ sx: styles.othersInput, ref: mergedInputRef }, props, { onChange: handleInputChange })));
});
OthersInput.displayName = 'OthersInput';
exports.Checkbox.OthersWrapper = OthersWrapper;
exports.Checkbox.OthersCheckbox = OthersCheckbox;
exports.Checkbox.OthersInput = OthersInput;
exports.Checkbox.OthersInput.displayName = 'Checkbox.OthersInput';
exports.Checkbox.OthersWrapper.displayName = 'Checkbox.OthersWrapper';
exports.Checkbox.OthersCheckbox.displayName = 'Checkbox.OthersCheckbox';
