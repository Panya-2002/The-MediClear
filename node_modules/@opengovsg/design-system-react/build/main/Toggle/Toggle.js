"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toggle = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const FormControl_1 = require("../FormControl");
const Switch_1 = require("../Switch");
exports.Toggle = (0, react_2.forwardRef)((_a, ref) => {
    var { label, description, containerStyles, labelStyles, descriptionStyles } = _a, props = __rest(_a, ["label", "description", "containerStyles", "labelStyles", "descriptionStyles"]);
    const styles = (0, react_2.useMultiStyleConfig)('Toggle', props);
    const mergedContainerStyles = (0, react_1.useMemo)(() => (0, react_2.mergeThemeOverride)(styles.overallContainer, containerStyles), [containerStyles, styles.overallContainer]);
    const mergedLabelStyles = (0, react_1.useMemo)(() => (0, react_2.mergeThemeOverride)(styles.label, labelStyles), [labelStyles, styles.label]);
    const mergedDescriptionStyles = (0, react_1.useMemo)(() => (0, react_2.mergeThemeOverride)(styles.description, descriptionStyles), [descriptionStyles, styles.description]);
    return ((0, jsx_runtime_1.jsxs)(react_2.Flex, { sx: mergedContainerStyles, children: [(label || description) && ((0, jsx_runtime_1.jsxs)(react_2.Box, { children: [(0, jsx_runtime_1.jsx)(FormControl_1.FormLabel.Label, { sx: mergedLabelStyles, children: label }), description && ((0, jsx_runtime_1.jsx)(FormControl_1.FormLabel.Description, { sx: mergedDescriptionStyles, children: description }))] })), (0, jsx_runtime_1.jsx)(Switch_1.Switch, Object.assign({}, props, { "aria-label": label, ref: ref }))] }));
});
exports.Toggle.displayName = 'Toggle';
