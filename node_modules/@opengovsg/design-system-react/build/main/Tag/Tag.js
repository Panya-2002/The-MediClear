"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag = exports.TagLabel = exports.TagCloseButton = exports.TagRightIcon = exports.TagLeftIcon = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@chakra-ui/react");
const icons_1 = require("../icons");
const [StylesProvider, useStyles] = (0, react_1.createStylesContext)('Tag');
exports.TagLeftIcon = (0, react_1.forwardRef)((props, ref) => {
    const styles = useStyles();
    return ((0, jsx_runtime_1.jsx)(react_1.Icon, Object.assign({ ref: ref, verticalAlign: "top", marginStart: 0 }, props, { __css: styles.icon })));
});
exports.TagRightIcon = (0, react_1.forwardRef)((props, ref) => {
    const styles = useStyles();
    return ((0, jsx_runtime_1.jsx)(react_1.Icon, Object.assign({ ref: ref, verticalAlign: "top", marginEnd: 0 }, props, { __css: styles.icon })));
});
const TagCloseIcon = () => (0, jsx_runtime_1.jsx)(react_1.Icon, { as: icons_1.BxX, fontSize: "inherit" });
/** Not using Chakra's TagCloseButton due to inability to override aria-label */
const TagCloseButton = (_a) => {
    var { isDisabled, children } = _a, rest = __rest(_a, ["isDisabled", "children"]);
    const styles = useStyles();
    return ((0, jsx_runtime_1.jsx)(react_1.Box, { display: "inline-flex", flexGrow: 1, justifyContent: "end", children: (0, jsx_runtime_1.jsx)(react_1.chakra.button, Object.assign({ type: "button", "aria-label": "Remove selected option", disabled: isDisabled, sx: styles.closeButton }, rest, { children: children || (0, jsx_runtime_1.jsx)(TagCloseIcon, {}) })) }));
};
exports.TagCloseButton = TagCloseButton;
exports.TagLabel = (0, react_1.forwardRef)((props, ref) => {
    const styles = useStyles();
    return (0, jsx_runtime_1.jsx)(react_1.chakra.span, Object.assign({ ref: ref, noOfLines: 1 }, props, { __css: styles.label }));
});
exports.TagLabel.displayName = 'TagLabel';
exports.Tag = (0, react_1.forwardRef)((props, ref) => {
    const styles = (0, react_1.useMultiStyleConfig)('Tag', props);
    return ((0, jsx_runtime_1.jsx)(StylesProvider, { value: styles, children: (0, jsx_runtime_1.jsx)(react_1.Tag, Object.assign({}, props, { ref: ref })) }));
});
exports.Tag.displayName = 'Tag';
