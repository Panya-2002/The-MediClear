"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhoneNumberInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Phone Number Input field component.
 * Some of the code is sourced from
 * https://www.npmjs.com/package/react-headless-phone-input but adapted for the
 * application's needs.
 */
const react_1 = require("@chakra-ui/react");
const examples_1 = require("./resources/examples");
const IntlPhoneNumberInput_1 = require("./IntlPhoneNumberInput");
const PhoneNumberInputContext_1 = require("./PhoneNumberInputContext");
const SingleCountryPhoneNumberInput_1 = require("./SingleCountryPhoneNumberInput");
exports.PhoneNumberInput = (0, react_1.forwardRef)((_a, ref) => {
    var { defaultCountry = 'SG', allowInternational = true, onChange: onChangeProp, onBlur, value: valueProp, defaultValue, examples = examples_1.MOBILE_EXAMPLES, examplePlaceholder = 'polite' } = _a, props = __rest(_a, ["defaultCountry", "allowInternational", "onChange", "onBlur", "value", "defaultValue", "examples", "examplePlaceholder"]);
    const [value, onChange] = (0, react_1.useControllableState)({
        value: valueProp,
        defaultValue,
        onChange: onChangeProp,
    });
    const providerProps = {
        defaultCountry,
        allowInternational,
        onChange,
        onBlur,
        defaultValue: value,
        examples,
        examplePlaceholder,
        placeholder: props.placeholder,
    };
    return ((0, jsx_runtime_1.jsx)(PhoneNumberInputContext_1.PhoneNumberInputProvider, Object.assign({}, providerProps, { children: allowInternational ? ((0, jsx_runtime_1.jsx)(IntlPhoneNumberInput_1.IntlPhoneNumberInput, Object.assign({}, props, { ref: ref }))) : ((0, jsx_runtime_1.jsx)(SingleCountryPhoneNumberInput_1.SingleCountryPhoneNumberInput, Object.assign({}, props, { ref: ref }))) })));
});
exports.PhoneNumberInput.displayName = 'PhoneNumberInput';
