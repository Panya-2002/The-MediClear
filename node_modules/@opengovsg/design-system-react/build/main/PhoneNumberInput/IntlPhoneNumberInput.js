"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntlPhoneNumberInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Phone Number Input field component.
 * Some of the code is sourced from
 * https://www.npmjs.com/package/react-headless-phone-input but adapted for the
 * application's needs.
 */
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const _3x2_1 = __importDefault(require("country-flag-icons/react/3x2"));
const icons_1 = require("../icons");
const Input_1 = require("../Input");
const countrySelectUtils_1 = require("./utils/countrySelectUtils");
const PhoneNumberInputContext_1 = require("./PhoneNumberInputContext");
const [IntlPhoneNumberInputStylesProvider, useIntlPhoneNumberInputStyles] = (0, react_2.createStylesContext)('PhoneNumberInput');
exports.IntlPhoneNumberInput = (0, react_2.forwardRef)((props, ref) => {
    const { inputValue, innerInputRef, inputPlaceholder, handleInputChange, handleInputBlur, } = (0, PhoneNumberInputContext_1.usePhoneNumberInput)();
    const styles = (0, react_2.useMultiStyleConfig)('PhoneNumberInput', props);
    // Used so any forwarded refs passed can be merged with internal ref.
    const inputRef = (0, react_2.useMergeRefs)(innerInputRef, ref);
    return ((0, jsx_runtime_1.jsx)(IntlPhoneNumberInputStylesProvider, { value: styles, children: (0, jsx_runtime_1.jsxs)(react_2.InputGroup, { children: [(0, jsx_runtime_1.jsx)(CountrySelect, { isReadOnly: props.isReadOnly, isDisabled: props.isDisabled }), (0, jsx_runtime_1.jsx)(Input_1.Input, Object.assign({ onBlur: handleInputBlur, ref: inputRef, value: inputValue, onChange: handleInputChange, type: "tel", sx: styles.field }, props, { placeholder: inputPlaceholder }))] }) }));
});
const CountrySelect = (props) => {
    const { country, handleCountryChange } = (0, PhoneNumberInputContext_1.usePhoneNumberInput)();
    const styles = useIntlPhoneNumberInputStyles();
    const onCountryChange = (0, react_1.useCallback)((e) => {
        handleCountryChange(e.target.value);
    }, [handleCountryChange]);
    const inputProps = (0, react_2.useFormControl)(props);
    const selectOptions = (0, react_1.useMemo)(() => (0, countrySelectUtils_1.getCountrySelectOptions)(), []);
    return ((0, jsx_runtime_1.jsxs)(react_2.InputLeftAddon, { "aria-disabled": inputProps.disabled, title: countrySelectUtils_1.COUNTRY_CODE_TO_NAME[country], as: "label", sx: styles.country, children: [(0, jsx_runtime_1.jsxs)(react_2.Flex, { align: "center", children: [(0, jsx_runtime_1.jsx)(react_2.Icon, { "aria-disabled": inputProps.disabled, "aria-readonly": inputProps.readOnly, 
                        // Show Flags if available. If value does not exist for any reason,
                        // a default fallback icon will be used by ChakraUI.
                        // See https://chakra-ui.com/docs/media-and-icons/icon#fallback-icon.
                        as: _3x2_1.default[country], sx: styles.icon }), (0, jsx_runtime_1.jsx)(react_2.Icon, { as: icons_1.BxChevronDown })] }), (0, jsx_runtime_1.jsx)(react_2.chakra.select, Object.assign({ "aria-label": "Country selector", sx: styles.selector }, inputProps, { disabled: inputProps.disabled || inputProps.readOnly, value: country, id: `${inputProps.id}-country`, 
                // Override props on change with one that takes in ChangeEvent as a param.
                onChange: onCountryChange, children: selectOptions.map(({ value, label }) => ((0, jsx_runtime_1.jsx)("option", { value: value, children: label }, value))) }))] }));
};
exports.IntlPhoneNumberInput.displayName = 'IntlPhoneNumberInput';
