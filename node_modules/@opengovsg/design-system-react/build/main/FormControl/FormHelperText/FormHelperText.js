"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormHelperText = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const lodash_1 = require("lodash");
const icons_1 = require("../../icons");
/**
 * @precondition This element should be instantiated as a child of ChakraUI's `FormControl` element.
 *
 * An assistive component that conveys additional guidance about the field, such
 * as how it will be used and what types in values should be provided.
 */
const FormHelperText = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    const styles = (0, react_2.useMultiStyleConfig)('Form', props);
    const mergedStyles = (0, react_1.useMemo)(() => (0, lodash_1.merge)({}, styles.helperText, props.sx), [props.sx, styles.helperText]);
    return ((0, jsx_runtime_1.jsxs)(react_2.FormHelperText, Object.assign({}, props, { sx: mergedStyles, children: [props.variant === 'success' && ((0, jsx_runtime_1.jsx)(react_2.Icon, { "aria-hidden": true, as: icons_1.BxsCheckCircle, sx: styles.icon })), children] })));
};
exports.FormHelperText = FormHelperText;
