"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormErrorMessage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@chakra-ui/react");
const icons_1 = require("../../icons");
/**
 * @precondition This element should be instantiated as a child of ChakraUI's
 * `FormControl` element, and `FormControl` must have an `isInvalid = true` prop
 * before this element will be displayed.
 *
 * Used to provide feedback about an invalid input, and suggest clear instructions on how to fix it.
 */
const FormErrorMessage = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    return ((0, jsx_runtime_1.jsxs)(react_1.FormErrorMessage, Object.assign({ alignItems: "top" }, props, { children: [(0, jsx_runtime_1.jsx)(react_1.FormErrorIcon, { as: icons_1.BxsErrorCircle }), children] })));
};
exports.FormErrorMessage = FormErrorMessage;
