"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormLabel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const lodash_1 = require("lodash");
const BxsHelpCircle_1 = require("../../icons/BxsHelpCircle");
const Tooltip_1 = require("../../Tooltip");
/**
 * @preconditions Must be a child of Chakra's `FormControl` component.
 * Used to enhance the usability of form controls.
 *
 * It is used to inform users as to what information
 * is requested for a form field.
 *
 * ♿️ Accessibility: Every form field should have a form label.
 */
const FormLabel = (_a) => {
    var { isRequired, tooltipText, questionNumber, description, children, size } = _a, labelProps = __rest(_a, ["isRequired", "tooltipText", "questionNumber", "description", "children", "size"]);
    return ((0, jsx_runtime_1.jsxs)(exports.FormLabel.Label, Object.assign({ requiredIndicator: (0, jsx_runtime_1.jsx)(react_2.Box, {}), display: "flex", flexDir: "column", size: size }, labelProps, { children: [(0, jsx_runtime_1.jsxs)(react_2.Box, { children: [questionNumber && ((0, jsx_runtime_1.jsx)(exports.FormLabel.QuestionNumber, { size: size, children: questionNumber })), children, (0, jsx_runtime_1.jsx)(exports.FormLabel.OptionalIndicator, { size: size, isRequired: isRequired }), tooltipText && ((0, jsx_runtime_1.jsx)(Tooltip_1.Tooltip, { size: size, label: tooltipText, "aria-label": "Label tooltip", wrapperStyles: {
                            display: 'inline-flex',
                        }, children: (0, jsx_runtime_1.jsx)(react_2.Icon, { lineHeight: 1, ml: "0.5rem", color: "base.content.strong", as: BxsHelpCircle_1.BxsHelpCircle }) }))] }), description && ((0, jsx_runtime_1.jsx)(exports.FormLabel.Description, { children: description }))] })));
};
exports.FormLabel = FormLabel;
// Required for FormControl parent to be able to find FormLabel children components.
exports.FormLabel.displayName = 'FormLabel';
exports.FormLabel.Label = react_2.FormLabel;
const FormLabelDescription = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    // useFormControlContext is a ChakraUI hook that returns props passed down
    // from a parent ChakraUI's `FormControl` component.
    // The return object is used to determine whether FormHelperText or Text is
    // used.
    // Using FormHelperText allows for the children text to be added to the parent
    // FormLabel's aria-describedby attribute. This is done internally by ChakraUI.
    const field = (0, react_2.useFormControlContext)();
    const styles = (0, react_2.useMultiStyleConfig)('Form', props);
    const mergedStyles = (0, react_1.useMemo)(() => (0, lodash_1.merge)({}, styles.helperText, props.sx), [props.sx, styles.helperText]);
    // Render normal Text component if no form context is found.
    const ComponentToRender = (0, react_1.useMemo)(() => {
        if (field)
            return react_2.FormHelperText;
        return react_2.Text;
    }, [field]);
    return ((0, jsx_runtime_1.jsx)(ComponentToRender, Object.assign({}, props, { sx: mergedStyles, children: children })));
};
exports.FormLabel.Description = FormLabelDescription;
exports.FormLabel.QuestionNumber = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    return ((0, jsx_runtime_1.jsxs)(react_2.Text, Object.assign({ as: "span", textStyle: "caption-1", color: "base.content.strong", mr: "0.5rem", verticalAlign: "baseline", lineHeight: 0 }, props, { children: [(0, jsx_runtime_1.jsx)(react_2.VisuallyHidden, { children: "Question number:" }), children] })));
};
const OptionalIndicator = (0, react_2.forwardRef)((_a, ref) => {
    var { isRequired } = _a, props = __rest(_a, ["isRequired"]);
    // useFormControlContext is a ChakraUI hook that returns props passed down
    // from a parent ChakraUI's `FormControl` component.
    // Valid hook usage since composited component is still a component.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const field = (0, react_2.useFormControlContext)();
    const styles = (0, react_2.useMultiStyleConfig)('Form', props);
    // If isRequired is explicitly provided, ignore form control context value.
    if (isRequired !== null && isRequired !== void 0 ? isRequired : field === null || field === void 0 ? void 0 : field.isRequired)
        return null;
    return ((0, jsx_runtime_1.jsx)(react_2.chakra.span, Object.assign({ ref: ref, role: "presentation", "aria-hidden": true, __css: styles.optionalIndicator }, props, { children: "(optional)" })));
});
OptionalIndicator.displayName = 'OptionalIndicator';
exports.FormLabel.OptionalIndicator = OptionalIndicator;
exports.FormLabel.OptionalIndicator.displayName = 'FormLabel.OptionalIndicator';
