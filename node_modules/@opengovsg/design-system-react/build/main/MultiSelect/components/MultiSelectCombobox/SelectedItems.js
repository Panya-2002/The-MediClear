"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectedItems = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Button_1 = require("../../../Button");
const SingleSelect_1 = require("../../../SingleSelect");
const MultiSelectContext_1 = require("../../MultiSelectContext");
const MultiSelectItem_1 = require("../MultiSelectItem");
const ShowMoreItemBlock = ({ amountToShow }) => {
    const { isDisabled, isReadOnly, setIsFocused, inputRef } = (0, SingleSelect_1.useSelectContext)();
    const handleClick = (0, react_1.useCallback)((e) => {
        var _a;
        // Prevent click from bubbling to parent.
        e.stopPropagation();
        if (isDisabled || isReadOnly)
            return;
        setIsFocused(true);
        (_a = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [inputRef, isDisabled, isReadOnly, setIsFocused]);
    return ((0, jsx_runtime_1.jsxs)(Button_1.Button, { onClick: handleClick, variant: "link", size: "sm", tabIndex: -1, alignSelf: "center", children: ["+", amountToShow, " more"] }));
};
const SelectedItems = () => {
    const { selectedItems, maxItems } = (0, MultiSelectContext_1.useMultiSelectContext)();
    const { isFocused, isOpen } = (0, SingleSelect_1.useSelectContext)();
    const items = (0, react_1.useMemo)(() => {
        const itemsToRender = [];
        for (let i = 0; i < selectedItems.length; i++) {
            if (isFocused || !maxItems || i < maxItems || isOpen) {
                const item = selectedItems[i];
                // Key has to be index so focus is maintained correctly when items are removed.
                // Some downshift quirk it seems.
                itemsToRender.push((0, jsx_runtime_1.jsx)(MultiSelectItem_1.MultiSelectItem, { item: item, index: i }, i));
            }
            else {
                itemsToRender.push((0, jsx_runtime_1.jsx)(ShowMoreItemBlock, { amountToShow: selectedItems.length - maxItems }, `show-more-${i}`));
                break;
            }
        }
        return itemsToRender;
    }, [isFocused, isOpen, maxItems, selectedItems]);
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: items });
};
exports.SelectedItems = SelectedItems;
