"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelectCombobox = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const icons_1 = require("../../../icons");
const SingleSelect_1 = require("../../../SingleSelect");
const MultiSelectContext_1 = require("../../MultiSelectContext");
const SelectedItems_1 = require("./SelectedItems");
const MultiItemsContainer = ({ children }) => {
    const { styles } = (0, SingleSelect_1.useSelectContext)();
    return (0, jsx_runtime_1.jsx)(react_2.Box, { sx: styles.itemContainer, children: children });
};
exports.MultiSelectCombobox = (0, react_1.forwardRef)((_props, ref) => {
    const { getInputProps, styles, isDisabled, isReadOnly, isRequired, placeholder, setIsFocused, isOpen, toggleMenu, isInvalid, isSearchable, inputRef, getToggleButtonProps, } = (0, SingleSelect_1.useSelectContext)();
    const { getDropdownProps } = (0, MultiSelectContext_1.useMultiSelectContext)();
    const mergedRefs = (0, react_2.useMergeRefs)(inputRef, ref);
    const handleToggleMenu = (0, react_1.useCallback)(() => {
        var _a;
        if (isDisabled || isReadOnly)
            return;
        if (!isOpen) {
            (_a = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        toggleMenu();
        setIsFocused(true);
    }, [inputRef, isDisabled, isOpen, isReadOnly, setIsFocused, toggleMenu]);
    /**
     * So faux input gets correctly blurred when navigated away.
     */
    const handleInputTabKeydown = (0, react_1.useCallback)((event) => {
        if (event.key === 'Tab') {
            setIsFocused(false);
        }
    }, [setIsFocused]);
    return ((0, jsx_runtime_1.jsxs)(react_2.Flex, { "aria-disabled": isDisabled, "aria-invalid": isInvalid, "aria-readonly": isReadOnly, __css: styles.fieldwrapper, onClick: handleToggleMenu, children: [(0, jsx_runtime_1.jsxs)(MultiItemsContainer, { children: [(0, jsx_runtime_1.jsx)(SelectedItems_1.SelectedItems, {}), (0, jsx_runtime_1.jsx)(react_2.chakra.input, Object.assign({ placeholder: placeholder, __css: styles.field }, getInputProps(Object.assign(Object.assign({}, getDropdownProps({
                        ref: mergedRefs,
                        onFocus: () => setIsFocused(true),
                        onKeyDown: handleInputTabKeydown,
                        readOnly: isReadOnly || !isSearchable,
                        disabled: isDisabled,
                    })), { required: isRequired, 'aria-expanded': !!isOpen }))))] }), (0, jsx_runtime_1.jsx)(react_2.Box, Object.assign({ as: "button", type: "button", _disabled: {
                    cursor: 'not-allowed',
                }, alignSelf: "flex-start", sx: styles.chevron, "aria-label": `${isOpen ? 'Close' : 'Open'} dropdown options` }, getToggleButtonProps({
                disabled: isDisabled || isReadOnly,
                // Allow navigation to this button with screen readers.
                tabIndex: 0,
                // onClick needs to be defined on the toggle button itself to allow
                // screen readers to activate the click action, but need to stop
                // bubbling up to the parent to avoid double-toggling
                onClick: (e) => e.stopPropagation(),
            }), { children: (0, jsx_runtime_1.jsx)(react_2.Icon, { as: isOpen ? icons_1.BxsChevronUp : icons_1.BxsChevronDown, "aria-disabled": isDisabled || isReadOnly }) }))] }));
});
exports.MultiSelectCombobox.displayName = 'MultiSelectCombobox';
