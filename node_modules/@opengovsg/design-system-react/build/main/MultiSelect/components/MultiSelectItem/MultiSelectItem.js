"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelectItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const SingleSelect_1 = require("../../../SingleSelect");
const utils_1 = require("../../../SingleSelect/utils");
const Tag_1 = require("../../../Tag");
const MultiSelectContext_1 = require("../../MultiSelectContext");
const MultiSelectItem = ({ item, index, }) => {
    const { isDisabled, isReadOnly, setIsFocused, closeMenu, isOpen, styles, size, } = (0, SingleSelect_1.useSelectContext)();
    const { getSelectedItemProps, removeSelectedItem, colorScheme } = (0, MultiSelectContext_1.useMultiSelectContext)();
    const itemMeta = (0, react_1.useMemo)(() => {
        return {
            label: (0, utils_1.itemToLabelString)(item),
            icon: (0, utils_1.itemToIcon)(item),
        };
    }, [item]);
    const handleRemoveItem = (0, react_1.useCallback)((e) => {
        // Required so tag can properly gain focus without the parent from
        // stealing focus due to parent's onClick handler.
        e.stopPropagation();
        if (isDisabled || isReadOnly)
            return;
        removeSelectedItem(item);
    }, [isDisabled, isReadOnly, item, removeSelectedItem]);
    const handleTagClick = (0, react_1.useCallback)((e) => {
        // Required so tag can properly gain focus without the parent from
        // stealing focus due to parent's onClick handler.
        e.stopPropagation();
        if (isDisabled || isReadOnly)
            return;
        setIsFocused(true);
        if (isOpen) {
            closeMenu();
        }
    }, [closeMenu, isDisabled, isOpen, isReadOnly, setIsFocused]);
    return ((0, jsx_runtime_1.jsxs)(Tag_1.Tag, Object.assign({ title: itemMeta.label, sx: styles.tag, size: size, colorScheme: colorScheme }, getSelectedItemProps({
        selectedItem: item,
        index,
        disabled: isDisabled,
        onKeyDown: (event) => {
            if ((isDisabled || isReadOnly) &&
                (event.key === 'Backspace' || event.key === 'Delete')) {
                // Prevent Downshift's default behavior where backspace or delete will
                // remove the item from selection regardless of whether the input is disabled.
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                event.nativeEvent.preventDownshiftDefault = true;
            }
        },
        onClick: handleTagClick,
    }), { children: [itemMeta.icon ? ((0, jsx_runtime_1.jsx)(react_2.Icon, { "aria-hidden": true, as: itemMeta.icon, sx: styles.tagIcon, "aria-disabled": isDisabled })) : null, (0, jsx_runtime_1.jsx)(Tag_1.TagLabel, { children: itemMeta.label }), (0, jsx_runtime_1.jsx)(Tag_1.TagCloseButton, { tabIndex: -1, "aria-hidden": true, isDisabled: isDisabled, onClick: handleRemoveItem })] })));
};
exports.MultiSelectItem = MultiSelectItem;
