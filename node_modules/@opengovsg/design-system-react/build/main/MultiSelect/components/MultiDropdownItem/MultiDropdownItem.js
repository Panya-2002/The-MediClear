"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiDropdownItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const SingleSelect_1 = require("../../../SingleSelect");
const components_1 = require("../../../SingleSelect/components");
const itemUtils_1 = require("../../../SingleSelect/utils/itemUtils");
const ItemCheckboxIcon_1 = require("./ItemCheckboxIcon");
const MultiDropdownItem = ({ item, index, }) => {
    const { getItemProps, isItemSelected, styles, inputValue, size } = (0, SingleSelect_1.useSelectContext)();
    const { isSelected, icon, label, description, isDisabled } = (0, react_1.useMemo)(() => ({
        isSelected: isItemSelected(item),
        icon: (0, itemUtils_1.itemToIcon)(item),
        label: (0, itemUtils_1.itemToLabelString)(item),
        description: (0, itemUtils_1.itemToDescriptionString)(item),
        isDisabled: (0, itemUtils_1.isItemDisabled)(item),
    }), [isItemSelected, item]);
    return ((0, jsx_runtime_1.jsx)(react_2.ListItem, Object.assign({ sx: styles.item }, getItemProps({
        item,
        index,
        disabled: isDisabled,
    }), { title: label, children: (0, jsx_runtime_1.jsxs)(react_2.Stack, { direction: "row", spacing: "1rem", overflowX: "auto", children: [(0, jsx_runtime_1.jsx)(ItemCheckboxIcon_1.ItemCheckboxIcon, { isDisabled: isDisabled, isChecked: isSelected, size: size }), (0, jsx_runtime_1.jsxs)(react_2.Flex, { flexDir: "column", minW: 0, children: [(0, jsx_runtime_1.jsxs)(react_2.Stack, { direction: "row", spacing: "0.5rem", align: "center", children: [icon ? (0, jsx_runtime_1.jsx)(react_2.Icon, { as: icon, sx: styles.icon }) : null, (0, jsx_runtime_1.jsx)(react_2.Text, { minWidth: 0, textOverflow: "ellipsis", whiteSpace: "nowrap", overflowX: "hidden", children: (0, jsx_runtime_1.jsx)(components_1.DropdownItemTextHighlighter, { inputValue: inputValue, textToHighlight: label }) })] }), description && ((0, jsx_runtime_1.jsx)(react_2.Text, { sx: styles.itemDescription, children: (0, jsx_runtime_1.jsx)(components_1.DropdownItemTextHighlighter, { inputValue: inputValue, textToHighlight: description }) })), isSelected && ((0, jsx_runtime_1.jsx)(react_2.VisuallyHidden, { "aria-live": "assertive", children: ", selected" }))] })] }) })));
};
exports.MultiDropdownItem = MultiDropdownItem;
