"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Switch = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Adapted from
 * https://github.com/chakra-ui/chakra-ui/blob/main/packages/switch/src/switch.tsx
 * so as to support inserting icons in the switch thumb (the circular part).
 */
const react_1 = require("react");
const checkbox_1 = require("@chakra-ui/checkbox");
const react_2 = require("@chakra-ui/react");
const system_1 = require("@chakra-ui/system");
const utils_1 = require("@chakra-ui/utils");
const icons_1 = require("../icons");
exports.Switch = (0, system_1.forwardRef)((_a, ref) => {
    var { disabledIcon = icons_1.BxLockAlt, checkedIcon = icons_1.BxCheck, uncheckedIcon = icons_1.BxX, loadingIcon = icons_1.BxLoader, isLoading } = _a, props = __rest(_a, ["disabledIcon", "checkedIcon", "uncheckedIcon", "loadingIcon", "isLoading"]);
    const styles = (0, system_1.useMultiStyleConfig)('Switch', props);
    const prefersReducedMotion = (0, react_2.usePrefersReducedMotion)();
    const _b = (0, system_1.omitThemingProps)(props), { spacing = '0.5rem', children } = _b, ownProps = __rest(_b, ["spacing", "children"]);
    const { state, getInputProps, getCheckboxProps, getRootProps, getLabelProps, } = (0, checkbox_1.useCheckbox)(Object.assign(Object.assign({}, ownProps), { isReadOnly: isLoading }));
    const containerStyles = (0, react_1.useMemo)(() => (Object.assign({ display: 'inline-block', position: 'relative', verticalAlign: 'middle', lineHeight: 0 }, styles.container)), [styles.container]);
    const trackStyles = (0, react_1.useMemo)(() => (Object.assign({ display: 'inline-flex', flexShrink: 0, justifyContent: 'flex-start', boxSizing: 'content-box', cursor: 'pointer' }, styles.track)), [styles.track]);
    const labelStyles = (0, react_1.useMemo)(() => (Object.assign({ userSelect: 'none', marginStart: spacing }, styles.label)), [spacing, styles.label]);
    const ThumbIcon = (0, react_1.useMemo)(() => {
        if (isLoading)
            return loadingIcon;
        if (state.isDisabled)
            return disabledIcon;
        return state.isChecked ? checkedIcon : uncheckedIcon;
    }, [
        checkedIcon,
        disabledIcon,
        isLoading,
        loadingIcon,
        state.isChecked,
        state.isDisabled,
        uncheckedIcon,
    ]);
    const iconComponent = (0, react_1.useMemo)(() => {
        let animation;
        if (isLoading) {
            const spin = (0, react_2.keyframes)({
                '0%': {
                    transform: 'rotate(0deg)',
                },
                '100%': {
                    transform: 'rotate(360deg)',
                },
            });
            animation = prefersReducedMotion
                ? undefined
                : `${spin} 2.5s linear infinite`;
        }
        return ((0, jsx_runtime_1.jsx)(react_2.Icon, { as: ThumbIcon, animation: animation, __css: styles.thumbIcon, "data-checked": (0, utils_1.dataAttr)(state.isChecked) }));
    }, [
        ThumbIcon,
        isLoading,
        prefersReducedMotion,
        state.isChecked,
        styles.thumbIcon,
    ]);
    return ((0, jsx_runtime_1.jsxs)(system_1.chakra.label, Object.assign({}, getRootProps(), { className: (0, utils_1.cx)('chakra-switch', props.className), __css: containerStyles, "data-group": true, children: [(0, jsx_runtime_1.jsx)("input", Object.assign({ className: "chakra-switch__input" }, getInputProps({}, ref))), (0, jsx_runtime_1.jsx)(system_1.chakra.span, Object.assign({}, getCheckboxProps(), { className: "chakra-switch__track", __css: trackStyles, children: (0, jsx_runtime_1.jsx)(system_1.chakra.span, { __css: styles.thumb, className: "chakra-switch__thumb", "data-checked": (0, utils_1.dataAttr)(state.isChecked), "data-hover": (0, utils_1.dataAttr)(state.isHovered), children: iconComponent }) })), children && ((0, jsx_runtime_1.jsx)(system_1.chakra.span, Object.assign({ className: "chakra-switch__label" }, getLabelProps(), { __css: labelStyles, children: children })))] })));
});
exports.Switch.displayName = 'Switch';
