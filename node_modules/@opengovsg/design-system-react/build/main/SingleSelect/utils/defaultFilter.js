"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultFilter = void 0;
const fuzzysort_1 = __importDefault(require("fuzzysort"));
const itemUtils_1 = require("./itemUtils");
const defaultFilter = (items, value) => {
    const item = items[0];
    if (!item)
        return items;
    const sortKeys = [];
    if ((0, itemUtils_1.itemIsObject)(item)) {
        // Use label to sort if it exists, else use value.
        // Do not use both since users may search by label and get confused when
        // value (that may not be the same as the label) shows up.
        if (item.label) {
            sortKeys.push('label');
        }
        else {
            sortKeys.push('value');
        }
        sortKeys.push('description');
        return fuzzysort_1.default
            .go(value, items, {
            all: true,
            keys: sortKeys,
            // Create a custom combined score to sort by. -500 to the desc score makes it a worse match
            scoreFn: (a) => {
                return Math.max(a[0] ? a[0].score : -1000, a[1] ? a[1].score - 500 : -1000);
            },
            threshold: -999,
        })
            .map((result) => result.obj);
    }
    // String search.
    return fuzzysort_1.default.go(value, items).map((result) => result.target);
};
exports.defaultFilter = defaultFilter;
