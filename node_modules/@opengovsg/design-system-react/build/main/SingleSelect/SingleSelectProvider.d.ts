/// <reference types="react" />
import { FormControlOptions, ThemingProps } from '@chakra-ui/react';
import { UseComboboxProps } from 'downshift';
import { SharedSelectContextReturnProps } from './SelectContext';
import { ComboboxItem } from './types';
export interface SingleSelectProviderProps<Item extends ComboboxItem = ComboboxItem> extends SharedSelectContextReturnProps<Item>, FormControlOptions {
    /** Controlled selected value */
    value: string;
    /** Controlled selected item onChange handler */
    onChange: (value: string) => void;
    /** Function based on which items in dropdown are filtered. Default filter filters by fuzzy match. */
    filter?(items: Item[], value: string): Item[];
    /** Initial dropdown opened state. */
    initialIsOpen?: boolean;
    /** Props to override default useComboboxProps, if any. */
    comboboxProps?: Partial<UseComboboxProps<Item>>;
    /** aria-describedby to be attached to the combobox input, if any. */
    inputAria?: {
        id: string;
        label: string;
    };
    children: React.ReactNode;
    /** Color scheme of component */
    colorScheme?: ThemingProps<'SingleSelect'>['colorScheme'];
}
export declare const SingleSelectProvider: ({ items: rawItems, value, onChange, name, filter, nothingFoundLabel, placeholder: placeholderProp, clearButtonLabel, isClearable, isSearchable, initialIsOpen, isInvalid: isInvalidProp, isReadOnly: isReadOnlyProp, isDisabled: isDisabledProp, isRequired: isRequiredProp, children, inputAria, colorScheme, size: _size, comboboxProps, }: SingleSelectProviderProps) => JSX.Element;
