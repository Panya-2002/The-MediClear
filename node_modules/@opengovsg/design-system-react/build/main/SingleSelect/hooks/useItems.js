"use strict";
// Hook to normalize item array for easy filtering and checking of state
Object.defineProperty(exports, "__esModule", { value: true });
exports.useItems = void 0;
const react_1 = require("react");
const itemUtils_1 = require("../utils/itemUtils");
const useItems = ({ rawItems, }) => {
    const normalizedItems = (0, react_1.useMemo)(() => {
        const initialStore = {
            // Normalized store for filtering and retrieval of state
            byValue: {},
        };
        let itemIndex = 0;
        return rawItems.reduce((store, item) => {
            const value = (0, itemUtils_1.itemToValue)(item);
            // Do nothing if no value.
            if (!value) {
                return store;
            }
            store.byValue[value] = {
                item,
                index: itemIndex,
            };
            // Only increment if item has a value.
            itemIndex++;
            return store;
        }, initialStore);
    }, [rawItems]);
    const getItemByValue = (0, react_1.useCallback)((value) => {
        var _a;
        return (_a = normalizedItems.byValue[value]) !== null && _a !== void 0 ? _a : null;
    }, [normalizedItems.byValue]);
    return {
        items: rawItems,
        getItemByValue,
    };
};
exports.useItems = useItems;
