"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectCombobox = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Input_1 = require("../../../Input");
const SelectContext_1 = require("../../SelectContext");
const itemUtils_1 = require("../../utils/itemUtils");
const ComboboxClearButton_1 = require("./ComboboxClearButton");
const ToggleChevron_1 = require("./ToggleChevron");
exports.SelectCombobox = (0, react_1.forwardRef)((_props, ref) => {
    const { toggleMenu, selectedItem, getInputProps, styles, isDisabled, isSearchable, isReadOnly, isInvalid, inputValue, isRequired, placeholder, isOpen, resetInputValue, inputRef, isClearable, size, } = (0, SelectContext_1.useSelectContext)();
    const mergedInputRef = (0, react_2.useMergeRefs)(inputRef, ref);
    const selectedItemMeta = (0, react_1.useMemo)(() => ({
        icon: (0, itemUtils_1.itemToIcon)(selectedItem),
        label: (0, itemUtils_1.itemToLabelString)(selectedItem),
    }), [selectedItem]);
    const handleToggleMenu = (0, react_1.useCallback)(() => {
        if (isReadOnly || isDisabled)
            return;
        return toggleMenu();
    }, [isDisabled, isReadOnly, toggleMenu]);
    return ((0, jsx_runtime_1.jsxs)(react_2.Flex, { children: [(0, jsx_runtime_1.jsxs)(react_2.InputGroup, { size: size, pos: "relative", display: "grid", marginInlineEnd: isClearable ? '-1px' : undefined, _focusWithin: {
                    zIndex: 1,
                }, gridTemplateColumns: "1fr", children: [(0, jsx_runtime_1.jsxs)(react_2.Stack, { visibility: inputValue ? 'hidden' : 'initial', direction: "row", spacing: "1rem", "aria-disabled": isDisabled, sx: styles.selected, "aria-hidden": true, children: [selectedItemMeta.icon ? ((0, jsx_runtime_1.jsx)(react_2.Icon, { sx: styles.icon, as: selectedItemMeta.icon, "aria-disabled": isDisabled })) : null, (0, jsx_runtime_1.jsx)(react_2.Text, { noOfLines: 1, children: selectedItemMeta.label })] }), (0, jsx_runtime_1.jsx)(Input_1.Input, Object.assign({ isReadOnly: !isSearchable || isReadOnly, isInvalid: isInvalid, isDisabled: isDisabled, placeholder: selectedItem ? undefined : placeholder, sx: styles.field }, getInputProps({
                        onClick: handleToggleMenu,
                        onBlur: () => !isOpen && resetInputValue(),
                        ref: mergedInputRef,
                        disabled: isDisabled,
                        readOnly: isReadOnly,
                        required: isRequired,
                        'aria-expanded': !!isOpen,
                    }))), (0, jsx_runtime_1.jsx)(ToggleChevron_1.ToggleChevron, {})] }), (0, jsx_runtime_1.jsx)(ComboboxClearButton_1.ComboboxClearButton, {})] }));
});
exports.SelectCombobox.displayName = 'SelectCombobox';
