"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectMenu = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_virtuoso_1 = require("react-virtuoso");
const react_1 = require("@chakra-ui/react");
const constants_1 = require("../constants");
const SelectContext_1 = require("../SelectContext");
const itemUtils_1 = require("../utils/itemUtils");
const DropdownItem_1 = require("./DropdownItem");
const SelectPopover_1 = require("./SelectPopover");
const SelectMenu = () => {
    const { getMenuProps, isOpen, items, nothingFoundLabel, styles, virtualListRef, virtualListHeight, size, } = (0, SelectContext_1.useSelectContext)();
    const { floatingRef, floatingStyles } = (0, SelectPopover_1.useSelectPopover)();
    return ((0, jsx_runtime_1.jsx)(react_1.Portal, { children: (0, jsx_runtime_1.jsxs)(react_1.List, Object.assign({}, getMenuProps({ ref: floatingRef }, 
        // Suppressing ref error since this will be in a portal and will be conditionally rendered.
        // See https://github.com/downshift-js/downshift/issues/1272#issuecomment-1063244446
        { suppressRefError: true }), { style: floatingStyles, sx: styles.list, zIndex: "dropdown", children: [isOpen && items.length > 0 && ((0, jsx_runtime_1.jsx)(react_virtuoso_1.Virtuoso, { ref: virtualListRef, data: items, overscan: constants_1.VIRTUAL_LIST_OVERSCAN_HEIGHT[size], style: { height: virtualListHeight }, itemContent: (index, item) => {
                        return ((0, jsx_runtime_1.jsx)(DropdownItem_1.DropdownItem, { item: item, index: index }, `${(0, itemUtils_1.itemToValue)(item)}${index}`));
                    } })), isOpen && items.length === 0 ? ((0, jsx_runtime_1.jsx)(react_1.ListItem, { role: "option", sx: styles.emptyItem, children: nothingFoundLabel })) : null] })) }));
};
exports.SelectMenu = SelectMenu;
