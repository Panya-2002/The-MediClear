"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectPopoverProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const react_3 = require("@floating-ui/react");
const SelectContext_1 = require("../../SelectContext");
const SelectPopoverContext_1 = require("./SelectPopoverContext");
const SelectPopoverProvider = ({ children, }) => {
    const { setIsFocused, isOpen } = (0, SelectContext_1.useSelectContext)();
    const wrapperRef = (0, react_1.useRef)(null);
    const { x, y, refs, reference, floating, strategy, update } = (0, react_3.useFloating)({
        placement: 'bottom-start',
        strategy: 'absolute',
        open: isOpen,
        middleware: [
            // offset middleware should be the first middleware
            (0, react_3.offset)(1),
            (0, react_3.flip)(),
            (0, react_3.hide)(),
            // Set width to be the same as the reference element.
            (0, react_3.size)({
                apply({ rects, elements }) {
                    Object.assign(elements.floating.style, {
                        width: `${rects.reference.width}px`,
                    });
                },
            }),
        ],
    });
    const mergedReferenceRefs = (0, react_2.useMergeRefs)(wrapperRef, reference);
    const floatingStyles = (0, react_1.useMemo)(() => ({
        position: strategy,
        top: y !== null && y !== void 0 ? y : 0,
        left: x !== null && x !== void 0 ? x : 0,
    }), [strategy, x, y]);
    (0, react_1.useEffect)(() => {
        if (isOpen && refs.reference.current && refs.floating.current) {
            return (0, react_3.autoUpdate)(refs.reference.current, refs.floating.current, update);
        }
    }, [isOpen, update, refs.floating, refs.reference]);
    (0, react_2.useOutsideClick)({
        ref: wrapperRef,
        handler: () => setIsFocused(false),
    });
    return ((0, jsx_runtime_1.jsx)(SelectPopoverContext_1.SelectPopoverContext.Provider, { value: {
            floatingRef: floating,
            floatingStyles,
        }, children: (0, jsx_runtime_1.jsx)(react_2.Box, { ref: mergedReferenceRefs, children: children }) }));
};
exports.SelectPopoverProvider = SelectPopoverProvider;
