"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockDateDecorator = exports.getTabletViewParameters = exports.getMobileViewParameters = exports.viewports = exports.fixedHeightDecorator = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@chakra-ui/react");
const date_fns_1 = require("date-fns");
const mockdate_1 = __importDefault(require("mockdate"));
const breakpoints_1 = require("../theme/foundations/breakpoints");
/**
 * Helper function to convert theme breakpoint into viewport width in px for
 * Chromatic viewpoint snapshots.
 * @param breakpoint the theme breakpoint to convert
 * @returns the number pixel width of the given breakpoint.
 */
const breakpointToViewportWidth = (breakpoint) => {
    const rem = 16;
    return parseInt(breakpoints_1.breakpoints[breakpoint].replace('em', '')) * rem;
};
const fixedHeightDecorator = (height) => (storyFn) => (0, jsx_runtime_1.jsx)(react_1.Box, { h: height, children: storyFn() });
exports.fixedHeightDecorator = fixedHeightDecorator;
/**
 * Viewports mapping viewport key to their width in (pixel) number.
 * Used for Chromatic viewpoint snapshots which requires the numbers in pixels.
 */
exports.viewports = {
    sm: breakpointToViewportWidth('sm'),
    md: breakpointToViewportWidth('md'),
    lg: breakpointToViewportWidth('lg'),
    xl: breakpointToViewportWidth('xl'),
};
const getMobileViewParameters = () => {
    return {
        viewport: {
            defaultViewport: 'mobile1',
        },
        chromatic: { viewports: [exports.viewports.sm] },
    };
};
exports.getMobileViewParameters = getMobileViewParameters;
const getTabletViewParameters = () => {
    return {
        viewport: {
            defaultViewport: 'tablet',
        },
        chromatic: { viewports: [exports.viewports.md] },
    };
};
exports.getTabletViewParameters = getTabletViewParameters;
const mockDateDecorator = (storyFn, { parameters }) => {
    mockdate_1.default.reset();
    if (!parameters.mockdate) {
        return storyFn();
    }
    mockdate_1.default.set(parameters.mockdate);
    const mockedDate = (0, date_fns_1.format)(parameters.mockdate, 'dd-mm-yyyy HH:mma');
    return ((0, jsx_runtime_1.jsxs)(react_1.Box, { children: [(0, jsx_runtime_1.jsxs)(react_1.Box, { pos: "fixed", top: 0, right: 0, bg: "white", p: "0.25rem", fontSize: "0.75rem", lineHeight: 1, zIndex: "docked", children: ["Mocking date: ", mockedDate] }), storyFn()] }));
};
exports.mockDateDecorator = mockDateDecorator;
