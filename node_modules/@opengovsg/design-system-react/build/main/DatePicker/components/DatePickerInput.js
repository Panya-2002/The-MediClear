"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatePickerInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_input_mask_1 = __importDefault(require("react-input-mask"));
const react_2 = require("@chakra-ui/react");
const Input_1 = require("../../Input");
const DatePickerContext_1 = require("../DatePickerContext");
const CalendarButton_1 = require("./CalendarButton");
// eslint-disable-next-line @typescript-eslint/ban-types
exports.DatePickerInput = (0, react_2.forwardRef)((_props, ref) => {
    const { internalInputValue, handleInputChange, handleInputBlur, handleInputClick, fcProps, allowManualInput, placeholder, inputRef, internalValue, size, } = (0, DatePickerContext_1.useDatePicker)();
    const mergedInputRef = (0, react_2.useMergeRefs)(inputRef, ref);
    const selectedDateAriaLiveText = (0, react_1.useMemo)(() => {
        if (!internalValue) {
            return 'No date selected';
        }
        return `Selected date: ${internalValue.toLocaleDateString()}`;
    }, [internalValue]);
    // Allow for SSR with react-input-mask package.
    const [hasMounted, setHasMounted] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        setHasMounted(true);
    }, []);
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(react_2.VisuallyHidden, { "aria-live": "assertive", children: selectedDateAriaLiveText }), (0, jsx_runtime_1.jsxs)(react_2.InputGroup, { size: size, children: [hasMounted ? ((0, jsx_runtime_1.jsx)(Input_1.Input, Object.assign({ size: size, inputMode: "numeric" // Nudge Android mobile keyboard to be numeric
                        , pattern: "\\d*" // Nudge numeric keyboard on iOS Safari.
                        , as: react_input_mask_1.default, mask: "99/99/9999", value: internalInputValue, onChange: handleInputChange, placeholder: placeholder, maskPlaceholder: placeholder, ref: mergedInputRef }, fcProps, { onBlur: handleInputBlur, onClick: handleInputClick, isReadOnly: fcProps.isReadOnly || !allowManualInput }))) : ((0, jsx_runtime_1.jsx)(Input_1.Input, { pattern: "\\d*", size: size, inputMode: "numeric", placeholder: placeholder })), (0, jsx_runtime_1.jsx)(react_2.InputRightAddon, { p: 0, border: "none", children: (0, jsx_runtime_1.jsx)(CalendarButton_1.CalendarButton, {}) })] })] }));
});
exports.DatePickerInput.displayName = 'DatePickerInput';
