"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachmentFileInfo = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const utils_1 = require("@chakra-ui/utils");
const IconButton_1 = require("../IconButton");
const icons_1 = require("../icons");
const getReadableFileSize_1 = require("./utils/getReadableFileSize");
const AttachmentContext_1 = require("./AttachmentContext");
exports.AttachmentFileInfo = (0, react_2.forwardRef)(({ file, handleRemoveFile, imagePreview, isDisabled, isReadOnly }, ref) => {
    const [previewSrc, setPreviewSrc] = (0, react_1.useState)('');
    const styles = (0, AttachmentContext_1.useAttachmentStyles)();
    const readableFileSize = (0, react_1.useMemo)(() => (0, getReadableFileSize_1.getReadableFileSize)(file.size), [file.size]);
    (0, react_1.useEffect)(() => {
        let objectUrl = '';
        // create the preview
        if (file.type.startsWith('image/')) {
            objectUrl = URL.createObjectURL(file);
            setPreviewSrc(objectUrl);
        }
        // free memory when ever this component is unmounted
        return () => URL.revokeObjectURL(objectUrl);
    }, [file]);
    return ((0, jsx_runtime_1.jsxs)(react_2.Flex, { "aria-disabled": isDisabled, ref: ref, sx: styles.fileInfoContainer, children: [(0, jsx_runtime_1.jsxs)(react_2.VisuallyHidden, { children: ["File attached: ", file.name, " with file size of ", readableFileSize] }), imagePreview && previewSrc && ((0, jsx_runtime_1.jsx)(react_2.Image, { alt: "uploaded image preview", sx: styles.fileInfoImage, src: previewSrc })), (0, jsx_runtime_1.jsxs)(react_2.Flex, { sx: styles.fileInfo, children: [(0, jsx_runtime_1.jsxs)(react_2.Stack, { spacing: "0.25rem", flexDir: "column", "aria-hidden": true, children: [(0, jsx_runtime_1.jsx)(react_2.Text, { children: file.name }), (0, jsx_runtime_1.jsx)(react_2.Text, { "data-disabled": (0, utils_1.dataAttr)(isDisabled), sx: styles.fileInfoDescription, children: readableFileSize })] }), (0, jsx_runtime_1.jsx)(IconButton_1.IconButton, { variant: "clear", colorScheme: "critical", "aria-label": "Remove file", icon: (0, jsx_runtime_1.jsx)(icons_1.BxTrash, {}), onClick: handleRemoveFile, isDisabled: isDisabled || isReadOnly })] })] }));
});
exports.AttachmentFileInfo.displayName = 'AttachmentFileInfo';
