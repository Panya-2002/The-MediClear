"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagInputTag = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_roving_tabindex_1 = require("react-roving-tabindex");
const Tag_1 = require("../Tag");
const TagInputTag = (_a) => {
    var { label, isDisabled = false, isInvalid, colorScheme, onClearTag, onBlur } = _a, props = __rest(_a, ["label", "isDisabled", "isInvalid", "colorScheme", "onClearTag", "onBlur"]);
    // The ref of the input to be controlled.
    const focusedRef = (0, react_1.useRef)(null);
    // handleKeyDown and handleClick are stable for the lifetime of the component:
    const [tabIndex, focused, handleRovingKeyDown, handleRovingClick] = (0, react_roving_tabindex_1.useRovingTabIndex)(focusedRef, isDisabled);
    // Set focus on the tag if it gets focus.
    (0, react_roving_tabindex_1.useFocusEffect)(focused, focusedRef);
    const handleClick = (0, react_1.useCallback)((event) => {
        handleRovingClick();
        event.stopPropagation();
    }, [handleRovingClick]);
    const handleCloseButtonClick = (0, react_1.useCallback)((event) => {
        onClearTag(event);
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
        event.stopPropagation();
    }, [onBlur, onClearTag]);
    const handleKeyDown = (0, react_1.useCallback)((event) => {
        switch (event.key) {
            case 'Delete':
            case 'Backspace':
                return onClearTag(event);
        }
        handleRovingKeyDown(event);
    }, [handleRovingKeyDown, onClearTag]);
    return ((0, jsx_runtime_1.jsxs)(Tag_1.Tag, Object.assign({ cursor: "pointer", "aria-disabled": isDisabled, "aria-invalid": isInvalid, colorScheme: isInvalid ? 'critical' : colorScheme }, props, { ref: focusedRef, tabIndex: tabIndex, onKeyDown: handleKeyDown, onClick: handleClick, children: [(0, jsx_runtime_1.jsx)(Tag_1.TagLabel, { title: label, children: label }), (0, jsx_runtime_1.jsx)(Tag_1.TagCloseButton, { tabIndex: -1, isDisabled: isDisabled, onClick: handleCloseButtonClick })] })));
};
exports.TagInputTag = TagInputTag;
