"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_roving_tabindex_1 = require("react-roving-tabindex");
const react_2 = require("@chakra-ui/react");
const TagInputInput_1 = require("./TagInputInput");
const TagInputProvider_1 = require("./TagInputProvider");
const TagInputTag_1 = require("./TagInputTag");
exports.TagInput = (0, react_2.forwardRef)((_a, ref) => {
    var { value: valueProp, defaultValue = [], onChange: onChangeProp, onKeyDown, onBlur, keyDownKeys = ['Enter', ',', ' '], tagColorScheme = 'main', tagValidation = () => true, preventDuplicates = true, size } = _a, props = __rest(_a, ["value", "defaultValue", "onChange", "onKeyDown", "onBlur", "keyDownKeys", "tagColorScheme", "tagValidation", "preventDuplicates", "size"]);
    const inputProps = (0, react_2.useFormControl)(props);
    const styles = (0, react_2.useMultiStyleConfig)('TagInput', Object.assign(Object.assign({}, inputProps), { size }));
    const [value, onChange] = (0, react_2.useControllableState)({
        value: valueProp,
        onChange: onChangeProp,
        defaultValue,
    });
    const inputRef = (0, react_1.useRef)(null);
    const mergedInputRefs = (0, react_2.useMergeRefs)(ref, inputRef);
    const handleFieldClick = (0, react_1.useCallback)(() => {
        var _a;
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, []);
    const addTag = (0, react_1.useCallback)((event, tag) => {
        if (event.isDefaultPrevented())
            return;
        if (preventDuplicates) {
            if (value.includes(tag))
                return;
            onChange(Array.from(new Set([...value, ...tag.split(',')])));
        }
        else {
            onChange(value.concat(tag.split(',')));
        }
    }, [onChange, preventDuplicates, value]);
    const removeTag = (0, react_1.useCallback)((event, index) => {
        if (event.isDefaultPrevented())
            return;
        onChange([...value.slice(0, index), ...value.slice(index + 1)]);
    }, [onChange, value]);
    const handleRemoveTag = (0, react_1.useCallback)((index) => (event) => {
        removeTag(event, index);
    }, [removeTag]);
    const handleBlur = (0, react_1.useCallback)((event) => {
        const currentValue = event.target.value;
        // No value to add a tag to.
        if (!currentValue.trim()) {
            event.target.value = '';
        }
        else {
            addTag(event, currentValue);
            if (!event.isDefaultPrevented()) {
                event.target.value = '';
            }
            event.preventDefault();
        }
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
    }, [addTag, onBlur]);
    const handleKeyDown = (0, react_1.useCallback)((event) => {
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
        if (event.isDefaultPrevented())
            return;
        if (event.isPropagationStopped())
            return;
        const { currentTarget, key } = event;
        const { selectionStart, selectionEnd } = currentTarget;
        if (key === 'Backspace' &&
            value.length > 0 &&
            selectionStart === 0 &&
            selectionEnd === 0) {
            return removeTag(event, value.length - 1);
        }
        if (!currentTarget.value.trim())
            return; // No value to add a tag to.
        if (keyDownKeys.indexOf(key) > -1 && currentTarget.value) {
            addTag(event, currentTarget.value);
            if (!event.isDefaultPrevented()) {
                currentTarget.value = '';
            }
            event.preventDefault();
        }
    }, [onKeyDown, keyDownKeys, value.length, addTag, removeTag]);
    return ((0, jsx_runtime_1.jsx)(react_roving_tabindex_1.RovingTabIndexProvider, { children: (0, jsx_runtime_1.jsx)(TagInputProvider_1.TagInputProvider, { styles: styles, children: (0, jsx_runtime_1.jsxs)(react_2.Box, { sx: styles.container, onClick: handleFieldClick, "aria-disabled": inputProps.disabled, "aria-invalid": inputProps['aria-invalid'], "aria-readonly": inputProps.readOnly, children: [value.map((tag, index) => ((0, jsx_runtime_1.jsx)(TagInputTag_1.TagInputTag, { isDisabled: inputProps.disabled, colorScheme: tagColorScheme, isInvalid: !tagValidation(tag), label: tag, onClearTag: handleRemoveTag(index), onBlur: onBlur, size: size }, index))), (0, jsx_runtime_1.jsx)(TagInputInput_1.TagInputInput, Object.assign({}, inputProps, { onKeyDown: handleKeyDown, onBlur: handleBlur, ref: mergedInputRefs }))] }) }) }));
});
