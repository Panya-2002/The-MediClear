"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagInputInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_roving_tabindex_1 = require("react-roving-tabindex");
const react_2 = require("@chakra-ui/react");
const TagInputProvider_1 = require("./TagInputProvider");
exports.TagInputInput = (0, react_2.forwardRef)((_a, ref) => {
    var { onKeyDown, isDisabled = false, isReadOnly, isInvalid, onClick } = _a, props = __rest(_a, ["onKeyDown", "isDisabled", "isReadOnly", "isInvalid", "onClick"]);
    const styles = (0, TagInputProvider_1.useTagInputStyles)();
    // The ref of the input to be controlled.
    const focusedRef = (0, react_1.useRef)(null);
    const mergedRefs = (0, react_2.useMergeRefs)(ref, focusedRef);
    // handleKeyDown and handleClick are stable for the lifetime of the component:
    const [tabIndex, focused, handleRovingKeyDown, handleRovingClick] = (0, react_roving_tabindex_1.useRovingTabIndex)(focusedRef, isDisabled);
    // Set focus on the input if it gets focus
    (0, react_roving_tabindex_1.useFocusEffect)(focused, focusedRef);
    const handleKeyDown = (0, react_1.useCallback)((event) => {
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
        // Only allow roving if the input is empty.
        if (!event.currentTarget.value) {
            handleRovingKeyDown(event);
        }
    }, [handleRovingKeyDown, onKeyDown]);
    const handleClick = (0, react_1.useCallback)((event) => {
        onClick === null || onClick === void 0 ? void 0 : onClick(event);
        handleRovingClick();
    }, [handleRovingClick, onClick]);
    return ((0, jsx_runtime_1.jsx)(react_2.chakra.input, Object.assign({ disabled: isDisabled, readOnly: isReadOnly, "aria-invalid": isInvalid, sx: styles.field }, props, { ref: mergedRefs, tabIndex: tabIndex, onKeyDown: handleKeyDown, onClick: handleClick })));
});
