"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Tooltip = (_a) => {
    var { children, wrapperStyles } = _a, props = __rest(_a, ["children", "wrapperStyles"]);
    // ChakraTooltip does not work on mobile by design. (see
    // https://github.com/chakra-ui/chakra-ui/issues/2691)
    // Hence adapt the tooltip to open when clicked on mobile
    const [isLabelOpen, setIsLabelOpen] = (0, react_1.useState)(!!props.isOpen);
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(react_2.Tooltip, Object.assign({}, props, { hasArrow: true, isOpen: isLabelOpen, children: (0, jsx_runtime_1.jsx)(react_2.Box, { as: "span", onMouseEnter: () => setIsLabelOpen(true), onMouseLeave: () => setIsLabelOpen(false), onClick: () => setIsLabelOpen((currentState) => !currentState), verticalAlign: "middle", sx: wrapperStyles, children: children }) })), (0, jsx_runtime_1.jsx)(react_2.VisuallyHidden, { children: props.label })] }));
};
exports.Tooltip = Tooltip;
