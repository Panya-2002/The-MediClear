"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RangeCalendar = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const date_fns_1 = require("date-fns");
const CalendarBase_1 = require("./CalendarBase");
exports.RangeCalendar = (0, react_2.forwardRef)((_a, initialFocusRef) => {
    var { value, onChange, defaultValue = [null, null], monthsToDisplay = 2 } = _a, props = __rest(_a, ["value", "onChange", "defaultValue", "monthsToDisplay"]);
    const styles = (0, react_2.useMultiStyleConfig)('Calendar', props);
    const [hoveredDate, setHoveredDate] = (0, react_1.useState)();
    const [internalValue, setInternalValue] = (0, react_2.useControllableState)({
        value,
        onChange,
        defaultValue,
    });
    const [startDate, endDate] = internalValue;
    /**
     * Handles date selection in calendar panel.
     * Calls onChange prop (if provided) with sorted dates.
     * @param date the new date selected
     */
    const handleOnDateSelected = (0, react_1.useCallback)((date) => {
        // Case 1: both dates are null
        if (startDate === null && endDate === null) {
            return setInternalValue([date, null]);
        }
        // Case 2: Only first date exists
        if (startDate !== null && endDate === null) {
            // Case 2a: New date is before first date
            if ((0, date_fns_1.compareAsc)(date, startDate) < 0) {
                return setInternalValue([date, startDate]);
            }
            // Case 2b: New date is after first date
            return setInternalValue([startDate, date]);
        }
        // Case 3: Both dates exist
        if (startDate !== null && endDate !== null) {
            // Reset to just the new date.
            return setInternalValue([date, null]);
        }
    }, [endDate, setInternalValue, startDate]);
    const isDateInRange = (0, react_1.useCallback)((date) => {
        // Both dates are null.
        if (startDate === null && endDate === null) {
            return false;
        }
        // Case 1: Both dates exist.
        if (startDate !== null && endDate !== null) {
            return ((0, date_fns_1.compareAsc)(date, startDate) >= 0 && (0, date_fns_1.compareAsc)(date, endDate) <= 0);
        }
        // Case 2: Nothing is being hovered.
        if (!hoveredDate || !startDate) {
            return false;
        }
        // Case 3: Only first date exists and something is being hovered.
        return (((0, date_fns_1.compareAsc)(date, startDate) >= 0 &&
            (0, date_fns_1.compareAsc)(date, hoveredDate) <= 0) ||
            ((0, date_fns_1.compareAsc)(date, startDate) <= 0 &&
                (0, date_fns_1.compareAsc)(date, hoveredDate) >= 0));
    }, [endDate, hoveredDate, startDate]);
    const onMouseEnterHighlight = (0, react_1.useCallback)((date) => {
        if (startDate === null && endDate === null) {
            return;
        }
        setHoveredDate(date);
    }, [endDate, startDate]);
    const onMouseLeaveCalendar = (0, react_1.useCallback)(() => {
        setHoveredDate(undefined);
    }, []);
    return ((0, jsx_runtime_1.jsx)(CalendarBase_1.CalendarProvider, Object.assign({ monthsToDisplay: monthsToDisplay, selectedDates: internalValue !== null && internalValue !== void 0 ? internalValue : undefined, onSelectDate: handleOnDateSelected, hoveredDate: hoveredDate, onMouseEnterHighlight: onMouseEnterHighlight, onMouseLeaveCalendar: onMouseLeaveCalendar, isDateInRange: isDateInRange }, props, { children: (0, jsx_runtime_1.jsxs)(CalendarBase_1.CalendarStylesProvider, { value: styles, children: [(0, jsx_runtime_1.jsx)(CalendarBase_1.CalendarAria, {}), (0, jsx_runtime_1.jsxs)(react_2.Stack, { spacing: 0, divider: (0, jsx_runtime_1.jsx)(react_2.StackDivider, {}), sx: styles.container, children: [(0, jsx_runtime_1.jsx)(CalendarBase_1.CalendarPanel, { ref: initialFocusRef }), (0, jsx_runtime_1.jsx)(CalendarBase_1.CalendarTodayButton, {})] })] }) })));
});
exports.RangeCalendar.displayName = 'RangeCalendar';
