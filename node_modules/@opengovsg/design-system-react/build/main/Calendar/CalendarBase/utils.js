"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateClassNameForDate = exports.getDateFromClassName = exports.getNewDateFromKeyPress = exports.getMonthOffsetFromToday = exports.getYearOptions = exports.DAY_NAMES = exports.MONTH_NAMES = void 0;
const date_fns_1 = require("date-fns");
const range_1 = __importDefault(require("lodash/range"));
/**
 * Full names of calendar months
 */
exports.MONTH_NAMES = [
    { fullName: 'January', shortName: 'Jan' },
    { fullName: 'February', shortName: 'Feb' },
    { fullName: 'March', shortName: 'Mar' },
    { fullName: 'April', shortName: 'Apr' },
    { fullName: 'May', shortName: 'May' },
    { fullName: 'June', shortName: 'Jun' },
    { fullName: 'July', shortName: 'Jul' },
    { fullName: 'August', shortName: 'Aug' },
    { fullName: 'September', shortName: 'Sep' },
    { fullName: 'October', shortName: 'Oct' },
    { fullName: 'November', shortName: 'Nov' },
    { fullName: 'December', shortName: 'Dec' },
];
/**
 * Names of days to display at top of calendar columns
 */
exports.DAY_NAMES = [
    { shortName: 'Su', fullName: 'Sunday' },
    { shortName: 'Mo', fullName: 'Monday' },
    { shortName: 'Tu', fullName: 'Tuesday' },
    { shortName: 'We', fullName: 'Wednesday' },
    { shortName: 'Th', fullName: 'Thursday' },
    { shortName: 'Fr', fullName: 'Friday' },
    { shortName: 'Sa', fullName: 'Saturday' },
];
/**
 * Generates array of years which are options in the year dropdown.
 * @returns array of years
 */
const getYearOptions = () => (0, range_1.default)(1500, 2500);
exports.getYearOptions = getYearOptions;
/**
 * Finds the number of months by which a target date is offset from today.
 * @param today Current date
 * @param month Month of target from which to find offset
 * @param year Year of target from which to find offset
 * @returns Number of months target is offset from today
 */
const getMonthOffsetFromToday = (today, month, year) => {
    return (0, date_fns_1.differenceInCalendarMonths)(new Date(year, month), today);
};
exports.getMonthOffsetFromToday = getMonthOffsetFromToday;
/**
 * Calculates what date should be newly focused based on the previously
 * focused date and which key a user has pressed.
 * @param originalDate Date which was originally focused
 * @param key Key pressed
 * @returns New date which should be focused
 */
const getNewDateFromKeyPress = (originalDate, key) => {
    switch (key) {
        case 'ArrowUp':
            return (0, date_fns_1.startOfDay)((0, date_fns_1.subDays)(originalDate, exports.DAY_NAMES.length));
        case 'ArrowDown':
            return (0, date_fns_1.startOfDay)((0, date_fns_1.addDays)(originalDate, exports.DAY_NAMES.length));
        case 'ArrowLeft':
            return (0, date_fns_1.startOfDay)((0, date_fns_1.subDays)(originalDate, 1));
        case 'ArrowRight':
            return (0, date_fns_1.startOfDay)((0, date_fns_1.addDays)(originalDate, 1));
        default:
            return (0, date_fns_1.startOfDay)(originalDate);
    }
};
exports.getNewDateFromKeyPress = getNewDateFromKeyPress;
/**
 * Based on a custom className given to a date element, finds the
 * date corresponding to that element.
 * The pattern used is id_dateTime, where dateTime corresponds to
 * Date.getTime().
 * @param className Class name of element
 * @param id ID to find
 * @returns Date corresponding to element
 */
const getDateFromClassName = (className, id) => {
    const timestamp = new RegExp(`${id}_([0-9]+)`).exec(className);
    if (!timestamp)
        return null;
    return new Date(parseInt(timestamp[1]));
};
exports.getDateFromClassName = getDateFromClassName;
/**
 * Creates a unique className for a date element, from which the corresponding
 * date can be derived.
 * @param id class name id to include in className
 * @param date Date of element
 * @returns A unique className from which the corresponding date can be derived
 */
const generateClassNameForDate = (id, date) => {
    return `${id}_${(0, date_fns_1.startOfDay)(date).getTime()}`;
};
exports.generateClassNameForDate = generateClassNameForDate;
