"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarPanel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@chakra-ui/react");
const date_fns_1 = require("date-fns");
const CalendarContext_1 = require("./CalendarContext");
const CalendarHeader_1 = require("./CalendarHeader");
const CalendarStyleProvider_1 = require("./CalendarStyleProvider");
const DayOfMonth_1 = require("./DayOfMonth");
const utils_1 = require("./utils");
// eslint-disable-next-line @typescript-eslint/ban-types
exports.CalendarPanel = (0, react_1.forwardRef)((_props, initialFocusRef) => {
    const styles = (0, CalendarStyleProvider_1.useCalendarStyles)();
    const { classNameId, dateToFocus, onMouseLeaveCalendar, renderProps: { calendars, getDateProps }, } = (0, CalendarContext_1.useCalendar)();
    return ((0, jsx_runtime_1.jsx)(react_1.Stack, { direction: { base: 'column', md: 'row' }, spacing: "2rem", sx: styles.calendarContainer, onMouseLeave: onMouseLeaveCalendar, children: calendars.map((calendar, i) => ((0, jsx_runtime_1.jsxs)(react_1.Stack, { spacing: 0, children: [(0, jsx_runtime_1.jsx)(CalendarHeader_1.CalendarHeader, { monthOffset: i }), (0, jsx_runtime_1.jsxs)(react_1.chakra.table, { "aria-label": `${utils_1.MONTH_NAMES[calendar.month].fullName} ${calendar.year}`, sx: styles.monthGrid, children: [(0, jsx_runtime_1.jsx)(react_1.chakra.thead, { children: (0, jsx_runtime_1.jsx)(react_1.chakra.tr, { children: utils_1.DAY_NAMES.map(({ fullName, shortName }, index) => ((0, jsx_runtime_1.jsxs)(react_1.chakra.th, { sx: styles.dayNamesContainer, children: [(0, jsx_runtime_1.jsx)(react_1.Text, { "aria-hidden": true, children: shortName }), (0, jsx_runtime_1.jsx)(react_1.VisuallyHidden, { children: fullName })] }, index))) }) }), (0, jsx_runtime_1.jsx)(react_1.chakra.tbody, { children: calendar.weeks.map((week, windex) => {
                                return ((0, jsx_runtime_1.jsx)(react_1.chakra.tr, { children: week.map((dateObj, index) => {
                                        if (!dateObj) {
                                            return ((0, jsx_runtime_1.jsx)(react_1.chakra.td, { padding: 0 }, `${calendar.month}${calendar.year}${windex}${index}`));
                                        }
                                        return ((0, jsx_runtime_1.jsx)(react_1.chakra.td, { px: 0, py: "0.125rem", children: (0, jsx_runtime_1.jsx)(DayOfMonth_1.DayOfMonth, Object.assign({}, getDateProps({
                                                dateObj,
                                            }), { dateObj: dateObj, isOutsideCurrMonth: dateObj.date.getMonth() !== calendar.month, className: (0, utils_1.generateClassNameForDate)(classNameId, dateObj.date), ref: (0, date_fns_1.isSameDay)(dateObj.date, dateToFocus)
                                                    ? initialFocusRef
                                                    : undefined })) }, `${calendar.month}${calendar.year}${windex}${index}`));
                                    }) }, windex));
                            }) })] }, `${calendar.month}${calendar.year}`), (0, jsx_runtime_1.jsx)(react_1.VisuallyHidden, { "aria-live": "polite", children: "Cursor keys can navigate dates when a date is being focused." })] }, i))) }));
});
exports.CalendarPanel.displayName = 'CalendarPanel';
