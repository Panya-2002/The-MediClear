"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagInput = exports.parts = void 0;
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const Input_1 = require("./Input");
exports.parts = (0, theme_tools_1.anatomy)('taginput').parts('container', 'field');
const { definePartsStyle, defineMultiStyleConfig } = (0, react_1.createMultiStyleConfigHelpers)(exports.parts.keys);
const baseStyle = definePartsStyle({
    container: {
        display: 'flex',
        flexWrap: 'wrap',
        cursor: 'text',
        height: 'auto',
        maxW: '100%',
        w: '100%',
        _disabled: {
            cursor: 'not-allowed',
        },
        transitionProperty: 'common',
        transitionDuration: 'normal',
    },
    field: {
        _focusVisible: {
            outline: 'none',
        },
        flexGrow: 1,
        _disabled: {
            cursor: 'not-allowed',
        },
    },
});
const variantOutline = definePartsStyle((props) => {
    var _a;
    const inputFieldVariantOutline = (_a = Input_1.Input.variants) === null || _a === void 0 ? void 0 : _a.outline(props).field;
    return {
        container: Object.assign(Object.assign({}, inputFieldVariantOutline), { _focusWithin: Object.assign({}, inputFieldVariantOutline === null || inputFieldVariantOutline === void 0 ? void 0 : inputFieldVariantOutline._focusVisible), h: 'auto' }),
    };
});
const sizes = {
    sm: definePartsStyle({
        container: Object.assign(Object.assign({}, (_a = Input_1.Input.sizes) === null || _a === void 0 ? void 0 : _a.sm.field), { p: 'calc(0.5rem - 2px)', minH: (_c = (_b = Input_1.Input.sizes) === null || _b === void 0 ? void 0 : _b.sm.field) === null || _c === void 0 ? void 0 : _c.h, gap: '0.25rem' }),
        field: {
            h: '1.5rem',
            pl: '0.5rem',
        },
    }),
    md: definePartsStyle({
        container: Object.assign(Object.assign({}, (_d = Input_1.Input.sizes) === null || _d === void 0 ? void 0 : _d.md.field), { p: 'calc(0.5rem - 2px)', minH: (_f = (_e = Input_1.Input.sizes) === null || _e === void 0 ? void 0 : _e.md.field) === null || _f === void 0 ? void 0 : _f.h, gap: '0.25rem' }),
        field: {
            h: '1.75rem',
            pl: '0.5rem',
        },
    }),
};
exports.TagInput = defineMultiStyleConfig({
    baseStyle,
    variants: {
        outline: variantOutline,
    },
    sizes,
    defaultProps: {
        size: 'md',
        variant: 'outline',
        // @ts-expect-error Invalid exported type.
        focusBorderColor: (_g = Input_1.Input.defaultProps) === null || _g === void 0 ? void 0 : _g.focusBorderColor,
        // @ts-expect-error Invalid exported type.
        errorBorderColor: (_h = Input_1.Input.defaultProps) === null || _h === void 0 ? void 0 : _h.errorBorderColor,
        colorScheme: 'primary',
    },
});
