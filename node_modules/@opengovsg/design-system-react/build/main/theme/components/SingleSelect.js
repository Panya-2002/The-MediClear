"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingleSelect = exports.parts = exports.comboboxParts = void 0;
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const lodash_1 = require("lodash");
const Input_1 = require("./Input");
const Menu_1 = require("./Menu");
exports.comboboxParts = (0, theme_tools_1.anatomy)('combobox').parts('list', 'item', 'itemDescription', 'highlight', 'icon', 'emptyItem');
exports.parts = (0, theme_tools_1.anatomy)('singleselect')
    .parts(...exports.comboboxParts.keys)
    .extend('field', 'selected');
const { definePartsStyle, defineMultiStyleConfig } = (0, react_1.createMultiStyleConfigHelpers)(exports.parts.keys);
const itemBaseStyle = (0, react_1.defineStyle)((props) => {
    var _a;
    const menuItemStyle = (_a = Menu_1.Menu.baseStyle) === null || _a === void 0 ? void 0 : _a.call(Menu_1.Menu, props).item;
    return (0, lodash_1.merge)({}, menuItemStyle, {
        _selected: menuItemStyle === null || menuItemStyle === void 0 ? void 0 : menuItemStyle._focus,
    });
});
const listBaseStyle = (0, react_1.defineStyle)((props) => {
    var _a;
    const menuListStyle = (_a = Menu_1.Menu.baseStyle) === null || _a === void 0 ? void 0 : _a.call(Menu_1.Menu, props).list;
    return (0, lodash_1.merge)({}, menuListStyle, {
        // To accomodate focus ring.
        my: '1px',
        w: '100%',
        overflowY: 'auto',
        maxH: '12rem',
        bg: 'white',
    });
});
const baseStyle = definePartsStyle((props) => {
    const itemStyle = itemBaseStyle(props);
    return {
        item: itemStyle,
        highlight: {
            bg: 'interaction.tinted.main.active',
        },
        selected: {
            zIndex: 2,
            gridArea: '1 / 1 / 2 / 3',
            alignItems: 'center',
            pointerEvents: 'none',
            _disabled: {
                color: 'interaction.support.disabled-content',
            },
        },
        itemDescription: {
            textStyle: 'body-2',
            color: 'base.content.medium',
        },
        emptyItem: Object.assign(Object.assign({}, itemStyle), { fontStyle: 'italic', cursor: 'not-allowed', _hover: {
                bg: 'initial',
            }, _active: {
                bg: 'initial',
            } }),
        list: listBaseStyle(props),
        icon: {
            transitionProperty: 'common',
            transitionDuration: 'normal',
            color: 'base.content.strong',
            _disabled: {
                cursor: 'not-allowed',
                color: 'interaction.support.disabled-content',
            },
        },
    };
});
const variantOutline = definePartsStyle((props) => {
    var _a;
    const { isClearable } = props;
    const inputVariantOutline = (_a = Input_1.Input.variants) === null || _a === void 0 ? void 0 : _a.outline(props);
    return {
        list: { py: 0 },
        item: { cursor: 'pointer' },
        field: (0, lodash_1.merge)({}, inputVariantOutline === null || inputVariantOutline === void 0 ? void 0 : inputVariantOutline.field, {
            borderRightRadius: isClearable ? 0 : undefined,
            gridArea: '1 / 1 / 2 / 3',
        }),
    };
});
const variants = {
    outline: variantOutline,
};
const sizes = {
    xs: definePartsStyle({
        item: (_a = Menu_1.Menu.sizes) === null || _a === void 0 ? void 0 : _a.sm.item,
        emptyItem: (_b = Menu_1.Menu.sizes) === null || _b === void 0 ? void 0 : _b.sm.item,
        field: (_c = Input_1.Input.sizes) === null || _c === void 0 ? void 0 : _c.xs.field,
        icon: {
            fontSize: '1rem',
        },
        selected: {
            pl: 'calc(0.75rem + 1px)',
            pr: 'calc(2.5rem + 1px)',
            textStyle: 'body-2',
        },
    }),
    sm: definePartsStyle({
        item: (_d = Menu_1.Menu.sizes) === null || _d === void 0 ? void 0 : _d.sm.item,
        emptyItem: (_e = Menu_1.Menu.sizes) === null || _e === void 0 ? void 0 : _e.sm.item,
        field: (_f = Input_1.Input.sizes) === null || _f === void 0 ? void 0 : _f.sm.field,
        icon: {
            fontSize: '1rem',
        },
        selected: {
            pl: 'calc(0.75rem + 1px)',
            pr: 'calc(2.5rem + 1px)',
            textStyle: 'body-2',
        },
    }),
    md: definePartsStyle({
        icon: {
            fontSize: '1.25rem',
        },
        item: (_h = (_g = Menu_1.Menu.sizes) === null || _g === void 0 ? void 0 : _g.md) === null || _h === void 0 ? void 0 : _h.item,
        emptyItem: (_k = (_j = Menu_1.Menu.sizes) === null || _j === void 0 ? void 0 : _j.md) === null || _k === void 0 ? void 0 : _k.item,
        field: (_l = Input_1.Input.sizes) === null || _l === void 0 ? void 0 : _l.md.field,
        selected: {
            pl: 'calc(1rem + 1px)',
            pr: 'calc(2.75rem + 1px)',
            textStyle: 'body-1',
        },
    }),
};
exports.SingleSelect = defineMultiStyleConfig({
    baseStyle,
    variants,
    sizes,
    defaultProps: {
        variant: 'outline',
        size: 'md',
        // @ts-expect-error Invalid exported type.
        focusBorderColor: (_m = Input_1.Input.defaultProps) === null || _m === void 0 ? void 0 : _m.focusBorderColor,
        // @ts-expect-error Invalid exported type.
        errorBorderColor: (_o = Input_1.Input.defaultProps) === null || _o === void 0 ? void 0 : _o.errorBorderColor,
        colorScheme: 'main',
    },
});
