"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelect = exports.parts = void 0;
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const lodash_1 = require("lodash");
const Input_1 = require("./Input");
const SingleSelect_1 = require("./SingleSelect");
exports.parts = (0, theme_tools_1.anatomy)('multiselect').parts(...SingleSelect_1.comboboxParts.keys, 'field', 'tag', 'tagIcon', 'chevron', 'fieldwrapper', 'itemContainer');
const { definePartsStyle, defineMultiStyleConfig } = (0, react_1.createMultiStyleConfigHelpers)(exports.parts.keys);
const baseStyle = definePartsStyle((props) => {
    var _a;
    const { isFocused, isEmpty } = props;
    const comboboxBaseStyle = (0, lodash_1.pick)((_a = SingleSelect_1.SingleSelect.baseStyle) === null || _a === void 0 ? void 0 : _a.call(SingleSelect_1.SingleSelect, props), SingleSelect_1.comboboxParts.keys);
    return Object.assign(Object.assign({}, comboboxBaseStyle), { itemContainer: {
            display: 'inline-flex',
            flexWrap: 'wrap',
            flexGrow: 1,
            // Margin difference for selected items.
            my: '-3px',
        }, fieldwrapper: {
            display: 'flex',
            flexWrap: 'wrap',
            cursor: 'pointer',
            _disabled: {
                cursor: 'not-allowed',
            },
            transitionProperty: 'common',
            transitionDuration: 'normal',
        }, icon: {
            display: 'inline-flex',
            h: 'fit-content',
        }, tagIcon: {
            display: 'inline-flex',
            h: 'fit-content',
        }, field: Object.assign({ flexGrow: 1, width: 0, bg: 'transparent', _disabled: {
                cursor: 'not-allowed',
            }, alignSelf: 'center', _focusVisible: {
                outline: 'none',
            } }, (!isFocused && !isEmpty
            ? {
                cursor: 'pointer',
                _disabled: { cursor: 'not-allowed' },
                m: 0,
                minW: 0,
                minH: 0,
                h: 0,
                w: 0,
                opacity: 0,
            }
            : {})) });
});
const variantOutline = definePartsStyle((props) => {
    var _a, _b;
    const comboboxVariantOutline = (0, lodash_1.pick)((_a = SingleSelect_1.SingleSelect.variants) === null || _a === void 0 ? void 0 : _a.outline(props), SingleSelect_1.comboboxParts.keys);
    const inputFieldVariantOutline = (_b = Input_1.Input.variants) === null || _b === void 0 ? void 0 : _b.outline(props).field;
    const { isFocused } = props;
    return Object.assign(Object.assign({}, comboboxVariantOutline), { fieldwrapper: Object.assign(Object.assign(Object.assign({ borderRadius: 'base' }, inputFieldVariantOutline), { _focusWithin: inputFieldVariantOutline === null || inputFieldVariantOutline === void 0 ? void 0 : inputFieldVariantOutline._focusVisible }), (isFocused ? inputFieldVariantOutline === null || inputFieldVariantOutline === void 0 ? void 0 : inputFieldVariantOutline._focusVisible : {})) });
});
const variants = {
    outline: variantOutline,
};
const sizes = {
    sm: definePartsStyle((0, react_1.mergeThemeOverride)((0, lodash_1.omit)((_a = SingleSelect_1.SingleSelect.sizes) === null || _a === void 0 ? void 0 : _a.sm, ['field', 'icon']), {
        itemContainer: {
            // Padding for dropdown toggle.
            maxW: 'calc(100% - 2rem)',
        },
        tag: {
            my: '6px',
            mx: '2px',
        },
        tagIcon: {
            fontSize: '1rem',
            mr: '0.25rem',
        },
        icon: {
            fontSize: '1rem',
        },
        chevron: {
            pt: '0.5rem',
            fontSize: '1rem',
            px: '0.5rem',
        },
        fieldwrapper: Object.assign(Object.assign({}, (_b = SingleSelect_1.SingleSelect.sizes) === null || _b === void 0 ? void 0 : _b.sm.field), { p: '0.25rem', minH: (_d = (_c = SingleSelect_1.SingleSelect.sizes) === null || _c === void 0 ? void 0 : _c.sm.field) === null || _d === void 0 ? void 0 : _d.h, h: 'auto' }),
        field: {
            minW: '3.75rem',
            px: '2px',
            my: '2px',
            pl: '0.5rem',
        },
    })),
    md: definePartsStyle((0, react_1.mergeThemeOverride)((0, lodash_1.omit)((_e = SingleSelect_1.SingleSelect.sizes) === null || _e === void 0 ? void 0 : _e.md, ['field', 'icon']), {
        itemContainer: {
            // Padding for dropdown toggle.
            maxW: 'calc(100% - 2.5rem)',
        },
        icon: {
            fontSize: '1.25rem',
        },
        tag: {
            my: '4px',
            mx: '2px',
        },
        tagIcon: {
            fontSize: '1.25rem',
            mr: '0.25rem',
        },
        chevron: {
            pt: '0.25rem',
            px: '0.5rem',
            fontSize: '1.25rem',
        },
        fieldwrapper: Object.assign(Object.assign({}, (_f = SingleSelect_1.SingleSelect.sizes) === null || _f === void 0 ? void 0 : _f.md.field), { p: '0.375rem', minH: (_h = (_g = SingleSelect_1.SingleSelect.sizes) === null || _g === void 0 ? void 0 : _g.md.field) === null || _h === void 0 ? void 0 : _h.h, h: 'auto' }),
        field: {
            minW: '3.75rem',
            px: '2px',
            my: '2px',
            pl: '0.5rem',
        },
    })),
};
exports.MultiSelect = defineMultiStyleConfig({
    baseStyle,
    sizes,
    variants,
    defaultProps: Object.assign(Object.assign({}, SingleSelect_1.SingleSelect.defaultProps), { size: 'md' }),
});
