"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = void 0;
const anatomy_1 = require("@chakra-ui/anatomy");
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const textStyles_1 = require("../textStyles");
// Additional success part.
const parts = anatomy_1.inputAnatomy.extend('success');
const { definePartsStyle, defineMultiStyleConfig } = (0, react_1.createMultiStyleConfigHelpers)(parts.keys);
const outlineVariant = definePartsStyle((props) => {
    const { isSuccess, isPrefilled, theme, focusBorderColor: fc = 'utility.focus-default', errorBorderColor: ec = 'interaction.critical.default', } = props;
    return {
        addon: {
            borderRadius: 'base',
        },
        field: {
            borderRadius: 'base',
            bg: isPrefilled ? 'utility.input-prefilled' : 'utility.ui',
            border: '1px solid',
            borderColor: isSuccess
                ? 'interaction.success.default'
                : 'base.divider.strong',
            _placeholder: {
                color: 'interaction.support.placeholder',
            },
            _hover: {
                borderColor: isSuccess
                    ? 'interaction.success.default'
                    : 'base.divider.strong',
            },
            // Explicit styling here for other components that use a mock input.
            _invalid: {
                borderColor: (0, theme_tools_1.getColor)(theme, ec),
                // Remove extra 1px of outline.
                boxShadow: 'none',
            },
            _focusVisible: {
                zIndex: 1,
                borderColor: (0, theme_tools_1.getColor)(theme, fc),
                boxShadow: `0 0 0 1px ${(0, theme_tools_1.getColor)(theme, fc)}`,
            },
            _disabled: {
                bg: 'interaction.support.disabled',
                borderColor: 'base.divider.strong',
                color: 'interaction.support.disabled-content',
                cursor: 'not-allowed',
                opacity: 1,
                _hover: {
                    bg: 'interaction.support.disabled',
                },
                _active: {
                    bg: 'interaction.support.disabled',
                },
            },
        },
        success: {
            pointerEvents: 'none',
            color: 'interaction.success.default',
        },
    };
});
const coreSizes = {
    xs: (0, react_1.defineStyle)({
        textStyle: 'body-2',
        fontSize: textStyles_1.textStyles['body-2'].fontSize,
        px: '0.75rem',
        h: '2.25rem',
    }),
    sm: (0, react_1.defineStyle)({
        textStyle: 'body-2',
        fontSize: textStyles_1.textStyles['body-2'].fontSize,
        px: '0.75rem',
        h: '2.5rem',
    }),
    md: (0, react_1.defineStyle)({
        px: '1rem',
        h: '2.75rem',
        textStyle: 'body-1',
        fontSize: textStyles_1.textStyles['body-1'].fontSize,
    }),
};
const sizes = {
    xs: definePartsStyle({
        field: coreSizes.xs,
        addon: coreSizes.xs,
        element: coreSizes.xs,
        success: Object.assign(Object.assign({}, coreSizes.xs), { fontSize: '1rem' }),
    }),
    sm: definePartsStyle({
        field: coreSizes.sm,
        addon: coreSizes.sm,
        element: coreSizes.sm,
        success: Object.assign(Object.assign({}, coreSizes.sm), { fontSize: '1rem' }),
    }),
    md: definePartsStyle({
        field: coreSizes.md,
        addon: coreSizes.md,
        element: coreSizes.md,
        success: Object.assign(Object.assign({}, coreSizes.md), { fontSize: '1.25rem' }),
    }),
};
exports.Input = defineMultiStyleConfig({
    variants: {
        outline: outlineVariant,
    },
    sizes,
    defaultProps: {
        variant: 'outline',
        size: 'md',
        // @ts-expect-error Invalid exported type.
        focusBorderColor: 'utility.focus-default',
        errorBorderColor: 'interaction.critical.default',
    },
});
