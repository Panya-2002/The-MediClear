"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Banner = void 0;
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const layerStyles_1 = require("../layerStyles");
const parts = (0, theme_tools_1.anatomy)('banner').parts('banner', 'item', 'icon', 'link', 'close');
const { definePartsStyle, defineMultiStyleConfig } = (0, react_1.createMultiStyleConfigHelpers)(parts.keys);
const baseStyle = definePartsStyle({
    item: {
        display: 'flex',
        justifyContent: 'space-between',
    },
});
const sizes = {
    md: definePartsStyle({
        item: {
            py: ['1rem', '1rem', '0.5rem'],
            px: '1rem',
        },
        icon: {
            fontSize: '1.5rem',
            mr: '0.5rem',
        },
        close: {
            padding: 0,
            ml: '0.5rem',
            mr: '-0.5rem',
            fontSize: '1.5rem',
            w: '1.5rem',
            h: '1.5rem',
        },
    }),
};
const variantInfo = definePartsStyle({
    banner: {
        color: 'base.content.inverse',
        bg: 'utility.feedback.info',
    },
    link: Object.assign({ color: 'base.content.inverse', _hover: {
            color: 'base.content.inverse',
        } }, layerStyles_1.layerStyles.focusRing.inverse),
    close: Object.assign({ color: 'base.content.inverse' }, layerStyles_1.layerStyles.focusRing.inverse),
});
const variantWarn = definePartsStyle({
    banner: {
        color: 'base.content.strong',
        bg: 'utility.feedback.warning',
    },
    link: Object.assign({ color: 'base.content.strong', _hover: {
            color: 'base.content.strong',
        } }, layerStyles_1.layerStyles.focusRing.default),
    close: Object.assign({ color: 'base.content.strong' }, layerStyles_1.layerStyles.focusRing.default),
});
const variantError = definePartsStyle({
    banner: {
        color: 'base.content.inverse',
        bg: 'utility.feedback.critical',
    },
    link: Object.assign({ color: 'base.content.inverse', _hover: {
            color: 'base.content.inverse',
        } }, layerStyles_1.layerStyles.focusRing.inverse),
    close: Object.assign({ color: 'base.content.inverse' }, layerStyles_1.layerStyles.focusRing.inverse),
});
const variants = {
    info: variantInfo,
    warn: variantWarn,
    error: variantError,
};
exports.Banner = defineMultiStyleConfig({
    baseStyle,
    sizes,
    variants,
    defaultProps: {
        variant: 'info',
        size: 'md',
    },
});
