"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhoneNumberInput = void 0;
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const Input_1 = require("./Input");
const parts = (0, theme_tools_1.anatomy)('phonenumberinput').parts('field', 'country', 'icon', 'selector');
const { definePartsStyle, defineMultiStyleConfig } = (0, react_1.createMultiStyleConfigHelpers)(parts.keys);
const outlineVariant = definePartsStyle((props) => {
    var _a;
    const inputFieldStyle = (_a = Input_1.Input.variants) === null || _a === void 0 ? void 0 : _a.outline(props).field;
    const { theme, focusBorderColor: fc } = props;
    return {
        field: Object.assign(Object.assign({}, inputFieldStyle), { borderLeftRadius: 0 }),
        country: {
            transitionProperty: 'common',
            transitionDuration: 'normal',
            bg: 'white',
            border: '1px solid',
            borderColor: 'base.divider.strong',
            _disabled: Object.assign(Object.assign({}, inputFieldStyle === null || inputFieldStyle === void 0 ? void 0 : inputFieldStyle._disabled), { cursor: 'not-allowed' }),
            _active: {
                borderColor: fc,
                boxShadow: `0 0 0 1px ${(0, theme_tools_1.getColor)(theme, fc)}`,
                bg: 'interaction.tinted.main.active',
                _disabled: {
                    boxShadow: 'none',
                    borderColor: inputFieldStyle === null || inputFieldStyle === void 0 ? void 0 : inputFieldStyle._disabled.borderColor,
                },
            },
            _focusWithin: {
                zIndex: 1,
                borderColor: fc,
                boxShadow: `0 0 0 1px ${(0, theme_tools_1.getColor)(theme, fc)}`,
            },
            _hover: { bg: 'interaction.tinted.main.hover' },
            pos: 'relative',
        },
        selector: {
            cursor: 'pointer',
            opacity: 0,
            pos: 'absolute',
            w: '100%',
            h: '100%',
            left: 0,
            top: 0,
            _disabled: {
                cursor: 'not-allowed',
            },
        },
        icon: {
            mr: '0.5rem',
            w: '1.5em',
            _disabled: {
                opacity: 0.6,
            },
        },
    };
});
const sizes = {
    xs: definePartsStyle({
        country: Object.assign(Object.assign({}, (_a = Input_1.Input.sizes) === null || _a === void 0 ? void 0 : _a.xs.addon), { px: '0.5rem' }),
        icon: {
            fontSize: '0.75rem',
        },
    }),
    sm: definePartsStyle({
        country: Object.assign(Object.assign({}, (_b = Input_1.Input.sizes) === null || _b === void 0 ? void 0 : _b.sm.addon), { px: '0.5rem' }),
        icon: {
            fontSize: '1rem',
        },
    }),
    md: definePartsStyle({
        country: Object.assign(Object.assign({}, (_c = Input_1.Input.sizes) === null || _c === void 0 ? void 0 : _c.md.addon), { px: '0.5rem' }),
        icon: {
            fontSize: '1rem',
        },
    }),
};
const variants = {
    outline: outlineVariant,
};
exports.PhoneNumberInput = defineMultiStyleConfig({
    variants,
    sizes,
    defaultProps: Input_1.Input.defaultProps,
});
