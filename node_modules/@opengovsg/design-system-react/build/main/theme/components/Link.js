"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Link = void 0;
const react_1 = require("@chakra-ui/react");
const layerStyles_1 = require("../layerStyles");
const getLinkColors = ({ colorScheme: c }) => {
    switch (c) {
        case 'main':
            return {
                color: 'interaction.links.default',
                hoverColor: 'interaction.links.hover',
            };
        case 'neutral':
            return {
                color: 'interaction.links.neutral-default',
                hoverColor: 'interaction.links.neutral-hover',
            };
        case 'inverse':
            return {
                color: 'interaction.links.inverse-default',
                hoverColor: 'interaction.links.inverse-hover',
            };
        // Special cases for accessibility.
        case 'success':
            return {
                color: `${c}.700`,
                hoverColor: `${c}.800`,
            };
        case 'warning':
            return {
                color: `${c}.800`,
                hoverColor: `${c}.900`,
            };
        default:
            return {
                color: `${c}.500`,
                hoverColor: `${c}.600`,
            };
    }
};
const baseStyle = (0, react_1.defineStyle)((props) => {
    const { color, hoverColor } = getLinkColors(props);
    return {
        outlineOffset: 0,
        height: 'fit-content',
        width: 'fit-content',
        position: 'relative',
        textUnderlineOffset: '0.125rem',
        color,
        _dark: {
            color: 'interaction.links.inverse-default',
            _hover: {
                color: 'interaction.links.inverse-hover',
            },
        },
        borderRadius: 'base',
        _hover: {
            color: hoverColor,
            _disabled: {
                color: 'interaction.support.disabled-content',
            },
        },
        _disabled: {
            color: 'interaction.support.disabled-content',
            cursor: 'not-allowed',
        },
        _focusVisible: Object.assign(Object.assign({}, layerStyles_1.layerStyles.focusRing.default._focusVisible), { outlineOffset: 0 }),
    };
});
const variantInline = (0, react_1.defineStyle)({
    textDecorationLine: 'underline',
});
const variantStandalone = (0, react_1.defineStyle)({
    p: '0.25rem',
    textStyle: { sm: 'subhead-2', md: 'subhead-1' },
    _hover: {
        textDecorationLine: 'underline',
    },
});
const variants = {
    inline: variantInline,
    standalone: variantStandalone,
};
exports.Link = (0, react_1.defineStyleConfig)({
    baseStyle,
    variants,
    defaultProps: {
        variant: 'inline',
        colorScheme: 'main',
        size: 'md',
    },
});
