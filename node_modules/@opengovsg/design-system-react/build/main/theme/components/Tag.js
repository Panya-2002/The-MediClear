"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag = void 0;
const anatomy_1 = require("@chakra-ui/anatomy");
const react_1 = require("@chakra-ui/react");
const layerStyles_1 = require("../layerStyles");
const textStyles_1 = require("../textStyles");
const Badge_1 = require("./Badge");
const parts = anatomy_1.tagAnatomy.extend('icon');
const { definePartsStyle, defineMultiStyleConfig } = (0, react_1.createMultiStyleConfigHelpers)(parts.keys);
const baseStyleContainer = (0, react_1.defineStyle)({
    transitionProperty: 'common',
    transitionDuration: 'normal',
    _focusWithin: layerStyles_1.layerStyles.focusRing.default._focusVisible,
    borderRadius: 'base',
    _disabled: {
        bg: 'interaction.support.disabled',
        color: 'interaction.support.disabled-content',
        cursor: 'not-allowed',
    },
    _hover: {
        _disabled: {
            bg: 'interaction.support.disabled',
        },
    },
    width: 'fit-content',
    height: 'fit-content',
});
const baseStyleLabel = (0, react_1.defineStyle)({
    textStyle: 'body-2',
    whiteSpace: 'initial',
});
const baseStyleCloseButton = (0, react_1.defineStyle)({
    display: 'flex',
    alignItems: 'center',
    opacity: 1,
    outline: 'none',
    _hover: {
        opacity: 1,
    },
    _disabled: {
        cursor: 'not-allowed',
        opacity: 1,
    },
    _focusVisible: {
        boxShadow: 'none',
        bg: 'transparent',
    },
});
const baseStyle = definePartsStyle({
    container: baseStyleContainer,
    label: baseStyleLabel,
    closeButton: baseStyleCloseButton,
});
const sizes = {
    xs: definePartsStyle({
        container: Object.assign(Object.assign({}, textStyles_1.textStyles['caption-1']), { px: '0.5rem', py: '0.125rem' }),
        label: textStyles_1.textStyles['caption-1'],
        icon: {
            fontSize: '0.875rem',
            marginStart: '0.125rem',
            marginEnd: '0.125rem',
            height: '1rem',
        },
        closeButton: {
            fontSize: '0.875rem',
            marginStart: '0.125rem',
            height: '1rem',
        },
    }),
    sm: definePartsStyle({
        container: Object.assign(Object.assign({}, textStyles_1.textStyles['body-2']), { px: '0.5rem', py: '0.125rem' }),
        label: textStyles_1.textStyles['body-2'],
        icon: {
            fontSize: '1.125rem',
            marginStart: '0.25rem',
            marginEnd: '0.25rem',
            height: '1.25rem',
        },
        closeButton: {
            fontSize: '1.125rem',
            marginStart: '0.25rem',
            height: '1.25rem',
        },
    }),
    md: definePartsStyle({
        container: Object.assign(Object.assign({}, textStyles_1.textStyles['subhead-2']), { px: '0.5rem', py: '0.25rem' }),
        label: textStyles_1.textStyles['subhead-2'],
        closeButton: {
            fontSize: '1.125rem',
            marginStart: '0.25rem',
            height: '1.25rem',
        },
        icon: {
            fontSize: '1.125rem',
            marginStart: '0.25rem',
            marginEnd: '0.25rem',
            height: '1.25rem',
        },
    }),
};
const getSubtleColors = (0, react_1.defineStyle)(({ colorScheme: c }) => {
    switch (c) {
        case 'main':
        case 'success':
        case 'warning':
        case 'critical':
            return {
                _hover: {
                    background: `interaction.${c}-subtle.hover`,
                },
                _active: {
                    background: `interaction.${c}-subtle.active`,
                },
            };
    }
    return {
        _hover: {
            background: `${c}.200`,
        },
        _active: {
            background: `${c}.300`,
        },
    };
});
const variantSubtle = definePartsStyle((props) => {
    return {
        container: (0, react_1.mergeThemeOverride)(Badge_1.Badge.variants.subtle(props), getSubtleColors(props)),
    };
});
const getSolidColors = (0, react_1.defineStyle)(({ colorScheme: c }) => {
    switch (c) {
        case 'main':
        case 'success':
        case 'warning':
        case 'critical':
            return {
                _hover: {
                    background: `interaction.${c}.hover`,
                },
                _active: {
                    background: `interaction.${c}.active`,
                },
            };
    }
    return {
        _hover: {
            background: `${c}.600`,
        },
        _active: {
            background: `${c}.700`,
        },
    };
});
const variantSolid = definePartsStyle((props) => {
    return {
        container: (0, react_1.mergeThemeOverride)(Badge_1.Badge.variants.solid(props), getSolidColors(props)),
    };
});
const variants = {
    subtle: variantSubtle,
    solid: variantSolid,
};
exports.Tag = defineMultiStyleConfig({
    baseStyle,
    variants,
    sizes,
    defaultProps: {
        size: 'md',
        variant: 'subtle',
        colorScheme: 'main',
    },
});
