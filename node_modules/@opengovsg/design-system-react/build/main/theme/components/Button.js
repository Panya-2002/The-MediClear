"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const lodash_1 = require("lodash");
const layerStyles_1 = require("../layerStyles");
const textStyles_1 = require("../textStyles");
const utils_1 = require("../utils");
const hexToRgba_1 = require("../utils/hexToRgba");
const Link_1 = require("./Link");
const genVariantSolidColours = ({ colorScheme: c, theme, }) => {
    let color = 'base.content.inverse';
    let solidVariantProps;
    switch (c) {
        case 'main':
        case 'sub':
        case 'success':
        case 'critical':
        case 'warning':
            {
                solidVariantProps = {
                    bg: `interaction.${c}.default`,
                    activeBg: `interaction.${c}.active`,
                    hoverBg: `interaction.${c}.hover`,
                };
            }
            break;
        default: {
            solidVariantProps = {
                bg: `${c}.600`,
                activeBg: `${c}.800`,
                hoverBg: `${c}.700`,
            };
        }
    }
    // Note that using the fallback content colour for the button text could still result in bad contrast.
    color = (0, utils_1.getContrastColor)((0, theme_tools_1.getColor)(theme, color), (0, theme_tools_1.getColor)(theme, solidVariantProps.bg), 'base.content.default');
    return Object.assign(Object.assign({}, solidVariantProps), { color });
};
const genVariantOutlineColours = ({ colorScheme: c, theme, }) => {
    switch (c) {
        case 'main':
        case 'critical': {
            return {
                borderColor: `interaction.${c}.default`,
                activeBg: `interaction.tinted.${c}.active`,
                hoverBg: `interaction.tinted.${c}.hover`,
            };
        }
        case 'neutral': {
            return {
                borderColor: 'base.content.strong',
                hoverBg: 'interaction.tinted.neutral.hover',
                activeBg: 'interaction.tinted.neutral.active',
            };
        }
        case 'inverse': {
            return {
                borderColor: 'base.content.inverse',
                hoverBg: 'interaction.tinted.inverse.hover',
                activeBg: 'interaction.tinted.inverse.active',
            };
        }
        case 'sub': {
            return {
                borderColor: `interaction.${c}.default`,
                activeBg: (0, hexToRgba_1.hexToRgba)((0, theme_tools_1.getColor)(theme, 'brand.secondary.500'), 0.12),
                hoverBg: (0, hexToRgba_1.hexToRgba)((0, theme_tools_1.getColor)(theme, 'brand.secondary.500'), 0.04),
            };
        }
        default: {
            return {
                borderColor: `${c}.500`,
                activeBg: (0, hexToRgba_1.hexToRgba)((0, theme_tools_1.getColor)(theme, `${c}.500`), 0.12),
                hoverBg: (0, hexToRgba_1.hexToRgba)((0, theme_tools_1.getColor)(theme, `${c}.500`), 0.04),
            };
        }
    }
};
const variantSolid = (0, react_1.defineStyle)((props) => {
    const { bg, hoverBg, activeBg, color } = genVariantSolidColours(props);
    return {
        bg,
        borderColor: bg,
        color,
        px: '15px',
        _active: {
            bg: activeBg,
            borderColor: activeBg,
        },
        _hover: {
            bg: hoverBg,
            borderColor: hoverBg,
            _disabled: {
                bg: 'interaction.support.disabled',
                borderColor: 'interaction.support.disabled',
            },
        },
    };
});
const genVariantReverseColours = ({ colorScheme: c }) => {
    switch (c) {
        case 'main':
        case 'sub':
        case 'neutral':
        case 'critical': {
            return {
                activeBg: `interaction.muted.${c}.active`,
                hoverBg: `interaction.muted.${c}.hover`,
                color: `interaction.${c}.default`,
            };
        }
        default: {
            return {
                activeBg: `${c}.100`,
                hoverBg: `${c}.50`,
                color: `${c}.500`,
            };
        }
    }
};
const variantReverse = (0, react_1.defineStyle)((props) => {
    const { hoverBg, activeBg, color } = genVariantReverseColours(props);
    return {
        bg: 'white',
        borderColor: 'transparent',
        color,
        px: '15px',
        _disabled: {
            bg: 'white',
            borderColor: 'transparent',
        },
        _active: {
            bg: activeBg,
        },
        _hover: {
            bg: hoverBg,
            _disabled: {
                bg: 'white',
            },
        },
    };
});
const variantOutlineClear = (0, react_1.defineStyle)((props) => {
    const { borderColor, activeBg, hoverBg } = genVariantOutlineColours(props);
    const showBorder = props.variant === 'outline';
    return {
        bg: 'transparent',
        px: '15px',
        borderColor: showBorder ? borderColor : 'transparent',
        color: borderColor,
        _disabled: {
            borderColor: showBorder
                ? 'interaction.support.disabled-content'
                : 'transparent',
            bg: 'transparent',
        },
        _active: {
            bg: activeBg,
            borderColor: showBorder ? borderColor : 'transparent',
        },
        _hover: {
            bg: hoverBg,
            borderColor: showBorder ? borderColor : 'transparent',
            _disabled: {
                borderColor: showBorder
                    ? 'interaction.support.disabled-content'
                    : 'transparent',
                bg: 'transparent',
            },
        },
    };
});
const variantLink = (0, react_1.defineStyle)((props) => {
    var _a, _b;
    return (0, lodash_1.merge)({}, (_a = Link_1.Link.baseStyle) === null || _a === void 0 ? void 0 : _a.call(Link_1.Link, props), (_b = Link_1.Link.variants) === null || _b === void 0 ? void 0 : _b.standalone, {
        border: 'none',
        minHeight: 'auto',
        fontWeight: 'normal',
        w: 'fit-content',
        _disabled: {
            bg: 'transparent',
        },
    });
});
const variantInputAttached = (0, react_1.defineStyle)((props) => {
    const { focusBorderColor: fc, errorBorderColor: ec, theme } = props;
    return {
        bg: 'utility.ui',
        color: 'interaction.support.disabled-content',
        borderColor: 'base.divider.strong',
        borderStartRadius: 0,
        borderEndRadius: 'sm',
        _hover: {
            bg: 'interaction.muted.main.hover',
            _disabled: {
                bg: 'interaction.support.disabled',
            },
        },
        outlineOffset: 0,
        _active: {
            color: 'base.content.strong',
            _disabled: {
                color: 'interaction.support.disabled-content',
            },
        },
        _invalid: {
            // Remove extra 1px of outline.
            borderColor: ec,
        },
        _focus: {
            zIndex: 1,
            borderColor: fc,
            boxShadow: `0 0 0 1px ${(0, theme_tools_1.getColor)(theme, fc)}`,
        },
        _focusVisible: {
            boxShadow: 'none',
            outline: 'none',
        },
        _disabled: {
            bg: 'interaction.support.disabled',
            borderColor: 'base.divider.strong',
            color: 'interaction.support.disabled-content',
        },
    };
});
const variants = {
    solid: variantSolid,
    reverse: variantReverse,
    outline: variantOutlineClear,
    clear: variantOutlineClear,
    link: variantLink,
    inputAttached: variantInputAttached,
};
const baseStyle = (0, react_1.defineStyle)(Object.assign(Object.assign(Object.assign({}, textStyles_1.textStyles['subhead-1']), { whiteSpace: 'pre-wrap', borderRadius: 'base', border: '1px solid', flexShrink: 0, 
    // -1px for border
    px: '15px', py: '9px', _disabled: {
        bg: 'interaction.support.disabled',
        borderColor: 'interaction.support.disabled',
        opacity: 1,
        color: 'interaction.support.disabled-content',
    } }), layerStyles_1.layerStyles.focusRing.default));
const sizes = {
    xs: (0, react_1.defineStyle)(Object.assign(Object.assign({}, textStyles_1.textStyles['subhead-2']), { minH: '2.25rem', minW: '2.25rem' })),
    sm: (0, react_1.defineStyle)(Object.assign(Object.assign({}, textStyles_1.textStyles['subhead-1']), { minH: '2.5rem', minW: '2.5rem' })),
    md: (0, react_1.defineStyle)(Object.assign(Object.assign({}, textStyles_1.textStyles['subhead-1']), { minH: '2.75rem', minW: '2.75rem' })),
    lg: (0, react_1.defineStyle)(Object.assign(Object.assign({}, textStyles_1.textStyles['subhead-1']), { minH: '3rem', minW: '3rem' })),
};
exports.Button = (0, react_1.defineStyleConfig)({
    baseStyle,
    sizes,
    variants,
    defaultProps: {
        variant: 'solid',
        colorScheme: 'main',
        // @ts-expect-error Invalid exported type.
        focusBorderColor: 'utility.focus-default',
        errorBorderColor: 'interaction.critical.default',
        size: 'md',
    },
});
