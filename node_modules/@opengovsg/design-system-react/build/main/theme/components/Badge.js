"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Badge = void 0;
const react_1 = require("@chakra-ui/react");
const theme_tools_1 = require("@chakra-ui/theme-tools");
const contrast_1 = require("../../theme/utils/contrast");
const textStyles_1 = require("../textStyles");
const baseStyle = (0, react_1.defineStyle)(Object.assign(Object.assign({}, textStyles_1.textStyles['caption-1']), { textTransform: 'initial', display: 'inline-flex', alignItems: 'center' }));
const variantSolid = (0, react_1.defineStyle)((props) => {
    var _a;
    const { colorScheme: c, theme } = props;
    const solidBgTokenMap = {
        main: 'utility.feedback.info',
        success: 'utility.feedback.success',
        warning: 'utility.feedback.warning',
        critical: 'utility.feedback.critical',
    };
    const bgColor = (0, theme_tools_1.getColor)(theme, (_a = solidBgTokenMap[c]) !== null && _a !== void 0 ? _a : `${c}.500`);
    let textColor = (0, theme_tools_1.getColor)(theme, 'base.content.inverse');
    textColor = (0, contrast_1.getContrastColor)(textColor, bgColor, 'base.content.default');
    return {
        bg: bgColor,
        color: textColor,
    };
});
const variantSubtle = (0, react_1.defineStyle)((props) => {
    var _a, _b;
    const { colorScheme: c, theme } = props;
    const subtleBgTokenMap = {
        main: 'interaction.main-subtle.default',
        sub: 'interaction.sub-subtle.default',
        success: 'utility.feedback.success-subtle',
        warning: 'utility.feedback.warning-subtle',
        critical: 'utility.feedback.critical-subtle',
    };
    const subtleColorTokenMap = {
        main: 'utility.feedback.info',
        sub: 'interaction.sub.default',
        success: 'utility.feedback.success',
        warning: 'base.content.default',
        critical: 'utility.feedback.critical',
    };
    const bgColor = (0, theme_tools_1.getColor)(theme, (_a = subtleBgTokenMap[c]) !== null && _a !== void 0 ? _a : `${c}.100`);
    const textColor = (0, theme_tools_1.getColor)(theme, (_b = subtleColorTokenMap[c]) !== null && _b !== void 0 ? _b : `${c}.500`);
    return {
        bgColor,
        color: textColor,
    };
});
const variantClear = (0, react_1.defineStyle)(({ colorScheme: c }) => {
    var _a;
    const clearIconColorTokenMap = {
        main: 'utility.feedback.info',
        success: 'utility.feedback.success',
        warning: 'utility.feedback.warning',
        critical: 'utility.feedback.critical',
    };
    return Object.assign(Object.assign({}, textStyles_1.textStyles['body-2']), { color: 'base.content.default', accentColor: (_a = clearIconColorTokenMap[c]) !== null && _a !== void 0 ? _a : `${c}.500` });
});
const variants = {
    solid: variantSolid,
    subtle: variantSubtle,
    clear: variantClear,
};
const sizes = {
    md: {
        py: '0.25rem',
        px: '0.5rem',
        borderRadius: 'base',
    },
};
exports.Badge = {
    baseStyle,
    variants,
    sizes,
    defaultProps: {
        variant: 'solid',
        size: 'md',
        colorScheme: 'main',
    },
};
