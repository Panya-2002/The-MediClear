"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvatarMenu = exports.AvatarMenuDivider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const lodash_1 = require("lodash");
const Menu_1 = require("../Menu");
/**
 * MenuButton styled for avatar
 * Used to wrap Avatar component
 * @preconditions Must be a child of Menu component,
 * and returned using a render prop.
 */
const AvatarMenuButton = (props) => {
    return ((0, jsx_runtime_1.jsx)(Menu_1.Menu.Button, Object.assign({ variant: "clear", iconSpacing: "0.25rem", chevronSize: "1.5rem" }, props)));
};
/**
 * MenuDivider styled for avatar
 * @preconditions Must be a child of Menu component,
 */
const AvatarMenuDivider = () => {
    return (0, jsx_runtime_1.jsx)(react_2.MenuDivider, { "aria-hidden": true });
};
exports.AvatarMenuDivider = AvatarMenuDivider;
const AvatarMenu = (_a) => {
    var { name, hasNotification, defaultIsOpen, menuListProps, children, badge = (0, jsx_runtime_1.jsx)(react_2.AvatarBadge, {}), sx } = _a, avatarProps = __rest(_a, ["name", "hasNotification", "defaultIsOpen", "menuListProps", "children", "badge", "sx"]);
    const styles = (0, react_2.useMultiStyleConfig)('AvatarMenu', avatarProps);
    const mergedAvatarStyles = (0, react_1.useMemo)(() => (0, lodash_1.merge)({}, styles.avatar, sx), [styles.avatar, sx]);
    return ((0, jsx_runtime_1.jsx)(Menu_1.Menu, { autoSelect: false, defaultIsOpen: defaultIsOpen, children: ({ isOpen }) => ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(AvatarMenuButton, { "data-group": true, isActive: isOpen, isOpen: isOpen, sx: styles.button, children: (0, jsx_runtime_1.jsx)(react_2.Avatar, Object.assign({ name: name, sx: mergedAvatarStyles }, avatarProps, { children: hasNotification && badge })) }), (0, jsx_runtime_1.jsx)(Menu_1.Menu.List, Object.assign({ role: "menu", sx: styles.list }, menuListProps, { children: children }))] })) }));
};
exports.AvatarMenu = AvatarMenu;
