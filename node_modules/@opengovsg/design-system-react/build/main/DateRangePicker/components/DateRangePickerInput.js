"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateRangePickerInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_input_mask_1 = __importDefault(require("react-input-mask"));
const react_2 = require("@chakra-ui/react");
const Input_1 = require("../../Input");
const DateRangePickerContext_1 = require("../DateRangePickerContext");
// eslint-disable-next-line @typescript-eslint/ban-types
exports.DateRangePickerInput = (0, react_2.forwardRef)((_props, ref) => {
    const { startInputRef, styles, startInputDisplay, handleStartDateChange, placeholder, fcProps, handleInputBlur, handleInputClick, allowManualInput, labelSeparator, endInputDisplay, endInputRef, handleEndDateChange, internalValue: [startDate, endDate], size, } = (0, DateRangePickerContext_1.useDateRangePicker)();
    const mergedStartInputRef = (0, react_2.useMergeRefs)(startInputRef, ref);
    const selectedDatesAriaLiveText = (0, react_1.useMemo)(() => {
        if (!startDate && !endDate) {
            return 'No date selected';
        }
        if (startDate && !endDate) {
            return `Selected date: ${startDate.toLocaleDateString()}`;
        }
        return `Selected date range: ${startDate === null || startDate === void 0 ? void 0 : startDate.toLocaleDateString()} to ${endDate === null || endDate === void 0 ? void 0 : endDate.toLocaleDateString()}`;
    }, [endDate, startDate]);
    // Allow for SSR with react-input-mask package.
    const [hasMounted, setHasMounted] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        setHasMounted(true);
    }, []);
    return ((0, jsx_runtime_1.jsxs)(react_2.Flex, { overflowX: "auto", sx: {
            // Hide scrollbars so dual inputs feel like a real normal input.
            msOverflowStyle: 'none',
            scrollbarWidth: 'none',
            '&::-webkit-scrollbar': {
                display: 'none',
            },
        }, children: [(0, jsx_runtime_1.jsx)(react_2.VisuallyHidden, { "aria-live": "assertive", children: selectedDatesAriaLiveText }), (0, jsx_runtime_1.jsxs)(react_2.Stack, { direction: "row", align: "center", children: [hasMounted ? ((0, jsx_runtime_1.jsx)(Input_1.Input, Object.assign({ size: size, variant: "unstyled", "aria-label": "Start date of range", inputMode: "numeric" // Nudge Android mobile keyboard to be numeric
                        , pattern: "\\d*" // Nudge numeric keyboard on iOS Safari.
                        , sx: styles.field, width: "6rem", as: react_input_mask_1.default, mask: "99/99/9999", value: startInputDisplay, onChange: handleStartDateChange, placeholder: placeholder, maskPlaceholder: placeholder, ref: mergedStartInputRef }, fcProps, { onBlur: handleInputBlur, onClick: handleInputClick, isReadOnly: fcProps.isReadOnly || !allowManualInput }))) : ((0, jsx_runtime_1.jsx)(Input_1.Input, { size: size, variant: "unstyled", inputMode: "numeric", pattern: "\\d*", placeholder: placeholder, sx: styles.field, width: "6rem" })), (0, jsx_runtime_1.jsx)(react_2.Text, { color: "base.content.default", children: labelSeparator }), hasMounted ? ((0, jsx_runtime_1.jsx)(Input_1.Input, Object.assign({ variant: "unstyled", size: size, "aria-label": "Start date of range", inputMode: "numeric" // Nudge Android mobile keyboard to be numeric
                        , pattern: "\\d*" // Nudge numeric keyboard on iOS Safari.
                        , sx: styles.field, width: "6rem", as: react_input_mask_1.default, mask: "99/99/9999", value: endInputDisplay, onChange: handleEndDateChange, placeholder: placeholder, maskPlaceholder: placeholder, onClick: handleInputClick, ref: endInputRef }, fcProps, { onBlur: handleInputBlur, isReadOnly: fcProps.isReadOnly || !allowManualInput }))) : ((0, jsx_runtime_1.jsx)(Input_1.Input, { size: size, variant: "unstyled", inputMode: "numeric", pattern: "\\d*", placeholder: placeholder, sx: styles.field, width: "6rem" }))] })] }));
});
exports.DateRangePickerInput.displayName = 'DateRangePickerInput';
