import { jsx as _jsx } from "react/jsx-runtime";
import { useRef } from 'react';
import { Box, Checkbox as ChakraCheckbox, createStylesContext, forwardRef, Icon, useMergeRefs, useMultiStyleConfig, } from '@chakra-ui/react';
import { BxCheckAnimated } from '../icons';
import { Input } from '../Input';
import { CheckboxOthersContext, useCheckboxOthers } from './useCheckboxOthers';
export const Checkbox = forwardRef(({ children, colorScheme, ...props }, ref) => {
    // Passing all props for cleanliness but the size prop is the most relevant
    const { icon: iconStyles } = useMultiStyleConfig('Checkbox', props);
    return (_jsx(ChakraCheckbox, { icon: _jsx(Icon, { as: BxCheckAnimated, __css: iconStyles, 
            // This prop needs to be passed explicitly for animations
            isChecked: props.isChecked }), colorScheme: colorScheme, ref: ref, ...props, children: children }));
});
Checkbox.displayName = 'Checkbox';
/**
 * Components to support the "Others" option.
 */
const [CheckboxWithOthersStylesProvider, useCheckboxWithOthersStyles] = createStylesContext('Checkbox');
/**
 * Provides context values for the Others option.
 */
const OthersWrapper = ({ children, ...props }) => {
    const checkboxRef = useRef(null);
    const inputRef = useRef(null);
    // Passing all props for cleanliness but size and colorScheme are the most relevant
    const styles = useMultiStyleConfig('Checkbox', props);
    return (_jsx(CheckboxWithOthersStylesProvider, { value: styles, children: _jsx(CheckboxOthersContext.Provider, { value: { checkboxRef, inputRef }, children: _jsx(Box, { __css: styles.othersContainer, children: children }) }) }));
};
/**
 * Wrapper for the checkbox part of the Others option.
 */
const OthersCheckbox = forwardRef((props, ref) => {
    const { checkboxRef, inputRef } = useCheckboxOthers();
    const styles = useCheckboxWithOthersStyles();
    const mergedCheckboxRef = useMergeRefs(checkboxRef, ref);
    const handleCheckboxChange = (e) => {
        // Upon checking checkbox, focus text input
        if (e.target.checked) {
            inputRef.current?.focus();
        }
        props.onChange?.(e);
    };
    return (_jsx(Checkbox, { ref: mergedCheckboxRef, __css: styles.othersCheckbox, ...props, onChange: handleCheckboxChange, children: "Other" }));
});
OthersCheckbox.displayName = 'OthersCheckbox';
/**
 * Wrapper for the input part of the Others option.
 */
const OthersInput = forwardRef((props, ref) => {
    const { checkboxRef, inputRef } = useCheckboxOthers();
    const styles = useCheckboxWithOthersStyles();
    const mergedInputRef = useMergeRefs(inputRef, ref);
    const handleInputChange = (e) => {
        // If there is text in the input, ensure the checkbox is checked.
        if (e.target.value && !checkboxRef.current?.checked) {
            checkboxRef.current?.click();
        }
        props.onChange?.(e);
    };
    return (_jsx(Input, { sx: styles.othersInput, ref: mergedInputRef, ...props, onChange: handleInputChange }));
});
OthersInput.displayName = 'OthersInput';
Checkbox.OthersWrapper = OthersWrapper;
Checkbox.OthersCheckbox = OthersCheckbox;
Checkbox.OthersInput = OthersInput;
Checkbox.OthersInput.displayName = 'Checkbox.OthersInput';
Checkbox.OthersWrapper.displayName = 'Checkbox.OthersWrapper';
Checkbox.OthersCheckbox.displayName = 'Checkbox.OthersCheckbox';
