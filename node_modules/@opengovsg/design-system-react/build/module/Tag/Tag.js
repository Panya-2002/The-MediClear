import { jsx as _jsx } from "react/jsx-runtime";
import { Box, chakra, createStylesContext, forwardRef, Icon, Tag as ChakraTag, useMultiStyleConfig, } from '@chakra-ui/react';
import { BxX } from '../icons';
const [StylesProvider, useStyles] = createStylesContext('Tag');
export const TagLeftIcon = forwardRef((props, ref) => {
    const styles = useStyles();
    return (_jsx(Icon, { ref: ref, verticalAlign: "top", marginStart: 0, ...props, __css: styles.icon }));
});
export const TagRightIcon = forwardRef((props, ref) => {
    const styles = useStyles();
    return (_jsx(Icon, { ref: ref, verticalAlign: "top", marginEnd: 0, ...props, __css: styles.icon }));
});
const TagCloseIcon = () => _jsx(Icon, { as: BxX, fontSize: "inherit" });
/** Not using Chakra's TagCloseButton due to inability to override aria-label */
export const TagCloseButton = ({ isDisabled, children, ...rest }) => {
    const styles = useStyles();
    return (_jsx(Box, { display: "inline-flex", flexGrow: 1, justifyContent: "end", children: _jsx(chakra.button, { type: "button", "aria-label": "Remove selected option", disabled: isDisabled, sx: styles.closeButton, ...rest, children: children || _jsx(TagCloseIcon, {}) }) }));
};
export const TagLabel = forwardRef((props, ref) => {
    const styles = useStyles();
    return _jsx(chakra.span, { ref: ref, noOfLines: 1, ...props, __css: styles.label });
});
TagLabel.displayName = 'TagLabel';
export const Tag = forwardRef((props, ref) => {
    const styles = useMultiStyleConfig('Tag', props);
    return (_jsx(StylesProvider, { value: styles, children: _jsx(ChakraTag, { ...props, ref: ref }) }));
});
Tag.displayName = 'Tag';
