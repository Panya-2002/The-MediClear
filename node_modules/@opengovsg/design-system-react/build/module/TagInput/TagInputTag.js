import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useRef, } from 'react';
import { useFocusEffect, useRovingTabIndex } from 'react-roving-tabindex';
import { Tag, TagCloseButton, TagLabel } from '../Tag';
export const TagInputTag = ({ label, isDisabled = false, isInvalid, colorScheme, onClearTag, onBlur, ...props }) => {
    // The ref of the input to be controlled.
    const focusedRef = useRef(null);
    // handleKeyDown and handleClick are stable for the lifetime of the component:
    const [tabIndex, focused, handleRovingKeyDown, handleRovingClick] = useRovingTabIndex(focusedRef, isDisabled);
    // Set focus on the tag if it gets focus.
    useFocusEffect(focused, focusedRef);
    const handleClick = useCallback((event) => {
        handleRovingClick();
        event.stopPropagation();
    }, [handleRovingClick]);
    const handleCloseButtonClick = useCallback((event) => {
        onClearTag(event);
        onBlur?.(event);
        event.stopPropagation();
    }, [onBlur, onClearTag]);
    const handleKeyDown = useCallback((event) => {
        switch (event.key) {
            case 'Delete':
            case 'Backspace':
                return onClearTag(event);
        }
        handleRovingKeyDown(event);
    }, [handleRovingKeyDown, onClearTag]);
    return (_jsxs(Tag, { cursor: "pointer", "aria-disabled": isDisabled, "aria-invalid": isInvalid, colorScheme: isInvalid ? 'critical' : colorScheme, ...props, ref: focusedRef, tabIndex: tabIndex, onKeyDown: handleKeyDown, onClick: handleClick, children: [_jsx(TagLabel, { title: label, children: label }), _jsx(TagCloseButton, { tabIndex: -1, isDisabled: isDisabled, onClick: handleCloseButtonClick })] }));
};
