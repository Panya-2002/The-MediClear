export declare const components: {
    Attachment: {
        baseStyle?: {
            dropzone: {
                transitionProperty: string;
                transitionDuration: string;
            };
            fileInfoContainer: {
                borderRadius: string;
                border: string;
                borderColor: string;
                bg: string;
                color: string;
                _disabled: {
                    bg: string;
                    borderColor: string;
                    cursor: string;
                    color: string;
                };
            };
            fileInfo: {
                display: string;
                justifyContent: string;
                flex: number;
            };
            fileInfoDescription: {
                color: string;
                _disabled: {
                    color: string;
                };
                textStyle: string;
            };
            fileInfoImage: {
                borderRight: string;
                borderColor: string;
                bg: string;
            };
        } | undefined;
        sizes?: {
            md: ({ imagePreview }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                icon: {
                    fontSize: string;
                };
                dropzone: {
                    px: string;
                    py: string;
                    textStyle: string;
                };
                fileInfoContainer: {
                    maxHeight: string | undefined;
                    flexDir: string;
                };
                fileInfo: {
                    py: string;
                    px: string;
                };
                fileInfoImage: {
                    p: string;
                    maxW: string;
                    objectFit: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                dropzone: {
                    color: string;
                    display: string;
                    flexDir: string;
                    alignItems: string;
                    justifyContent: string;
                    cursor: string;
                    border: string;
                    borderRadius: string;
                    outline: string;
                    _invalid: {
                        borderColor: any;
                        boxShadow: string;
                    };
                    _focus: {
                        borderStyle: string;
                        zIndex?: number | undefined;
                        borderColor?: any;
                        boxShadow?: string | undefined;
                    };
                    _disabled: {
                        bg?: string | undefined;
                        borderColor?: string | undefined;
                        color?: string | undefined;
                        cursor?: string | undefined;
                        opacity?: number | undefined;
                        _hover?: {
                            bg: string;
                        } | undefined;
                        _active?: {
                            bg: string;
                        } | undefined;
                    };
                    borderColor: string;
                    bg: string;
                    _active: {
                        bg: string;
                    };
                    _hover: {
                        bg: string;
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "md" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("icon" | "fileInfoContainer" | "fileInfoImage" | "fileInfo" | "fileInfoDescription" | "container" | "dropzone")[];
    };
    Accordion: {
        baseStyle: Partial<Record<"button" | "icon" | "container" | "root" | "panel", import("@chakra-ui/styled-system").SystemStyleObject>>;
        variants: {
            medium: import("@chakra-ui/styled-system").PartsStyleFunction<Omit<{
                parts: <V extends string>(...values: V[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U extends string>(...parts: U[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                }, "parts">;
                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                            }, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                        keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                        __type: V | U | U_1 | U_2 | U_3 | U_4;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                    classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                    keys: (V | U | U_1 | U_2 | U_3)[];
                                    __type: V | U | U_1 | U_2 | U_3;
                                }, "parts">;
                                selectors: () => Record<V | U | U_1 | U_2, string>;
                                classnames: () => Record<V | U | U_1 | U_2, string>;
                                keys: (V | U | U_1 | U_2)[];
                                __type: V | U | U_1 | U_2;
                            }, "parts">;
                            selectors: () => Record<V | U | U_1, string>;
                            classnames: () => Record<V | U | U_1, string>;
                            keys: (V | U | U_1)[];
                            __type: V | U | U_1;
                        }, "parts">;
                        selectors: () => Record<V | U, string>;
                        classnames: () => Record<V | U, string>;
                        keys: (V | U)[];
                        __type: V | U;
                    }, "parts">;
                    selectors: () => Record<V, string>;
                    classnames: () => Record<V, string>;
                    keys: V[];
                    __type: V;
                }, "parts">;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_10 extends string>(...parts: U_10[]) => Omit<{
                    parts: <V_1 extends string>(...values: V_1[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_11 extends string>(...parts: U_11[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_1_1 extends string>(...parts: U_1_1[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_2_1 extends string>(...parts: U_2_1[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_3_1 extends string>(...parts: U_3_1[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_4_1 extends string>(...parts: U_4_1[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_5_1 extends string>(...parts: U_5_1[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_6_1 extends string>(...parts: U_6_1[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_7_1 extends string>(...parts: U_7_1[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_8_1 extends string>(...parts: U_8_1[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_9_1 extends string>(...parts: U_9_1[]) => Omit<any, "parts">;
                                                            selectors: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1 | U_8_1, string>;
                                                            classnames: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1 | U_8_1, string>;
                                                            keys: (V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1 | U_8_1)[];
                                                            __type: V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1 | U_8_1;
                                                        }, "parts">;
                                                        selectors: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1, string>;
                                                        classnames: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1, string>;
                                                        keys: (V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1)[];
                                                        __type: V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1 | U_7_1;
                                                    }, "parts">;
                                                    selectors: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1, string>;
                                                    classnames: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1, string>;
                                                    keys: (V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1)[];
                                                    __type: V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1 | U_6_1;
                                                }, "parts">;
                                                selectors: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1, string>;
                                                classnames: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1, string>;
                                                keys: (V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1)[];
                                                __type: V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1 | U_5_1;
                                            }, "parts">;
                                            selectors: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1, string>;
                                            classnames: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1, string>;
                                            keys: (V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1)[];
                                            __type: V_1 | U_11 | U_1_1 | U_2_1 | U_3_1 | U_4_1;
                                        }, "parts">;
                                        selectors: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1, string>;
                                        classnames: () => Record<V_1 | U_11 | U_1_1 | U_2_1 | U_3_1, string>;
                                        keys: (V_1 | U_11 | U_1_1 | U_2_1 | U_3_1)[];
                                        __type: V_1 | U_11 | U_1_1 | U_2_1 | U_3_1;
                                    }, "parts">;
                                    selectors: () => Record<V_1 | U_11 | U_1_1 | U_2_1, string>;
                                    classnames: () => Record<V_1 | U_11 | U_1_1 | U_2_1, string>;
                                    keys: (V_1 | U_11 | U_1_1 | U_2_1)[];
                                    __type: V_1 | U_11 | U_1_1 | U_2_1;
                                }, "parts">;
                                selectors: () => Record<V_1 | U_11 | U_1_1, string>;
                                classnames: () => Record<V_1 | U_11 | U_1_1, string>;
                                keys: (V_1 | U_11 | U_1_1)[];
                                __type: V_1 | U_11 | U_1_1;
                            }, "parts">;
                            selectors: () => Record<V_1 | U_11, string>;
                            classnames: () => Record<V_1 | U_11, string>;
                            keys: (V_1 | U_11)[];
                            __type: V_1 | U_11;
                        }, "parts">;
                        selectors: () => Record<V_1, string>;
                        classnames: () => Record<V_1, string>;
                        keys: V_1[];
                        __type: V_1;
                    }, "parts">;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_11 extends string>(...parts: U_11[]) => Omit<{
                        parts: <V_2 extends string>(...values: V_2[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_12 extends string>(...parts: U_12[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_1_2 extends string>(...parts: U_1_2[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_2_2 extends string>(...parts: U_2_2[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_3_2 extends string>(...parts: U_3_2[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_4_2 extends string>(...parts: U_4_2[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_5_2 extends string>(...parts: U_5_2[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_6_2 extends string>(...parts: U_6_2[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_7_2 extends string>(...parts: U_7_2[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_8_2 extends string>(...parts: U_8_2[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_9_2 extends string>(...parts: U_9_2[]) => Omit<any, "parts">;
                                                                selectors: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2 | U_8_2, string>;
                                                                classnames: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2 | U_8_2, string>;
                                                                keys: (V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2 | U_8_2)[];
                                                                __type: V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2 | U_8_2;
                                                            }, "parts">;
                                                            selectors: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2, string>;
                                                            classnames: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2, string>;
                                                            keys: (V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2)[];
                                                            __type: V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2 | U_7_2;
                                                        }, "parts">;
                                                        selectors: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2, string>;
                                                        classnames: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2, string>;
                                                        keys: (V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2)[];
                                                        __type: V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2 | U_6_2;
                                                    }, "parts">;
                                                    selectors: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2, string>;
                                                    classnames: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2, string>;
                                                    keys: (V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2)[];
                                                    __type: V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2 | U_5_2;
                                                }, "parts">;
                                                selectors: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2, string>;
                                                classnames: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2, string>;
                                                keys: (V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2)[];
                                                __type: V_2 | U_12 | U_1_2 | U_2_2 | U_3_2 | U_4_2;
                                            }, "parts">;
                                            selectors: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2, string>;
                                            classnames: () => Record<V_2 | U_12 | U_1_2 | U_2_2 | U_3_2, string>;
                                            keys: (V_2 | U_12 | U_1_2 | U_2_2 | U_3_2)[];
                                            __type: V_2 | U_12 | U_1_2 | U_2_2 | U_3_2;
                                        }, "parts">;
                                        selectors: () => Record<V_2 | U_12 | U_1_2 | U_2_2, string>;
                                        classnames: () => Record<V_2 | U_12 | U_1_2 | U_2_2, string>;
                                        keys: (V_2 | U_12 | U_1_2 | U_2_2)[];
                                        __type: V_2 | U_12 | U_1_2 | U_2_2;
                                    }, "parts">;
                                    selectors: () => Record<V_2 | U_12 | U_1_2, string>;
                                    classnames: () => Record<V_2 | U_12 | U_1_2, string>;
                                    keys: (V_2 | U_12 | U_1_2)[];
                                    __type: V_2 | U_12 | U_1_2;
                                }, "parts">;
                                selectors: () => Record<V_2 | U_12, string>;
                                classnames: () => Record<V_2 | U_12, string>;
                                keys: (V_2 | U_12)[];
                                __type: V_2 | U_12;
                            }, "parts">;
                            selectors: () => Record<V_2, string>;
                            classnames: () => Record<V_2, string>;
                            keys: V_2[];
                            __type: V_2;
                        }, "parts">;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_12 extends string>(...parts: U_12[]) => Omit<{
                            parts: <V_3 extends string>(...values: V_3[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_13 extends string>(...parts: U_13[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_1_3 extends string>(...parts: U_1_3[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_2_3 extends string>(...parts: U_2_3[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_3_3 extends string>(...parts: U_3_3[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_4_3 extends string>(...parts: U_4_3[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_5_3 extends string>(...parts: U_5_3[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_6_3 extends string>(...parts: U_6_3[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_7_3 extends string>(...parts: U_7_3[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_8_3 extends string>(...parts: U_8_3[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_9_3 extends string>(...parts: U_9_3[]) => Omit<any, "parts">;
                                                                    selectors: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3 | U_8_3, string>;
                                                                    classnames: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3 | U_8_3, string>;
                                                                    keys: (V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3 | U_8_3)[];
                                                                    __type: V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3 | U_8_3;
                                                                }, "parts">;
                                                                selectors: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3, string>;
                                                                classnames: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3, string>;
                                                                keys: (V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3)[];
                                                                __type: V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3 | U_7_3;
                                                            }, "parts">;
                                                            selectors: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3, string>;
                                                            classnames: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3, string>;
                                                            keys: (V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3)[];
                                                            __type: V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3 | U_6_3;
                                                        }, "parts">;
                                                        selectors: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3, string>;
                                                        classnames: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3, string>;
                                                        keys: (V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3)[];
                                                        __type: V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3 | U_5_3;
                                                    }, "parts">;
                                                    selectors: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3, string>;
                                                    classnames: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3, string>;
                                                    keys: (V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3)[];
                                                    __type: V_3 | U_13 | U_1_3 | U_2_3 | U_3_3 | U_4_3;
                                                }, "parts">;
                                                selectors: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3, string>;
                                                classnames: () => Record<V_3 | U_13 | U_1_3 | U_2_3 | U_3_3, string>;
                                                keys: (V_3 | U_13 | U_1_3 | U_2_3 | U_3_3)[];
                                                __type: V_3 | U_13 | U_1_3 | U_2_3 | U_3_3;
                                            }, "parts">;
                                            selectors: () => Record<V_3 | U_13 | U_1_3 | U_2_3, string>;
                                            classnames: () => Record<V_3 | U_13 | U_1_3 | U_2_3, string>;
                                            keys: (V_3 | U_13 | U_1_3 | U_2_3)[];
                                            __type: V_3 | U_13 | U_1_3 | U_2_3;
                                        }, "parts">;
                                        selectors: () => Record<V_3 | U_13 | U_1_3, string>;
                                        classnames: () => Record<V_3 | U_13 | U_1_3, string>;
                                        keys: (V_3 | U_13 | U_1_3)[];
                                        __type: V_3 | U_13 | U_1_3;
                                    }, "parts">;
                                    selectors: () => Record<V_3 | U_13, string>;
                                    classnames: () => Record<V_3 | U_13, string>;
                                    keys: (V_3 | U_13)[];
                                    __type: V_3 | U_13;
                                }, "parts">;
                                selectors: () => Record<V_3, string>;
                                classnames: () => Record<V_3, string>;
                                keys: V_3[];
                                __type: V_3;
                            }, "parts">;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_13 extends string>(...parts: U_13[]) => Omit<{
                                parts: <V_4 extends string>(...values: V_4[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_14 extends string>(...parts: U_14[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_1_4 extends string>(...parts: U_1_4[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_2_4 extends string>(...parts: U_2_4[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_3_4 extends string>(...parts: U_3_4[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_4_4 extends string>(...parts: U_4_4[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_5_4 extends string>(...parts: U_5_4[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_6_4 extends string>(...parts: U_6_4[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_7_4 extends string>(...parts: U_7_4[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_8_4 extends string>(...parts: U_8_4[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_9_4 extends string>(...parts: U_9_4[]) => Omit<any, "parts">;
                                                                        selectors: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4 | U_8_4, string>;
                                                                        classnames: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4 | U_8_4, string>;
                                                                        keys: (V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4 | U_8_4)[];
                                                                        __type: V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4 | U_8_4;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4, string>;
                                                                    classnames: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4, string>;
                                                                    keys: (V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4)[];
                                                                    __type: V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4 | U_7_4;
                                                                }, "parts">;
                                                                selectors: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4, string>;
                                                                classnames: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4, string>;
                                                                keys: (V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4)[];
                                                                __type: V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4 | U_6_4;
                                                            }, "parts">;
                                                            selectors: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4, string>;
                                                            classnames: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4, string>;
                                                            keys: (V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4)[];
                                                            __type: V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4 | U_5_4;
                                                        }, "parts">;
                                                        selectors: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4, string>;
                                                        classnames: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4, string>;
                                                        keys: (V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4)[];
                                                        __type: V_4 | U_14 | U_1_4 | U_2_4 | U_3_4 | U_4_4;
                                                    }, "parts">;
                                                    selectors: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4, string>;
                                                    classnames: () => Record<V_4 | U_14 | U_1_4 | U_2_4 | U_3_4, string>;
                                                    keys: (V_4 | U_14 | U_1_4 | U_2_4 | U_3_4)[];
                                                    __type: V_4 | U_14 | U_1_4 | U_2_4 | U_3_4;
                                                }, "parts">;
                                                selectors: () => Record<V_4 | U_14 | U_1_4 | U_2_4, string>;
                                                classnames: () => Record<V_4 | U_14 | U_1_4 | U_2_4, string>;
                                                keys: (V_4 | U_14 | U_1_4 | U_2_4)[];
                                                __type: V_4 | U_14 | U_1_4 | U_2_4;
                                            }, "parts">;
                                            selectors: () => Record<V_4 | U_14 | U_1_4, string>;
                                            classnames: () => Record<V_4 | U_14 | U_1_4, string>;
                                            keys: (V_4 | U_14 | U_1_4)[];
                                            __type: V_4 | U_14 | U_1_4;
                                        }, "parts">;
                                        selectors: () => Record<V_4 | U_14, string>;
                                        classnames: () => Record<V_4 | U_14, string>;
                                        keys: (V_4 | U_14)[];
                                        __type: V_4 | U_14;
                                    }, "parts">;
                                    selectors: () => Record<V_4, string>;
                                    classnames: () => Record<V_4, string>;
                                    keys: V_4[];
                                    __type: V_4;
                                }, "parts">;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_14 extends string>(...parts: U_14[]) => Omit<{
                                    parts: <V_5 extends string>(...values: V_5[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_15 extends string>(...parts: U_15[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_1_5 extends string>(...parts: U_1_5[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_2_5 extends string>(...parts: U_2_5[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_3_5 extends string>(...parts: U_3_5[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_4_5 extends string>(...parts: U_4_5[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_5_5 extends string>(...parts: U_5_5[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_6_5 extends string>(...parts: U_6_5[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_7_5 extends string>(...parts: U_7_5[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_8_5 extends string>(...parts: U_8_5[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_9_5 extends string>(...parts: U_9_5[]) => Omit<any, "parts">;
                                                                            selectors: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5 | U_8_5, string>;
                                                                            classnames: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5 | U_8_5, string>;
                                                                            keys: (V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5 | U_8_5)[];
                                                                            __type: V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5 | U_8_5;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5, string>;
                                                                        classnames: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5, string>;
                                                                        keys: (V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5)[];
                                                                        __type: V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5 | U_7_5;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5, string>;
                                                                    classnames: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5, string>;
                                                                    keys: (V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5)[];
                                                                    __type: V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5 | U_6_5;
                                                                }, "parts">;
                                                                selectors: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5, string>;
                                                                classnames: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5, string>;
                                                                keys: (V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5)[];
                                                                __type: V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5 | U_5_5;
                                                            }, "parts">;
                                                            selectors: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5, string>;
                                                            classnames: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5, string>;
                                                            keys: (V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5)[];
                                                            __type: V_5 | U_15 | U_1_5 | U_2_5 | U_3_5 | U_4_5;
                                                        }, "parts">;
                                                        selectors: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5, string>;
                                                        classnames: () => Record<V_5 | U_15 | U_1_5 | U_2_5 | U_3_5, string>;
                                                        keys: (V_5 | U_15 | U_1_5 | U_2_5 | U_3_5)[];
                                                        __type: V_5 | U_15 | U_1_5 | U_2_5 | U_3_5;
                                                    }, "parts">;
                                                    selectors: () => Record<V_5 | U_15 | U_1_5 | U_2_5, string>;
                                                    classnames: () => Record<V_5 | U_15 | U_1_5 | U_2_5, string>;
                                                    keys: (V_5 | U_15 | U_1_5 | U_2_5)[];
                                                    __type: V_5 | U_15 | U_1_5 | U_2_5;
                                                }, "parts">;
                                                selectors: () => Record<V_5 | U_15 | U_1_5, string>;
                                                classnames: () => Record<V_5 | U_15 | U_1_5, string>;
                                                keys: (V_5 | U_15 | U_1_5)[];
                                                __type: V_5 | U_15 | U_1_5;
                                            }, "parts">;
                                            selectors: () => Record<V_5 | U_15, string>;
                                            classnames: () => Record<V_5 | U_15, string>;
                                            keys: (V_5 | U_15)[];
                                            __type: V_5 | U_15;
                                        }, "parts">;
                                        selectors: () => Record<V_5, string>;
                                        classnames: () => Record<V_5, string>;
                                        keys: V_5[];
                                        __type: V_5;
                                    }, "parts">;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_15 extends string>(...parts: U_15[]) => Omit<{
                                        parts: <V_6 extends string>(...values: V_6[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_16 extends string>(...parts: U_16[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_1_6 extends string>(...parts: U_1_6[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_2_6 extends string>(...parts: U_2_6[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_3_6 extends string>(...parts: U_3_6[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_4_6 extends string>(...parts: U_4_6[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_5_6 extends string>(...parts: U_5_6[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_6_6 extends string>(...parts: U_6_6[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_7_6 extends string>(...parts: U_7_6[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_8_6 extends string>(...parts: U_8_6[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_9_6 extends string>(...parts: U_9_6[]) => Omit<any, "parts">;
                                                                                selectors: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6 | U_8_6, string>;
                                                                                classnames: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6 | U_8_6, string>;
                                                                                keys: (V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6 | U_8_6)[];
                                                                                __type: V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6 | U_8_6;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6, string>;
                                                                            classnames: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6, string>;
                                                                            keys: (V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6)[];
                                                                            __type: V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6 | U_7_6;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6, string>;
                                                                        classnames: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6, string>;
                                                                        keys: (V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6)[];
                                                                        __type: V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6 | U_6_6;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6, string>;
                                                                    classnames: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6, string>;
                                                                    keys: (V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6)[];
                                                                    __type: V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6 | U_5_6;
                                                                }, "parts">;
                                                                selectors: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6, string>;
                                                                classnames: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6, string>;
                                                                keys: (V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6)[];
                                                                __type: V_6 | U_16 | U_1_6 | U_2_6 | U_3_6 | U_4_6;
                                                            }, "parts">;
                                                            selectors: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6, string>;
                                                            classnames: () => Record<V_6 | U_16 | U_1_6 | U_2_6 | U_3_6, string>;
                                                            keys: (V_6 | U_16 | U_1_6 | U_2_6 | U_3_6)[];
                                                            __type: V_6 | U_16 | U_1_6 | U_2_6 | U_3_6;
                                                        }, "parts">;
                                                        selectors: () => Record<V_6 | U_16 | U_1_6 | U_2_6, string>;
                                                        classnames: () => Record<V_6 | U_16 | U_1_6 | U_2_6, string>;
                                                        keys: (V_6 | U_16 | U_1_6 | U_2_6)[];
                                                        __type: V_6 | U_16 | U_1_6 | U_2_6;
                                                    }, "parts">;
                                                    selectors: () => Record<V_6 | U_16 | U_1_6, string>;
                                                    classnames: () => Record<V_6 | U_16 | U_1_6, string>;
                                                    keys: (V_6 | U_16 | U_1_6)[];
                                                    __type: V_6 | U_16 | U_1_6;
                                                }, "parts">;
                                                selectors: () => Record<V_6 | U_16, string>;
                                                classnames: () => Record<V_6 | U_16, string>;
                                                keys: (V_6 | U_16)[];
                                                __type: V_6 | U_16;
                                            }, "parts">;
                                            selectors: () => Record<V_6, string>;
                                            classnames: () => Record<V_6, string>;
                                            keys: V_6[];
                                            __type: V_6;
                                        }, "parts">;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_16 extends string>(...parts: U_16[]) => Omit<{
                                            parts: <V_7 extends string>(...values: V_7[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_17 extends string>(...parts: U_17[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_1_7 extends string>(...parts: U_1_7[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_2_7 extends string>(...parts: U_2_7[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_3_7 extends string>(...parts: U_3_7[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_4_7 extends string>(...parts: U_4_7[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_5_7 extends string>(...parts: U_5_7[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_6_7 extends string>(...parts: U_6_7[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_7_7 extends string>(...parts: U_7_7[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_8_7 extends string>(...parts: U_8_7[]) => Omit<{
                                                                                    parts: any;
                                                                                    toPart: (part: string) => {
                                                                                        className: string;
                                                                                        selector: string;
                                                                                        toString: () => string;
                                                                                    };
                                                                                    extend: <U_9_7 extends string>(...parts: U_9_7[]) => Omit<any, "parts">;
                                                                                    selectors: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7 | U_8_7, string>;
                                                                                    classnames: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7 | U_8_7, string>;
                                                                                    keys: (V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7 | U_8_7)[];
                                                                                    __type: V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7 | U_8_7;
                                                                                }, "parts">;
                                                                                selectors: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7, string>;
                                                                                classnames: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7, string>;
                                                                                keys: (V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7)[];
                                                                                __type: V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7 | U_7_7;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7, string>;
                                                                            classnames: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7, string>;
                                                                            keys: (V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7)[];
                                                                            __type: V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7 | U_6_7;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7, string>;
                                                                        classnames: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7, string>;
                                                                        keys: (V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7)[];
                                                                        __type: V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7 | U_5_7;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7, string>;
                                                                    classnames: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7, string>;
                                                                    keys: (V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7)[];
                                                                    __type: V_7 | U_17 | U_1_7 | U_2_7 | U_3_7 | U_4_7;
                                                                }, "parts">;
                                                                selectors: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7, string>;
                                                                classnames: () => Record<V_7 | U_17 | U_1_7 | U_2_7 | U_3_7, string>;
                                                                keys: (V_7 | U_17 | U_1_7 | U_2_7 | U_3_7)[];
                                                                __type: V_7 | U_17 | U_1_7 | U_2_7 | U_3_7;
                                                            }, "parts">;
                                                            selectors: () => Record<V_7 | U_17 | U_1_7 | U_2_7, string>;
                                                            classnames: () => Record<V_7 | U_17 | U_1_7 | U_2_7, string>;
                                                            keys: (V_7 | U_17 | U_1_7 | U_2_7)[];
                                                            __type: V_7 | U_17 | U_1_7 | U_2_7;
                                                        }, "parts">;
                                                        selectors: () => Record<V_7 | U_17 | U_1_7, string>;
                                                        classnames: () => Record<V_7 | U_17 | U_1_7, string>;
                                                        keys: (V_7 | U_17 | U_1_7)[];
                                                        __type: V_7 | U_17 | U_1_7;
                                                    }, "parts">;
                                                    selectors: () => Record<V_7 | U_17, string>;
                                                    classnames: () => Record<V_7 | U_17, string>;
                                                    keys: (V_7 | U_17)[];
                                                    __type: V_7 | U_17;
                                                }, "parts">;
                                                selectors: () => Record<V_7, string>;
                                                classnames: () => Record<V_7, string>;
                                                keys: V_7[];
                                                __type: V_7;
                                            }, "parts">;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_17 extends string>(...parts: U_17[]) => Omit<{
                                                parts: <V_8 extends string>(...values: V_8[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_18 extends string>(...parts: U_18[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_1_8 extends string>(...parts: U_1_8[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_2_8 extends string>(...parts: U_2_8[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_3_8 extends string>(...parts: U_3_8[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_4_8 extends string>(...parts: U_4_8[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_5_8 extends string>(...parts: U_5_8[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_6_8 extends string>(...parts: U_6_8[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_7_8 extends string>(...parts: U_7_8[]) => Omit<{
                                                                                    parts: any;
                                                                                    toPart: (part: string) => {
                                                                                        className: string;
                                                                                        selector: string;
                                                                                        toString: () => string;
                                                                                    };
                                                                                    extend: <U_8_8 extends string>(...parts: U_8_8[]) => Omit<{
                                                                                        parts: any;
                                                                                        toPart: (part: string) => {
                                                                                            className: string;
                                                                                            selector: string;
                                                                                            toString: () => string;
                                                                                        };
                                                                                        extend: <U_9_8 extends string>(...parts: U_9_8[]) => Omit<any, "parts">;
                                                                                        selectors: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8 | U_8_8, string>;
                                                                                        classnames: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8 | U_8_8, string>;
                                                                                        keys: (V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8 | U_8_8)[];
                                                                                        __type: V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8 | U_8_8;
                                                                                    }, "parts">;
                                                                                    selectors: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8, string>;
                                                                                    classnames: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8, string>;
                                                                                    keys: (V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8)[];
                                                                                    __type: V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8 | U_7_8;
                                                                                }, "parts">;
                                                                                selectors: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8, string>;
                                                                                classnames: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8, string>;
                                                                                keys: (V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8)[];
                                                                                __type: V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8 | U_6_8;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8, string>;
                                                                            classnames: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8, string>;
                                                                            keys: (V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8)[];
                                                                            __type: V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8 | U_5_8;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8, string>;
                                                                        classnames: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8, string>;
                                                                        keys: (V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8)[];
                                                                        __type: V_8 | U_18 | U_1_8 | U_2_8 | U_3_8 | U_4_8;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8, string>;
                                                                    classnames: () => Record<V_8 | U_18 | U_1_8 | U_2_8 | U_3_8, string>;
                                                                    keys: (V_8 | U_18 | U_1_8 | U_2_8 | U_3_8)[];
                                                                    __type: V_8 | U_18 | U_1_8 | U_2_8 | U_3_8;
                                                                }, "parts">;
                                                                selectors: () => Record<V_8 | U_18 | U_1_8 | U_2_8, string>;
                                                                classnames: () => Record<V_8 | U_18 | U_1_8 | U_2_8, string>;
                                                                keys: (V_8 | U_18 | U_1_8 | U_2_8)[];
                                                                __type: V_8 | U_18 | U_1_8 | U_2_8;
                                                            }, "parts">;
                                                            selectors: () => Record<V_8 | U_18 | U_1_8, string>;
                                                            classnames: () => Record<V_8 | U_18 | U_1_8, string>;
                                                            keys: (V_8 | U_18 | U_1_8)[];
                                                            __type: V_8 | U_18 | U_1_8;
                                                        }, "parts">;
                                                        selectors: () => Record<V_8 | U_18, string>;
                                                        classnames: () => Record<V_8 | U_18, string>;
                                                        keys: (V_8 | U_18)[];
                                                        __type: V_8 | U_18;
                                                    }, "parts">;
                                                    selectors: () => Record<V_8, string>;
                                                    classnames: () => Record<V_8, string>;
                                                    keys: V_8[];
                                                    __type: V_8;
                                                }, "parts">;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_18 extends string>(...parts: U_18[]) => Omit<{
                                                    parts: <V_9 extends string>(...values: V_9[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_19 extends string>(...parts: U_19[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_1_9 extends string>(...parts: U_1_9[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_2_9 extends string>(...parts: U_2_9[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_3_9 extends string>(...parts: U_3_9[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_4_9 extends string>(...parts: U_4_9[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_5_9 extends string>(...parts: U_5_9[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_6_9 extends string>(...parts: U_6_9[]) => Omit<{
                                                                                    parts: any;
                                                                                    toPart: (part: string) => {
                                                                                        className: string;
                                                                                        selector: string;
                                                                                        toString: () => string;
                                                                                    };
                                                                                    extend: <U_7_9 extends string>(...parts: U_7_9[]) => Omit<{
                                                                                        parts: any;
                                                                                        toPart: (part: string) => {
                                                                                            className: string;
                                                                                            selector: string;
                                                                                            toString: () => string;
                                                                                        };
                                                                                        extend: <U_8_9 extends string>(...parts: U_8_9[]) => Omit<{
                                                                                            parts: any;
                                                                                            toPart: (part: string) => {
                                                                                                className: string;
                                                                                                selector: string;
                                                                                                toString: () => string;
                                                                                            };
                                                                                            extend: <U_9_9 extends string>(...parts: U_9_9[]) => Omit<any, "parts">;
                                                                                            selectors: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9 | U_8_9, string>;
                                                                                            classnames: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9 | U_8_9, string>;
                                                                                            keys: (V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9 | U_8_9)[];
                                                                                            __type: V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9 | U_8_9;
                                                                                        }, "parts">;
                                                                                        selectors: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9, string>;
                                                                                        classnames: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9, string>;
                                                                                        keys: (V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9)[];
                                                                                        __type: V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9 | U_7_9;
                                                                                    }, "parts">;
                                                                                    selectors: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9, string>;
                                                                                    classnames: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9, string>;
                                                                                    keys: (V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9)[];
                                                                                    __type: V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9 | U_6_9;
                                                                                }, "parts">;
                                                                                selectors: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9, string>;
                                                                                classnames: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9, string>;
                                                                                keys: (V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9)[];
                                                                                __type: V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9 | U_5_9;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9, string>;
                                                                            classnames: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9, string>;
                                                                            keys: (V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9)[];
                                                                            __type: V_9 | U_19 | U_1_9 | U_2_9 | U_3_9 | U_4_9;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9, string>;
                                                                        classnames: () => Record<V_9 | U_19 | U_1_9 | U_2_9 | U_3_9, string>;
                                                                        keys: (V_9 | U_19 | U_1_9 | U_2_9 | U_3_9)[];
                                                                        __type: V_9 | U_19 | U_1_9 | U_2_9 | U_3_9;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_9 | U_19 | U_1_9 | U_2_9, string>;
                                                                    classnames: () => Record<V_9 | U_19 | U_1_9 | U_2_9, string>;
                                                                    keys: (V_9 | U_19 | U_1_9 | U_2_9)[];
                                                                    __type: V_9 | U_19 | U_1_9 | U_2_9;
                                                                }, "parts">;
                                                                selectors: () => Record<V_9 | U_19 | U_1_9, string>;
                                                                classnames: () => Record<V_9 | U_19 | U_1_9, string>;
                                                                keys: (V_9 | U_19 | U_1_9)[];
                                                                __type: V_9 | U_19 | U_1_9;
                                                            }, "parts">;
                                                            selectors: () => Record<V_9 | U_19, string>;
                                                            classnames: () => Record<V_9 | U_19, string>;
                                                            keys: (V_9 | U_19)[];
                                                            __type: V_9 | U_19;
                                                        }, "parts">;
                                                        selectors: () => Record<V_9, string>;
                                                        classnames: () => Record<V_9, string>;
                                                        keys: V_9[];
                                                        __type: V_9;
                                                    }, "parts">;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_19 extends string>(...parts: U_19[]) => Omit<{
                                                        parts: <V_10 extends string>(...values: V_10[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_20 extends string>(...parts: U_20[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_1_10 extends string>(...parts: U_1_10[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_2_10 extends string>(...parts: U_2_10[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_3_10 extends string>(...parts: U_3_10[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_4_10 extends string>(...parts: U_4_10[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_5_10 extends string>(...parts: U_5_10[]) => Omit<{
                                                                                    parts: any;
                                                                                    toPart: (part: string) => {
                                                                                        className: string;
                                                                                        selector: string;
                                                                                        toString: () => string;
                                                                                    };
                                                                                    extend: <U_6_10 extends string>(...parts: U_6_10[]) => Omit<{
                                                                                        parts: any;
                                                                                        toPart: (part: string) => {
                                                                                            className: string;
                                                                                            selector: string;
                                                                                            toString: () => string;
                                                                                        };
                                                                                        extend: <U_7_10 extends string>(...parts: U_7_10[]) => Omit<{
                                                                                            parts: any;
                                                                                            toPart: (part: string) => {
                                                                                                className: string;
                                                                                                selector: string;
                                                                                                toString: () => string;
                                                                                            };
                                                                                            extend: <U_8_10 extends string>(...parts: U_8_10[]) => Omit<{
                                                                                                parts: any;
                                                                                                toPart: (part: string) => {
                                                                                                    className: string;
                                                                                                    selector: string;
                                                                                                    toString: () => string;
                                                                                                };
                                                                                                extend: <U_9_10 extends string>(...parts: U_9_10[]) => Omit<any, "parts">;
                                                                                                selectors: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10 | U_8_10, string>;
                                                                                                classnames: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10 | U_8_10, string>;
                                                                                                keys: (V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10 | U_8_10)[];
                                                                                                __type: V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10 | U_8_10;
                                                                                            }, "parts">;
                                                                                            selectors: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10, string>;
                                                                                            classnames: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10, string>;
                                                                                            keys: (V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10)[];
                                                                                            __type: V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10 | U_7_10;
                                                                                        }, "parts">;
                                                                                        selectors: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10, string>;
                                                                                        classnames: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10, string>;
                                                                                        keys: (V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10)[];
                                                                                        __type: V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10 | U_6_10;
                                                                                    }, "parts">;
                                                                                    selectors: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10, string>;
                                                                                    classnames: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10, string>;
                                                                                    keys: (V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10)[];
                                                                                    __type: V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10 | U_5_10;
                                                                                }, "parts">;
                                                                                selectors: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10, string>;
                                                                                classnames: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10, string>;
                                                                                keys: (V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10)[];
                                                                                __type: V_10 | U_20 | U_1_10 | U_2_10 | U_3_10 | U_4_10;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10, string>;
                                                                            classnames: () => Record<V_10 | U_20 | U_1_10 | U_2_10 | U_3_10, string>;
                                                                            keys: (V_10 | U_20 | U_1_10 | U_2_10 | U_3_10)[];
                                                                            __type: V_10 | U_20 | U_1_10 | U_2_10 | U_3_10;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_10 | U_20 | U_1_10 | U_2_10, string>;
                                                                        classnames: () => Record<V_10 | U_20 | U_1_10 | U_2_10, string>;
                                                                        keys: (V_10 | U_20 | U_1_10 | U_2_10)[];
                                                                        __type: V_10 | U_20 | U_1_10 | U_2_10;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_10 | U_20 | U_1_10, string>;
                                                                    classnames: () => Record<V_10 | U_20 | U_1_10, string>;
                                                                    keys: (V_10 | U_20 | U_1_10)[];
                                                                    __type: V_10 | U_20 | U_1_10;
                                                                }, "parts">;
                                                                selectors: () => Record<V_10 | U_20, string>;
                                                                classnames: () => Record<V_10 | U_20, string>;
                                                                keys: (V_10 | U_20)[];
                                                                __type: V_10 | U_20;
                                                            }, "parts">;
                                                            selectors: () => Record<V_10, string>;
                                                            classnames: () => Record<V_10, string>;
                                                            keys: V_10[];
                                                            __type: V_10;
                                                        }, "parts">;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_20 extends string>(...parts: U_20[]) => Omit<any, "parts">;
                                                        selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19, string>;
                                                        classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19, string>;
                                                        keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19)[];
                                                        __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19;
                                                    }, "parts">;
                                                    selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18, string>;
                                                    classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18, string>;
                                                    keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18)[];
                                                    __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18;
                                                }, "parts">;
                                                selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17, string>;
                                                classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17, string>;
                                                keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17)[];
                                                __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17;
                                            }, "parts">;
                                            selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16, string>;
                                            classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16, string>;
                                            keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16)[];
                                            __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16;
                                        }, "parts">;
                                        selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15, string>;
                                        classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15, string>;
                                        keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15)[];
                                        __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15;
                                    }, "parts">;
                                    selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14, string>;
                                    classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14, string>;
                                    keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14)[];
                                    __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13 | U_14;
                                }, "parts">;
                                selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13, string>;
                                classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13, string>;
                                keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13)[];
                                __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12 | U_13;
                            }, "parts">;
                            selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12, string>;
                            classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12, string>;
                            keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12)[];
                            __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11 | U_12;
                        }, "parts">;
                        selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11, string>;
                        classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10 | U_11, string>;
                        keys: ("button" | "icon" | "container" | "root" | "panel" | U_10 | U_11)[];
                        __type: "button" | "icon" | "container" | "root" | "panel" | U_10 | U_11;
                    }, "parts">;
                    selectors: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10, string>;
                    classnames: () => Record<"button" | "icon" | "container" | "root" | "panel" | U_10, string>;
                    keys: ("button" | "icon" | "container" | "root" | "panel" | U_10)[];
                    __type: "button" | "icon" | "container" | "root" | "panel" | U_10;
                }, "parts">;
                selectors: () => Record<"button" | "icon" | "container" | "root" | "panel", string>;
                classnames: () => Record<"button" | "icon" | "container" | "root" | "panel", string>;
                keys: ("button" | "icon" | "container" | "root" | "panel")[];
                __type: "button" | "icon" | "container" | "root" | "panel";
            }, "parts">>;
        };
        defaultProps: {
            colorScheme: string;
        };
    };
    Avatar: {
        baseStyle?: {
            badge: {
                bg: string;
                border: string;
                transform: string;
            };
        } | undefined;
        sizes?: {
            '2xs': {
                container: {
                    width: string;
                    height: string;
                    textStyle: string;
                    fontSize: string;
                };
                label: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                excessLabel: {
                    width: string;
                    height: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                badge: import("@chakra-ui/styled-system").SystemStyleObject;
            };
            xs: {
                container: {
                    width: string;
                    height: string;
                    textStyle: string;
                    fontSize: string;
                };
                label: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                excessLabel: {
                    width: string;
                    height: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                badge: import("@chakra-ui/styled-system").SystemStyleObject;
            };
            sm: {
                container: {
                    width: string;
                    height: string;
                    textStyle: string;
                    fontSize: string;
                };
                label: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                excessLabel: {
                    width: string;
                    height: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                badge: import("@chakra-ui/styled-system").SystemStyleObject;
            };
            md: {
                container: {
                    width: string;
                    height: string;
                    textStyle: string;
                    fontSize: string;
                };
                label: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                excessLabel: {
                    width: string;
                    height: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                badge: import("@chakra-ui/styled-system").SystemStyleObject;
            };
            lg: {
                badge: import("@chakra-ui/styled-system").SystemStyleObject;
            };
            xl: {
                badge: import("@chakra-ui/styled-system").SystemStyleObject;
            };
        } | undefined;
        variants?: {
            subtle: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                container: {
                    bg: string;
                    color: string;
                };
            };
            solid: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                container: {
                    bg: string;
                    color: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | "xl" | "2xs" | "xs" | undefined;
            variant?: "solid" | "subtle" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("label" | "group" | "container" | "badge" | "excessLabel")[];
    };
    AvatarMenu: {
        baseStyle?: {
            button: {
                px: string;
                bg: string;
                color: string;
                _hover: {
                    bg: string;
                };
                _active: {
                    bg: string;
                };
                _focusVisible: {
                    outline: string;
                };
            };
            avatar: {
                transitionProperty: string;
                transitionDuration: string;
                _groupFocus: {
                    boxShadow: string;
                    outline: string;
                    outlineOffset: string;
                    _dark: {
                        outline: string;
                    };
                };
                _groupActive: {
                    boxShadow: string;
                    outline: string;
                    outlineOffset: string;
                    _dark: {
                        outline: string;
                    };
                };
            };
        } | undefined;
        sizes?: {
            md: {
                list: {
                    mt: string;
                };
            };
        } | undefined;
        variants?: {
            subtle: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                avatar: {
                    _groupActive: {
                        bg: string;
                    };
                    _groupHover: {
                        bg: string;
                    };
                };
            };
            solid: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                avatar: {
                    _groupActive: {
                        bg: string;
                    };
                    _groupHover: {
                        bg: string;
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "md" | undefined;
            variant?: "solid" | "subtle" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("button" | "list" | "avatar")[];
    };
    Badge: {
        baseStyle: {
            textTransform: string;
            display: string;
            alignItems: string;
            fontWeight: number;
            lineHeight: string;
            fontSize: string;
            letterSpacing: number;
            fontFamily: string;
        };
        variants: {
            solid: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                bg: any;
                color: any;
            };
            subtle: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                bgColor: any;
                color: any;
            };
            clear: ({ colorScheme: c }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                color: string;
                accentColor: string;
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: number;
                fontFamily: string;
            };
        };
        sizes: Record<string, import("@chakra-ui/styled-system").SystemStyleObject>;
        defaultProps: {
            variant: string;
            size: string;
            colorScheme: string;
        };
    };
    Banner: {
        baseStyle?: {
            item: {
                display: string;
                justifyContent: string;
            };
        } | undefined;
        sizes?: {
            md: {
                item: {
                    py: ("1rem" | "0.5rem")[];
                    px: string;
                };
                icon: {
                    fontSize: string;
                    mr: string;
                };
                close: {
                    padding: number;
                    ml: string;
                    mr: string;
                    fontSize: string;
                    w: string;
                    h: string;
                };
            };
        } | undefined;
        variants?: {
            info: {
                banner: {
                    color: string;
                    bg: string;
                };
                link: {
                    _focusVisible: {
                        boxShadow: string;
                        outline: string;
                        outlineOffset: string;
                    };
                    color: string;
                    _hover: {
                        color: string;
                    };
                };
                close: {
                    _focusVisible: {
                        boxShadow: string;
                        outline: string;
                        outlineOffset: string;
                    };
                    color: string;
                };
            };
            warn: {
                banner: {
                    color: string;
                    bg: string;
                };
                link: {
                    _focusVisible: {
                        boxShadow: string;
                        outline: string;
                        outlineOffset: string;
                        _dark: {
                            outline: string;
                        };
                    };
                    color: string;
                    _hover: {
                        color: string;
                    };
                };
                close: {
                    _focusVisible: {
                        boxShadow: string;
                        outline: string;
                        outlineOffset: string;
                        _dark: {
                            outline: string;
                        };
                    };
                    color: string;
                };
            };
            error: {
                banner: {
                    color: string;
                    bg: string;
                };
                link: {
                    _focusVisible: {
                        boxShadow: string;
                        outline: string;
                        outlineOffset: string;
                    };
                    color: string;
                    _hover: {
                        color: string;
                    };
                };
                close: {
                    _focusVisible: {
                        boxShadow: string;
                        outline: string;
                        outlineOffset: string;
                    };
                    color: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "md" | undefined;
            variant?: "info" | "error" | "warn" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("link" | "banner" | "icon" | "item" | "close")[];
    };
    Button: {
        baseStyle?: {
            _focusVisible: {
                boxShadow: string;
                outline: string;
                outlineOffset: string;
                _dark: {
                    outline: string;
                };
            };
            whiteSpace: string;
            borderRadius: string;
            border: string;
            flexShrink: number;
            px: string;
            py: string;
            _disabled: {
                bg: string;
                borderColor: string;
                opacity: number;
                color: string;
            };
            fontWeight: number;
            lineHeight: string;
            fontSize: string;
            letterSpacing: string;
            fontFamily: string;
        } | undefined;
        sizes?: {
            xs: {
                minH: string;
                minW: string;
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: number;
                fontFamily: string;
            };
            sm: {
                minH: string;
                minW: string;
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: string;
                fontFamily: string;
            };
            md: {
                minH: string;
                minW: string;
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: string;
                fontFamily: string;
            };
            lg: {
                minH: string;
                minW: string;
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: string;
                fontFamily: string;
            };
        } | undefined;
        variants?: {
            solid: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                bg: string;
                borderColor: string;
                color: string;
                px: string;
                _active: {
                    bg: string;
                    borderColor: string;
                };
                _hover: {
                    bg: string;
                    borderColor: string;
                    _disabled: {
                        bg: string;
                        borderColor: string;
                    };
                };
            };
            reverse: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                bg: string;
                borderColor: string;
                color: string;
                px: string;
                _disabled: {
                    bg: string;
                    borderColor: string;
                };
                _active: {
                    bg: string;
                };
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
            };
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                bg: string;
                px: string;
                borderColor: string;
                color: string;
                _disabled: {
                    borderColor: string;
                    bg: string;
                };
                _active: {
                    bg: string;
                    borderColor: string;
                };
                _hover: {
                    bg: string;
                    borderColor: string;
                    _disabled: {
                        borderColor: string;
                        bg: string;
                    };
                };
            };
            clear: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                bg: string;
                px: string;
                borderColor: string;
                color: string;
                _disabled: {
                    borderColor: string;
                    bg: string;
                };
                _active: {
                    bg: string;
                    borderColor: string;
                };
                _hover: {
                    bg: string;
                    borderColor: string;
                    _disabled: {
                        borderColor: string;
                        bg: string;
                    };
                };
            };
            link: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                outlineOffset: number;
                height: string;
                width: string;
                position: string;
                textUnderlineOffset: string;
                color: string;
                _dark: {
                    color: string;
                    _hover: {
                        color: string;
                    };
                };
                borderRadius: string;
                _hover: {
                    color: string;
                    _disabled: {
                        color: string;
                    };
                };
                _disabled: {
                    color: string;
                    cursor: string;
                };
                _focusVisible: {
                    outlineOffset: number;
                    boxShadow: string;
                    outline: string;
                    _dark: {
                        outline: string;
                    };
                };
            } & {
                p: string;
                textStyle: {
                    sm: string;
                    md: string;
                };
                _hover: {
                    textDecorationLine: string;
                };
            } & {
                border: string;
                minHeight: string;
                fontWeight: string;
                w: string;
                _disabled: {
                    bg: string;
                };
            };
            inputAttached: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                bg: string;
                color: string;
                borderColor: string;
                borderStartRadius: number;
                borderEndRadius: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
                outlineOffset: number;
                _active: {
                    color: string;
                    _disabled: {
                        color: string;
                    };
                };
                _invalid: {
                    borderColor: any;
                };
                _focus: {
                    zIndex: number;
                    borderColor: any;
                    boxShadow: string;
                };
                _focusVisible: {
                    boxShadow: string;
                    outline: string;
                };
                _disabled: {
                    bg: string;
                    borderColor: string;
                    color: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | "xs" | undefined;
            variant?: "link" | "clear" | "outline" | "solid" | "reverse" | "inputAttached" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Calendar: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            container: {
                display: string;
            };
            monthYearSelectorContainer: {
                display: string;
                justifyContent: string;
                alignItems: string;
            };
            monthYearSelect: {
                borderColor: string;
                cursor: string;
                _hover: {
                    borderColor: string;
                };
                _focusVisible: {
                    boxShadow: string;
                    outline: string;
                    outlineOffset: string;
                    _dark: {
                        outline: string;
                    };
                };
                borderRadius: string;
                color: string;
                height: string;
                py: string;
            };
            monthYearDisplay: {
                borderRadius: string;
                color: string;
                height: string;
                py: string;
            };
            monthYearDropdownContainer: {
                display: string;
                justifyContent: string;
            };
            monthArrowContainer: {
                display: string;
                justifyContent: string;
            };
            calendarContainer: {
                display: {
                    base: "block";
                    md: "flex";
                };
            };
            monthGrid: {
                w: string;
                justifyItems: string;
            };
            dayNamesContainer: {
                color: string;
            };
            dayOfMonthContainer: {
                justifyContent: string;
                _focusWithin: {
                    zIndex: number;
                };
            };
            dayOfMonth: {
                display: string;
                borderRadius: string;
                color: string;
                outline: string;
                border: string;
                borderColor: string | undefined;
                _hover: {
                    bg: string;
                };
                _active: {
                    bg: string;
                    color: string;
                };
                _selected: {
                    bg: string;
                };
                _focus: {
                    boxShadow: string;
                    outline: string;
                    outlineOffset: string;
                    _dark: {
                        outline: string;
                    };
                };
                _disabled: {
                    _hover: {
                        bg: string;
                    };
                    color: string;
                    cursor: string;
                    bg: string;
                    textDecor: string;
                    borderColor: string;
                };
            };
            todayLinkContainer: {
                textAlign: string;
            };
        }) | undefined;
        sizes?: {
            xs: {
                dayOfMonth: {
                    textStyle: string;
                    p: string;
                    aspectRatio: string;
                    w: string;
                    minW: string;
                };
                dayNamesContainer: {
                    textStyle: string;
                    color: string;
                    w: string;
                    minW: string;
                    h: string;
                };
                monthYearSelectorContainer: {
                    h: string;
                };
                monthYearSelect: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                    pl: string;
                };
                monthYearDisplay: {
                    pl: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                calendarContainer: {
                    pb: string;
                    px: string;
                    mb: string;
                };
                todayLinkContainer: {
                    py: string;
                };
                todayLink: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                    textStyle: string;
                };
            };
            sm: {
                dayOfMonth: {
                    textStyle: string;
                    p: string;
                    aspectRatio: string;
                    w: string;
                    minW: string;
                };
                dayNamesContainer: {
                    textStyle: string;
                    color: string;
                    w: string;
                    minW: string;
                    h: string;
                };
                monthYearSelectorContainer: {
                    h: string;
                };
                monthYearSelect: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                    pl: string;
                };
                monthYearDisplay: {
                    pl: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                calendarContainer: {
                    pb: string;
                    px: string;
                    mb: string;
                };
                todayLinkContainer: {
                    py: string;
                };
                todayLink: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                    textStyle: string;
                };
            };
            md: {
                dayOfMonth: {
                    textStyle: string;
                    p: string;
                    aspectRatio: string;
                    w: string;
                    minW: string;
                    maxW: string;
                };
                monthYearSelectorContainer: {
                    pt: string;
                    h: string;
                };
                monthYearSelect: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: string;
                    fontFamily: string;
                    pl: string;
                };
                monthYearDisplay: {
                    pl: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: string;
                    fontFamily: string;
                };
                calendarContainer: {
                    pb: string;
                    px: string;
                    mb: string;
                };
                dayNamesContainer: {
                    textStyle: string;
                    w: string;
                    h: string;
                };
                todayLinkContainer: {
                    py: string;
                };
                todayLink: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: string;
                    fontFamily: string;
                    textStyle: string;
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("container" | "monthYearDisplay" | "monthYearSelect" | "monthYearSelectorContainer" | "monthArrowContainer" | "dayOfMonthContainer" | "dayOfMonth" | "calendarContainer" | "monthGrid" | "dayNamesContainer" | "todayLinkContainer" | "todayLink" | "monthYearDropdownContainer")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "monthYearDisplay" | "monthYearSelect" | "monthYearSelectorContainer" | "monthArrowContainer" | "dayOfMonthContainer" | "dayOfMonth" | "calendarContainer" | "monthGrid" | "dayNamesContainer" | "todayLinkContainer" | "todayLink" | "monthYearDropdownContainer")[];
    };
    Checkbox: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            control: {
                bg: string;
                borderRadius: string;
                border: string;
                borderColor: string;
                _checked: {
                    bg: string | undefined;
                    borderColor: string;
                };
                alignSelf: string;
                _focus: {
                    boxShadow: string;
                };
                _disabled: {
                    borderColor: string;
                    bg: string;
                    _checked: {
                        borderColor: string;
                        bg: string;
                    };
                };
            };
            container: {
                w: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
                _focusWithin: {
                    outlineOffset: number;
                    boxShadow: string;
                    outline: string;
                    _dark: {
                        outline: string;
                    };
                };
            };
            label: {
                _disabled: {
                    color: string;
                    opacity: number;
                };
                color: string;
            };
            icon: {
                color: string;
                transform: string;
                transition: string;
            };
            othersContainer: {
                display: string;
                flexDirection: string;
                cursor: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
                _focusWithin: {
                    outlineOffset: number;
                    boxShadow: string;
                    outline: string;
                    _dark: {
                        outline: string;
                    };
                };
            };
            othersCheckbox: {
                cursor: string;
                display: string;
                alignItems: string;
                _focusWithin: {
                    boxShadow: string;
                };
                _hover: {
                    bg: string;
                };
                w: string;
            };
            othersInput: {
                addon: {
                    borderRadius: string;
                };
                field: {
                    borderRadius: string;
                    bg: string;
                    border: string;
                    borderColor: string;
                    _placeholder: {
                        color: string;
                    };
                    _hover: {
                        borderColor: string;
                    };
                    _invalid: {
                        borderColor: any;
                        boxShadow: string;
                    };
                    _focusVisible: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    };
                };
                success: {
                    pointerEvents: string;
                    color: string;
                };
            } | undefined;
        }) | undefined;
        sizes?: {
            xs: {
                control: {
                    w: string;
                    h: string;
                    mt: string;
                };
                icon: {
                    fontSize: string;
                };
                label: {
                    ml: string;
                    textStyle: string;
                };
                container: {
                    px: string;
                    py: string;
                };
                othersContainer: {
                    px: string;
                    py: string;
                };
                othersInput: {
                    ml: string;
                    mt: string;
                    w: string;
                };
            };
            sm: {
                control: {
                    w: string;
                    h: string;
                };
                icon: {
                    fontSize: string;
                };
                label: {
                    textStyle: string;
                    ml: string;
                };
                container: {
                    px: string;
                    py: string;
                };
                othersContainer: {
                    px: string;
                    py: string;
                };
                othersInput: {
                    ml: string;
                    mt: string;
                    w: string;
                };
            };
            md: {
                control: {
                    w: string;
                    h: string;
                };
                icon: {
                    fontSize: string;
                };
                label: {
                    textStyle: string;
                    ml: string;
                };
                container: {
                    px: string;
                    py: string;
                };
                othersContainer: {
                    px: string;
                    py: string;
                };
                othersInput: {
                    ml: string;
                    mt: string;
                    w: string;
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("label" | "icon" | "container" | "othersCheckbox" | "othersInput" | "othersContainer" | "control")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("label" | "icon" | "container" | "othersCheckbox" | "othersInput" | "othersContainer" | "control")[];
    };
    CloseButton: {
        baseStyle?: {
            p: number;
            _focusVisible: {
                boxShadow: string;
                outline: string;
                outlineOffset: string;
                _dark: {
                    outline: string;
                };
            };
            w: string[];
            h: string[];
        } | undefined;
        sizes?: {
            lg: {
                [x: string]: string | undefined;
            };
            md: {
                [x: string]: string | undefined;
            };
            sm: {
                [x: string]: string | undefined;
            };
            xs: {
                [x: string]: string | undefined;
            };
        } | undefined;
        variants?: {
            clear: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                px: string;
                bg?: string | undefined;
                borderColor?: string | undefined;
                color?: string | undefined;
                _disabled?: {
                    borderColor: string;
                    bg: string;
                } | undefined;
                _active?: {
                    bg: string;
                    borderColor: string;
                } | undefined;
                _hover?: {
                    bg: string;
                    borderColor: string;
                    _disabled: {
                        borderColor: string;
                        bg: string;
                    };
                } | undefined;
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | "xs" | undefined;
            variant?: "clear" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    DatePicker: {
        baseStyle?: {
            header: {
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: number;
                fontFamily: string;
                h: string;
                display: string;
                justifyContent: string;
                alignItems: string;
                color: string;
                px: string;
            };
            inputButton: {
                color: string;
                _groupDisabled: {
                    color: string;
                };
            };
        } | undefined;
        sizes?: {
            xs: {
                inputButton: {
                    fontSize: string;
                };
            };
            sm: {
                inputButton: {
                    fontSize: string;
                };
            };
            md: {
                inputButton: {
                    fontSize: string;
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("header" | "inputButton")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("header" | "inputButton")[];
    };
    DateRangePicker: {
        baseStyle?: {
            header: {
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: number;
                fontFamily: string;
                h: string;
                display: string;
                justifyContent: string;
                alignItems: string;
                color: string;
                px: string;
            };
            inputButton: {
                color: string;
                _groupDisabled: {
                    color: string;
                };
            };
        } | undefined;
        sizes?: {
            xs: {
                fieldwrapper: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                } | undefined;
                inputButton: {
                    fontSize: string;
                } | undefined;
            };
            sm: {
                fieldwrapper: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                } | undefined;
                inputButton: {
                    fontSize: string;
                } | undefined;
            };
            md: {
                fieldwrapper: {
                    px: string;
                    h: string;
                    textStyle: string;
                    fontSize: string;
                } | undefined;
                inputButton: {
                    fontSize: string;
                } | undefined;
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                fieldwrapper: {
                    cursor: string;
                    flex: number;
                    zIndex: number;
                    px: string;
                    borderEndRadius: string;
                    marginInlineEnd: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    _focusWithin: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    borderRadius?: string | undefined;
                    bg?: string | undefined;
                    border?: string | undefined;
                    borderColor?: string | undefined;
                    _placeholder?: {
                        color: string;
                    } | undefined;
                    _hover?: {
                        borderColor: string;
                    } | undefined;
                    _invalid?: {
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _focusVisible?: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _disabled?: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    } | undefined;
                };
                field: {
                    _disabled: {
                        cursor: string;
                    };
                    transitionProperty: string;
                    transitionDuration: string;
                    display: string;
                    flex: number;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("header" | "field" | "inputButton" | "fieldwrapper")[];
    };
    Divider: {
        baseStyle?: {
            opacity: number;
            borderStyle: string;
            _dark: {
                borderColor: string;
            };
        } | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").SystemStyleInterpolation;
        } | undefined;
        variants?: {
            light: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                borderWidth: string;
            };
            medium: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                borderWidth: string;
            };
            thick: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                borderWidth: string;
            };
            brand: {
                borderColor: string;
                _dark: {
                    borderColor: string;
                };
                borderWidth: string;
            };
            inverse: {
                borderColor: string;
                borderWidth: string;
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "medium" | "thick" | "light" | "inverse" | "brand" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Drawer: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            overlay: {
                bg: string;
            } | undefined;
        }) | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
    };
    Footer: {
        baseStyle?: {
            link: {
                m: string;
                textStyle: string;
                width: string;
            };
        } | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("link" | "section" | "container" | "brandContainer")[];
            }>;
        } | undefined;
        variants?: {
            full: {
                container: {
                    display: string;
                    flexDirection: string;
                    bg: string;
                    _dark: {
                        bg: string;
                    };
                    py: string;
                    px: {
                        base: "1.5rem";
                        md: "5.5rem";
                        lg: "9.25rem";
                    };
                };
                section: {
                    display: string;
                    alignItems: {
                        base: "normal";
                        lg: "center";
                    };
                    flex: number;
                    justifyContent: string;
                    flexDirection: {
                        base: "column";
                        lg: "row";
                    };
                };
                brandContainer: {
                    display: string;
                    flex: number;
                    gap: {
                        base: number;
                        lg: string;
                    };
                    paddingBottom: {
                        base: "1.5rem";
                        lg: number;
                    };
                    paddingEnd: {
                        base: number;
                        lg: "1.5rem";
                    };
                };
            };
            compact: {
                container: {
                    px: string;
                    display: string;
                    alignItems: string;
                    width: string;
                    justifyContent: string;
                    flexDirection: string;
                };
                brandContainer: {
                    height: string;
                    alignItems: string;
                    gap: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "compact" | "full" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("link" | "section" | "container" | "brandContainer")[];
    };
    Form: {
        baseStyle?: {
            requiredIndicator: {
                [x: string]: string;
                marginStart: string;
                color: string;
            };
            helperText: {
                mt: number;
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: number;
                fontFamily: string;
                color: string;
            };
            optionalIndicator: {
                ml: string;
                lineHeight: number;
                fontWeight: number;
                fontSize: string;
                letterSpacing: number;
                fontFamily: string;
                color: string;
            };
            icon: {
                marginEnd: string;
                fontSize: string;
                height: string;
                verticalAlign: string;
            };
        } | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("icon" | "container" | "helperText" | "requiredIndicator" | "optionalIndicator")[];
            }>;
        } | undefined;
        variants?: {
            success: {
                helperText: {
                    [x: string]: string;
                    color: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "success" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("icon" | "container" | "helperText" | "requiredIndicator" | "optionalIndicator")[];
    };
    FormError: {
        baseStyle?: {
            text: {
                color: string;
                my: string;
                textStyle: string;
                lineHeight: string;
            };
            icon: {
                marginEnd: string;
                color: string;
                fontSize: string;
                h: string;
            };
        } | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("text" | "icon")[];
            }>;
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("text" | "icon")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("text" | "icon")[];
    };
    FormLabel: {
        baseStyle?: {
            marginBottom: string;
            color: string;
        } | undefined;
        sizes?: {
            sm: {
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: number;
                fontFamily: string;
            };
            md: {
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: string;
                fontFamily: string;
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").SystemStyleInterpolation;
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Infobox: {
        baseStyle?: {
            messagebox: {
                display: string;
                justifyContent: string;
                color: string;
            };
        } | undefined;
        sizes?: {
            sm: {
                messagebox: {
                    p: string;
                    textStyle: string;
                };
                icon: {
                    my: string;
                    fontSize: string;
                    mr: string;
                };
            };
            md: {
                messagebox: {
                    padding: string;
                    textStyle: string;
                };
                icon: {
                    fontSize: string;
                    mr: string;
                };
            };
        } | undefined;
        variants?: {
            info: {
                messagebox: {
                    bg: string;
                };
                icon: {
                    color: string;
                };
            };
            warning: {
                messagebox: {
                    bg: string;
                };
                icon: {
                    color: string;
                };
            };
            error: {
                messagebox: {
                    bg: string;
                };
                icon: {
                    color: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | undefined;
            variant?: "warning" | "info" | "error" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("icon" | "messagebox")[];
    };
    Input: {
        baseStyle?: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
            keys: ("element" | "success" | "field" | "addon")[];
        }> | undefined;
        sizes?: {
            xs: {
                field: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                };
                addon: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                };
                element: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                };
                success: {
                    fontSize: string;
                    textStyle: string;
                    px: string;
                    h: string;
                };
            };
            sm: {
                field: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                };
                addon: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                };
                element: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                };
                success: {
                    fontSize: string;
                    textStyle: string;
                    px: string;
                    h: string;
                };
            };
            md: {
                field: {
                    px: string;
                    h: string;
                    textStyle: string;
                    fontSize: string;
                };
                addon: {
                    px: string;
                    h: string;
                    textStyle: string;
                    fontSize: string;
                };
                element: {
                    px: string;
                    h: string;
                    textStyle: string;
                    fontSize: string;
                };
                success: {
                    fontSize: string;
                    px: string;
                    h: string;
                    textStyle: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                addon: {
                    borderRadius: string;
                };
                field: {
                    borderRadius: string;
                    bg: string;
                    border: string;
                    borderColor: string;
                    _placeholder: {
                        color: string;
                    };
                    _hover: {
                        borderColor: string;
                    };
                    _invalid: {
                        borderColor: any;
                        boxShadow: string;
                    };
                    _focusVisible: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    };
                };
                success: {
                    pointerEvents: string;
                    color: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("element" | "success" | "field" | "addon")[];
    };
    Link: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            outlineOffset: number;
            height: string;
            width: string;
            position: string;
            textUnderlineOffset: string;
            color: string;
            _dark: {
                color: string;
                _hover: {
                    color: string;
                };
            };
            borderRadius: string;
            _hover: {
                color: string;
                _disabled: {
                    color: string;
                };
            };
            _disabled: {
                color: string;
                cursor: string;
            };
            _focusVisible: {
                outlineOffset: number;
                boxShadow: string;
                outline: string;
                _dark: {
                    outline: string;
                };
            };
        }) | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").SystemStyleInterpolation;
        } | undefined;
        variants?: {
            inline: {
                textDecorationLine: string;
            };
            standalone: {
                p: string;
                textStyle: {
                    sm: string;
                    md: string;
                };
                _hover: {
                    textDecorationLine: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "inline" | "standalone" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Menu: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            button: {
                textAlign: string;
                justifyContent: string;
            };
            list: {
                [x: string]: string | number;
                mt: string;
                border: string;
                borderRadius: number;
                minWidth: string;
                boxShadow: string;
            };
            item: {
                bg: string;
                textStyle: string;
                fontWeight: string;
                color: string;
                _hover: {
                    bg: string;
                };
                _disabled: {
                    color: string;
                    opacity: number;
                    cursor: string;
                };
                _focus: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                };
                _focusVisible: {
                    boxShadow: string;
                    _active: {
                        [x: string]: string;
                    };
                };
                _active: {
                    [x: string]: string;
                };
            };
            divider: {
                borderColor: string;
                opacity: number;
                my: number;
            };
        }) | undefined;
        sizes?: {
            sm: {
                chevron: {
                    fontSize: string;
                };
                item: {
                    textStyle: string;
                    padding: string;
                };
            };
            md: {
                chevron: {
                    fontSize: string;
                };
                item: {
                    textStyle: string;
                    padding: string;
                };
            };
        } | undefined;
        variants?: {
            clear: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                button: {
                    bg: string;
                    color: string;
                    _hover: {
                        color: string;
                    };
                    _active: {
                        color: string;
                    };
                };
            };
            outline: {};
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | undefined;
            variant?: "clear" | "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("button" | "list" | "divider" | "chevron" | "item" | "groupTitle" | "command")[];
    };
    Modal: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            overlay: {
                bg: string;
            };
            dialog: {
                borderRadius: string;
                my: string;
                maxH: string | undefined;
                boxShadow: string;
            };
        }) | undefined;
        sizes?: {
            mobile: {
                header: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: string;
                    fontFamily: string;
                    pt: string;
                    pb: string;
                    px: string;
                };
                body: {
                    flex: string;
                };
                dialog: import("@chakra-ui/styled-system").CSSWithMultiValues;
                closeButton: {
                    top: string;
                    insetEnd: string;
                };
            };
            md: {
                dialog: {
                    maxW: string;
                };
                header: {
                    pt: string;
                    pb: string;
                    px: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: string;
                    fontFamily: string;
                };
                closeButton: {
                    top: string;
                    insetEnd: string;
                };
                body: {
                    py: number;
                    px: string;
                };
                footer: {
                    pt: string;
                    pb: string;
                    px: string;
                };
            };
            full: {
                overlay: {
                    bg: string;
                };
                dialog: import("@chakra-ui/styled-system").CSSWithMultiValues;
                header: {
                    p: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: string;
                    fontFamily: string;
                };
                closeButton: {
                    top: string;
                    insetEnd: string;
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "md" | "full" | "mobile" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
    };
    MultiSelect: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            itemContainer: {
                display: string;
                flexWrap: string;
                flexGrow: number;
                my: string;
            };
            fieldwrapper: {
                display: string;
                flexWrap: string;
                cursor: string;
                _disabled: {
                    cursor: string;
                };
                transitionProperty: string;
                transitionDuration: string;
            };
            icon: {
                display: string;
                h: string;
            };
            tagIcon: {
                display: string;
                h: string;
            };
            field: {
                cursor?: string | undefined;
                _disabled: {
                    cursor: string;
                };
                m?: number | undefined;
                minW?: number | undefined;
                minH?: number | undefined;
                h?: number | undefined;
                w?: number | undefined;
                opacity?: number | undefined;
                flexGrow: number;
                width: number;
                bg: string;
                alignSelf: string;
                _focusVisible: {
                    outline: string;
                };
            };
            item?: ({
                bg: string;
                textStyle: string;
                fontWeight: string;
                color: string;
                _hover: {
                    bg: string;
                };
                _disabled: {
                    color: string;
                    opacity: number;
                    cursor: string;
                };
                _focus: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                };
                _focusVisible: {
                    boxShadow: string;
                    _active: {
                        [x: string]: string;
                    };
                };
                _active: {
                    [x: string]: string;
                };
            } & {
                _selected: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                } | undefined;
            }) | undefined;
            highlight?: {
                bg: string;
            } | undefined;
            selected?: {
                zIndex: number;
                gridArea: string;
                alignItems: string;
                pointerEvents: string;
                _disabled: {
                    color: string;
                };
            } | undefined;
            itemDescription?: {
                textStyle: string;
                color: string;
            } | undefined;
            emptyItem?: {
                fontStyle: string;
                cursor: string;
                _hover: {
                    bg: string;
                };
                _active: {
                    bg: string;
                };
                bg: string;
                textStyle: string;
                fontWeight: string;
                color: string;
                _disabled: {
                    color: string;
                    opacity: number;
                    cursor: string;
                };
                _focus: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                };
                _focusVisible: {
                    boxShadow: string;
                    _active: {
                        [x: string]: string;
                    };
                };
                _selected: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                } | undefined;
            } | undefined;
            list?: ({
                [x: string]: string | number;
                mt: string;
                border: string;
                borderRadius: number;
                minWidth: string;
                boxShadow: string;
            } & {
                my: string;
                w: string;
                overflowY: string;
                maxH: string;
                bg: string;
            }) | undefined;
        }) | undefined;
        sizes?: {
            sm: any;
            md: any;
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                fieldwrapper: {
                    zIndex?: number | undefined;
                    borderColor?: any;
                    boxShadow?: string | undefined;
                    _focusWithin: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    borderRadius: string;
                    bg?: string | undefined;
                    border?: string | undefined;
                    _placeholder?: {
                        color: string;
                    } | undefined;
                    _hover?: {
                        borderColor: string;
                    } | undefined;
                    _invalid?: {
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _focusVisible?: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _disabled?: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    } | undefined;
                };
                list?: {
                    py: number;
                } | undefined;
                item?: {
                    cursor: string;
                } | undefined;
                field?: ({
                    borderRadius: string;
                    bg: string;
                    border: string;
                    borderColor: string;
                    _placeholder: {
                        color: string;
                    };
                    _hover: {
                        borderColor: string;
                    };
                    _invalid: {
                        borderColor: any;
                        boxShadow: string;
                    };
                    _focusVisible: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    };
                } & {
                    borderRightRadius: number | undefined;
                    gridArea: string;
                }) | undefined;
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("list" | "icon" | "chevron" | "item" | "field" | "fieldwrapper" | "highlight" | "itemDescription" | "emptyItem" | "tag" | "tagIcon" | "itemContainer")[];
    };
    NumberInput: {
        baseStyle?: {
            root: {
                position: string;
                zIndex: number;
            };
            stepperWrapper: {
                zIndex: number;
                display: string;
                alignItems: string;
                pos: string;
                right: number;
                top: number;
                border: string;
            };
            stepperButton: {
                color: string;
                borderRadius: number;
                minH: string;
                _disabled: {
                    cursor: string;
                };
                _last: {
                    borderRightRadius: string;
                };
            };
        } | undefined;
        sizes?: {
            xs: {
                stepper: {
                    fontSize: string;
                };
                stepperWrapper: {
                    h: string | undefined;
                };
                field: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                } | undefined;
                stepperDivider: {
                    h: string;
                };
            };
            sm: {
                stepper: {
                    fontSize: string;
                };
                stepperWrapper: {
                    h: string | undefined;
                };
                field: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                } | undefined;
                stepperDivider: {
                    h: string;
                };
            };
            md: {
                stepper: {
                    fontSize: string;
                };
                stepperWrapper: {
                    h: string | undefined;
                };
                field: {
                    px: string;
                    h: string;
                    textStyle: string;
                    fontSize: string;
                } | undefined;
                stepperDivider: {
                    h: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                field: {
                    borderRadius: string;
                    bg: string;
                    border: string;
                    borderColor: string;
                    _placeholder: {
                        color: string;
                    };
                    _hover: {
                        borderColor: string;
                    };
                    _invalid: {
                        borderColor: any;
                        boxShadow: string;
                    };
                    _focusVisible: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    };
                } | undefined;
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("field" | "root" | "stepperWrapper" | "stepperButton" | "stepperDivider" | "stepper")[];
    };
    Pagination: {
        baseStyle?: {
            container: {
                display: string;
                justifyContent: string;
            };
            stepper: {
                h: string;
                border: string;
                borderRadius: string;
                cursor: string;
                alignSelf: string;
                color: string;
                bg: string;
                _activeLink: {
                    bg: string;
                    color: string;
                    _hover: {
                        bg: string;
                    };
                    _disabled: {
                        bg: string;
                        color: string;
                    };
                };
                _active: {
                    bg: string;
                };
                _hover: {
                    bg: string;
                };
                _focusVisible: {
                    boxShadow: string;
                };
                _disabled: {
                    cursor: string;
                    color: string;
                    _hover: {
                        bg: string;
                    };
                };
            };
            button: {
                h: string;
                border: string;
                borderRadius: string;
                cursor: string;
                alignSelf: string;
                color: string;
                bg: string;
                _activeLink: {
                    bg: string;
                    color: string;
                    _hover: {
                        bg: string;
                    };
                    _disabled: {
                        bg: string;
                        color: string;
                    };
                };
                _active: {
                    bg: string;
                };
                _hover: {
                    bg: string;
                };
                _focusVisible: {
                    boxShadow: string;
                };
                _disabled: {
                    cursor: string;
                    color: string;
                    _hover: {
                        bg: string;
                    };
                };
            };
        } | undefined;
        sizes?: {
            md: {
                container: {
                    textStyle: string;
                };
                stepper: {
                    px: string;
                    py: string;
                    minH: string;
                    minW: string;
                    fontSize: string;
                    pl: number;
                    pr: number;
                    _first: {
                        mr: string;
                    };
                    _last: {
                        ml: string;
                    };
                };
                separator: {
                    textStyle: string;
                    minW: string;
                };
                button: {
                    p: string;
                    minH: string;
                    minW: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                text: {
                    textStyle: string;
                    p: string;
                };
            };
        } | undefined;
        variants?: {
            full: {
                separator: {
                    display: string;
                    justifyContent: string;
                    alignItems: string;
                    _disabled: {
                        color: string;
                    };
                };
            };
            minimal: {
                text: {
                    alignSelf: string;
                    color: string;
                    _disabled: {
                        color: string;
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "md" | undefined;
            variant?: "full" | "minimal" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("button" | "text" | "separator" | "container" | "stepper")[];
    };
    PhoneNumberInput: {
        baseStyle?: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
            keys: ("icon" | "field" | "selector" | "country")[];
        }> | undefined;
        sizes?: {
            xs: {
                country: {
                    px: string;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                    h?: string | undefined;
                };
                icon: {
                    fontSize: string;
                };
            };
            sm: {
                country: {
                    px: string;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                    h?: string | undefined;
                };
                icon: {
                    fontSize: string;
                };
            };
            md: {
                country: {
                    px: string;
                    h?: string | undefined;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                };
                icon: {
                    fontSize: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                field: {
                    borderLeftRadius: number;
                    borderRadius?: string | undefined;
                    bg?: string | undefined;
                    border?: string | undefined;
                    borderColor?: string | undefined;
                    _placeholder?: {
                        color: string;
                    } | undefined;
                    _hover?: {
                        borderColor: string;
                    } | undefined;
                    _invalid?: {
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _focusVisible?: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _disabled?: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    } | undefined;
                };
                country: {
                    transitionProperty: string;
                    transitionDuration: string;
                    bg: string;
                    border: string;
                    borderColor: string;
                    _disabled: {
                        cursor: string;
                        bg?: string | undefined;
                        borderColor?: string | undefined;
                        color?: string | undefined;
                        opacity?: number | undefined;
                        _hover?: {
                            bg: string;
                        } | undefined;
                        _active?: {
                            bg: string;
                        } | undefined;
                    };
                    _active: {
                        borderColor: any;
                        boxShadow: string;
                        bg: string;
                        _disabled: {
                            boxShadow: string;
                            borderColor: string | undefined;
                        };
                    };
                    _focusWithin: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    };
                    _hover: {
                        bg: string;
                    };
                    pos: string;
                };
                selector: {
                    cursor: string;
                    opacity: number;
                    pos: string;
                    w: string;
                    h: string;
                    left: number;
                    top: number;
                    _disabled: {
                        cursor: string;
                    };
                };
                icon: {
                    mr: string;
                    w: string;
                    _disabled: {
                        opacity: number;
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("icon" | "field" | "selector" | "country")[];
    };
    Progress: {
        baseStyle: import("@chakra-ui/styled-system").PartsStyleFunction<Omit<{
            parts: <V_11 extends string>(...values: V_11[]) => Omit<{
                parts: any;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_21 extends string>(...parts: U_21[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_1_11 extends string>(...parts: U_1_11[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_2_11 extends string>(...parts: U_2_11[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_3_11 extends string>(...parts: U_3_11[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_4_11 extends string>(...parts: U_4_11[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_5_11 extends string>(...parts: U_5_11[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_6_11 extends string>(...parts: U_6_11[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_7_11 extends string>(...parts: U_7_11[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_8_11 extends string>(...parts: U_8_11[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_9_11 extends string>(...parts: U_9_11[]) => Omit<any, "parts">;
                                                    selectors: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11 | U_8_11, string>;
                                                    classnames: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11 | U_8_11, string>;
                                                    keys: (V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11 | U_8_11)[];
                                                    __type: V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11 | U_8_11;
                                                }, "parts">;
                                                selectors: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11, string>;
                                                classnames: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11, string>;
                                                keys: (V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11)[];
                                                __type: V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11 | U_7_11;
                                            }, "parts">;
                                            selectors: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11, string>;
                                            classnames: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11, string>;
                                            keys: (V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11)[];
                                            __type: V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11 | U_6_11;
                                        }, "parts">;
                                        selectors: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11, string>;
                                        classnames: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11, string>;
                                        keys: (V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11)[];
                                        __type: V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11 | U_5_11;
                                    }, "parts">;
                                    selectors: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11, string>;
                                    classnames: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11, string>;
                                    keys: (V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11)[];
                                    __type: V_11 | U_21 | U_1_11 | U_2_11 | U_3_11 | U_4_11;
                                }, "parts">;
                                selectors: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11, string>;
                                classnames: () => Record<V_11 | U_21 | U_1_11 | U_2_11 | U_3_11, string>;
                                keys: (V_11 | U_21 | U_1_11 | U_2_11 | U_3_11)[];
                                __type: V_11 | U_21 | U_1_11 | U_2_11 | U_3_11;
                            }, "parts">;
                            selectors: () => Record<V_11 | U_21 | U_1_11 | U_2_11, string>;
                            classnames: () => Record<V_11 | U_21 | U_1_11 | U_2_11, string>;
                            keys: (V_11 | U_21 | U_1_11 | U_2_11)[];
                            __type: V_11 | U_21 | U_1_11 | U_2_11;
                        }, "parts">;
                        selectors: () => Record<V_11 | U_21 | U_1_11, string>;
                        classnames: () => Record<V_11 | U_21 | U_1_11, string>;
                        keys: (V_11 | U_21 | U_1_11)[];
                        __type: V_11 | U_21 | U_1_11;
                    }, "parts">;
                    selectors: () => Record<V_11 | U_21, string>;
                    classnames: () => Record<V_11 | U_21, string>;
                    keys: (V_11 | U_21)[];
                    __type: V_11 | U_21;
                }, "parts">;
                selectors: () => Record<V_11, string>;
                classnames: () => Record<V_11, string>;
                keys: V_11[];
                __type: V_11;
            }, "parts">;
            toPart: (part: string) => {
                className: string;
                selector: string;
                toString: () => string;
            };
            extend: <U_22 extends string>(...parts: U_22[]) => Omit<{
                parts: <V_12 extends string>(...values: V_12[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_23 extends string>(...parts: U_23[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_1_12 extends string>(...parts: U_1_12[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_2_12 extends string>(...parts: U_2_12[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_3_12 extends string>(...parts: U_3_12[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_4_12 extends string>(...parts: U_4_12[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_5_12 extends string>(...parts: U_5_12[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_6_12 extends string>(...parts: U_6_12[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_7_12 extends string>(...parts: U_7_12[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_8_12 extends string>(...parts: U_8_12[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_9_12 extends string>(...parts: U_9_12[]) => Omit<any, "parts">;
                                                        selectors: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12 | U_8_12, string>;
                                                        classnames: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12 | U_8_12, string>;
                                                        keys: (V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12 | U_8_12)[];
                                                        __type: V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12 | U_8_12;
                                                    }, "parts">;
                                                    selectors: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12, string>;
                                                    classnames: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12, string>;
                                                    keys: (V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12)[];
                                                    __type: V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12 | U_7_12;
                                                }, "parts">;
                                                selectors: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12, string>;
                                                classnames: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12, string>;
                                                keys: (V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12)[];
                                                __type: V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12 | U_6_12;
                                            }, "parts">;
                                            selectors: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12, string>;
                                            classnames: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12, string>;
                                            keys: (V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12)[];
                                            __type: V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12 | U_5_12;
                                        }, "parts">;
                                        selectors: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12, string>;
                                        classnames: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12, string>;
                                        keys: (V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12)[];
                                        __type: V_12 | U_23 | U_1_12 | U_2_12 | U_3_12 | U_4_12;
                                    }, "parts">;
                                    selectors: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12, string>;
                                    classnames: () => Record<V_12 | U_23 | U_1_12 | U_2_12 | U_3_12, string>;
                                    keys: (V_12 | U_23 | U_1_12 | U_2_12 | U_3_12)[];
                                    __type: V_12 | U_23 | U_1_12 | U_2_12 | U_3_12;
                                }, "parts">;
                                selectors: () => Record<V_12 | U_23 | U_1_12 | U_2_12, string>;
                                classnames: () => Record<V_12 | U_23 | U_1_12 | U_2_12, string>;
                                keys: (V_12 | U_23 | U_1_12 | U_2_12)[];
                                __type: V_12 | U_23 | U_1_12 | U_2_12;
                            }, "parts">;
                            selectors: () => Record<V_12 | U_23 | U_1_12, string>;
                            classnames: () => Record<V_12 | U_23 | U_1_12, string>;
                            keys: (V_12 | U_23 | U_1_12)[];
                            __type: V_12 | U_23 | U_1_12;
                        }, "parts">;
                        selectors: () => Record<V_12 | U_23, string>;
                        classnames: () => Record<V_12 | U_23, string>;
                        keys: (V_12 | U_23)[];
                        __type: V_12 | U_23;
                    }, "parts">;
                    selectors: () => Record<V_12, string>;
                    classnames: () => Record<V_12, string>;
                    keys: V_12[];
                    __type: V_12;
                }, "parts">;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_1_13 extends string>(...parts: U_1_13[]) => Omit<{
                    parts: <V_13 extends string>(...values: V_13[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_24 extends string>(...parts: U_24[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_1_14 extends string>(...parts: U_1_14[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_2_13 extends string>(...parts: U_2_13[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_3_13 extends string>(...parts: U_3_13[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_4_13 extends string>(...parts: U_4_13[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_5_13 extends string>(...parts: U_5_13[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_6_13 extends string>(...parts: U_6_13[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_7_13 extends string>(...parts: U_7_13[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_8_13 extends string>(...parts: U_8_13[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_9_13 extends string>(...parts: U_9_13[]) => Omit<any, "parts">;
                                                            selectors: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13 | U_8_13, string>;
                                                            classnames: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13 | U_8_13, string>;
                                                            keys: (V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13 | U_8_13)[];
                                                            __type: V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13 | U_8_13;
                                                        }, "parts">;
                                                        selectors: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13, string>;
                                                        classnames: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13, string>;
                                                        keys: (V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13)[];
                                                        __type: V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13 | U_7_13;
                                                    }, "parts">;
                                                    selectors: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13, string>;
                                                    classnames: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13, string>;
                                                    keys: (V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13)[];
                                                    __type: V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13 | U_6_13;
                                                }, "parts">;
                                                selectors: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13, string>;
                                                classnames: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13, string>;
                                                keys: (V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13)[];
                                                __type: V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13 | U_5_13;
                                            }, "parts">;
                                            selectors: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13, string>;
                                            classnames: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13, string>;
                                            keys: (V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13)[];
                                            __type: V_13 | U_24 | U_1_14 | U_2_13 | U_3_13 | U_4_13;
                                        }, "parts">;
                                        selectors: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13, string>;
                                        classnames: () => Record<V_13 | U_24 | U_1_14 | U_2_13 | U_3_13, string>;
                                        keys: (V_13 | U_24 | U_1_14 | U_2_13 | U_3_13)[];
                                        __type: V_13 | U_24 | U_1_14 | U_2_13 | U_3_13;
                                    }, "parts">;
                                    selectors: () => Record<V_13 | U_24 | U_1_14 | U_2_13, string>;
                                    classnames: () => Record<V_13 | U_24 | U_1_14 | U_2_13, string>;
                                    keys: (V_13 | U_24 | U_1_14 | U_2_13)[];
                                    __type: V_13 | U_24 | U_1_14 | U_2_13;
                                }, "parts">;
                                selectors: () => Record<V_13 | U_24 | U_1_14, string>;
                                classnames: () => Record<V_13 | U_24 | U_1_14, string>;
                                keys: (V_13 | U_24 | U_1_14)[];
                                __type: V_13 | U_24 | U_1_14;
                            }, "parts">;
                            selectors: () => Record<V_13 | U_24, string>;
                            classnames: () => Record<V_13 | U_24, string>;
                            keys: (V_13 | U_24)[];
                            __type: V_13 | U_24;
                        }, "parts">;
                        selectors: () => Record<V_13, string>;
                        classnames: () => Record<V_13, string>;
                        keys: V_13[];
                        __type: V_13;
                    }, "parts">;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_2_14 extends string>(...parts: U_2_14[]) => Omit<{
                        parts: <V_14 extends string>(...values: V_14[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_25 extends string>(...parts: U_25[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_1_15 extends string>(...parts: U_1_15[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_2_15 extends string>(...parts: U_2_15[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_3_14 extends string>(...parts: U_3_14[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_4_14 extends string>(...parts: U_4_14[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_5_14 extends string>(...parts: U_5_14[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_6_14 extends string>(...parts: U_6_14[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_7_14 extends string>(...parts: U_7_14[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_8_14 extends string>(...parts: U_8_14[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_9_14 extends string>(...parts: U_9_14[]) => Omit<any, "parts">;
                                                                selectors: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14 | U_8_14, string>;
                                                                classnames: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14 | U_8_14, string>;
                                                                keys: (V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14 | U_8_14)[];
                                                                __type: V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14 | U_8_14;
                                                            }, "parts">;
                                                            selectors: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14, string>;
                                                            classnames: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14, string>;
                                                            keys: (V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14)[];
                                                            __type: V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14 | U_7_14;
                                                        }, "parts">;
                                                        selectors: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14, string>;
                                                        classnames: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14, string>;
                                                        keys: (V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14)[];
                                                        __type: V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14 | U_6_14;
                                                    }, "parts">;
                                                    selectors: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14, string>;
                                                    classnames: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14, string>;
                                                    keys: (V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14)[];
                                                    __type: V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14 | U_5_14;
                                                }, "parts">;
                                                selectors: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14, string>;
                                                classnames: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14, string>;
                                                keys: (V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14)[];
                                                __type: V_14 | U_25 | U_1_15 | U_2_15 | U_3_14 | U_4_14;
                                            }, "parts">;
                                            selectors: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14, string>;
                                            classnames: () => Record<V_14 | U_25 | U_1_15 | U_2_15 | U_3_14, string>;
                                            keys: (V_14 | U_25 | U_1_15 | U_2_15 | U_3_14)[];
                                            __type: V_14 | U_25 | U_1_15 | U_2_15 | U_3_14;
                                        }, "parts">;
                                        selectors: () => Record<V_14 | U_25 | U_1_15 | U_2_15, string>;
                                        classnames: () => Record<V_14 | U_25 | U_1_15 | U_2_15, string>;
                                        keys: (V_14 | U_25 | U_1_15 | U_2_15)[];
                                        __type: V_14 | U_25 | U_1_15 | U_2_15;
                                    }, "parts">;
                                    selectors: () => Record<V_14 | U_25 | U_1_15, string>;
                                    classnames: () => Record<V_14 | U_25 | U_1_15, string>;
                                    keys: (V_14 | U_25 | U_1_15)[];
                                    __type: V_14 | U_25 | U_1_15;
                                }, "parts">;
                                selectors: () => Record<V_14 | U_25, string>;
                                classnames: () => Record<V_14 | U_25, string>;
                                keys: (V_14 | U_25)[];
                                __type: V_14 | U_25;
                            }, "parts">;
                            selectors: () => Record<V_14, string>;
                            classnames: () => Record<V_14, string>;
                            keys: V_14[];
                            __type: V_14;
                        }, "parts">;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_3_15 extends string>(...parts: U_3_15[]) => Omit<{
                            parts: <V_15 extends string>(...values: V_15[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_26 extends string>(...parts: U_26[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_1_16 extends string>(...parts: U_1_16[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_2_16 extends string>(...parts: U_2_16[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_3_16 extends string>(...parts: U_3_16[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_4_15 extends string>(...parts: U_4_15[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_5_15 extends string>(...parts: U_5_15[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_6_15 extends string>(...parts: U_6_15[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_7_15 extends string>(...parts: U_7_15[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_8_15 extends string>(...parts: U_8_15[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_9_15 extends string>(...parts: U_9_15[]) => Omit<any, "parts">;
                                                                    selectors: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15 | U_8_15, string>;
                                                                    classnames: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15 | U_8_15, string>;
                                                                    keys: (V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15 | U_8_15)[];
                                                                    __type: V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15 | U_8_15;
                                                                }, "parts">;
                                                                selectors: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15, string>;
                                                                classnames: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15, string>;
                                                                keys: (V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15)[];
                                                                __type: V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15 | U_7_15;
                                                            }, "parts">;
                                                            selectors: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15, string>;
                                                            classnames: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15, string>;
                                                            keys: (V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15)[];
                                                            __type: V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15 | U_6_15;
                                                        }, "parts">;
                                                        selectors: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15, string>;
                                                        classnames: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15, string>;
                                                        keys: (V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15)[];
                                                        __type: V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15 | U_5_15;
                                                    }, "parts">;
                                                    selectors: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15, string>;
                                                    classnames: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15, string>;
                                                    keys: (V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15)[];
                                                    __type: V_15 | U_26 | U_1_16 | U_2_16 | U_3_16 | U_4_15;
                                                }, "parts">;
                                                selectors: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16, string>;
                                                classnames: () => Record<V_15 | U_26 | U_1_16 | U_2_16 | U_3_16, string>;
                                                keys: (V_15 | U_26 | U_1_16 | U_2_16 | U_3_16)[];
                                                __type: V_15 | U_26 | U_1_16 | U_2_16 | U_3_16;
                                            }, "parts">;
                                            selectors: () => Record<V_15 | U_26 | U_1_16 | U_2_16, string>;
                                            classnames: () => Record<V_15 | U_26 | U_1_16 | U_2_16, string>;
                                            keys: (V_15 | U_26 | U_1_16 | U_2_16)[];
                                            __type: V_15 | U_26 | U_1_16 | U_2_16;
                                        }, "parts">;
                                        selectors: () => Record<V_15 | U_26 | U_1_16, string>;
                                        classnames: () => Record<V_15 | U_26 | U_1_16, string>;
                                        keys: (V_15 | U_26 | U_1_16)[];
                                        __type: V_15 | U_26 | U_1_16;
                                    }, "parts">;
                                    selectors: () => Record<V_15 | U_26, string>;
                                    classnames: () => Record<V_15 | U_26, string>;
                                    keys: (V_15 | U_26)[];
                                    __type: V_15 | U_26;
                                }, "parts">;
                                selectors: () => Record<V_15, string>;
                                classnames: () => Record<V_15, string>;
                                keys: V_15[];
                                __type: V_15;
                            }, "parts">;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_4_16 extends string>(...parts: U_4_16[]) => Omit<{
                                parts: <V_16 extends string>(...values: V_16[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_27 extends string>(...parts: U_27[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_1_17 extends string>(...parts: U_1_17[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_2_17 extends string>(...parts: U_2_17[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_3_17 extends string>(...parts: U_3_17[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_4_17 extends string>(...parts: U_4_17[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_5_16 extends string>(...parts: U_5_16[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_6_16 extends string>(...parts: U_6_16[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_7_16 extends string>(...parts: U_7_16[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_8_16 extends string>(...parts: U_8_16[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_9_16 extends string>(...parts: U_9_16[]) => Omit<any, "parts">;
                                                                        selectors: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16 | U_8_16, string>;
                                                                        classnames: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16 | U_8_16, string>;
                                                                        keys: (V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16 | U_8_16)[];
                                                                        __type: V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16 | U_8_16;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16, string>;
                                                                    classnames: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16, string>;
                                                                    keys: (V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16)[];
                                                                    __type: V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16 | U_7_16;
                                                                }, "parts">;
                                                                selectors: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16, string>;
                                                                classnames: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16, string>;
                                                                keys: (V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16)[];
                                                                __type: V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16 | U_6_16;
                                                            }, "parts">;
                                                            selectors: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16, string>;
                                                            classnames: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16, string>;
                                                            keys: (V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16)[];
                                                            __type: V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17 | U_5_16;
                                                        }, "parts">;
                                                        selectors: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17, string>;
                                                        classnames: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17, string>;
                                                        keys: (V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17)[];
                                                        __type: V_16 | U_27 | U_1_17 | U_2_17 | U_3_17 | U_4_17;
                                                    }, "parts">;
                                                    selectors: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17, string>;
                                                    classnames: () => Record<V_16 | U_27 | U_1_17 | U_2_17 | U_3_17, string>;
                                                    keys: (V_16 | U_27 | U_1_17 | U_2_17 | U_3_17)[];
                                                    __type: V_16 | U_27 | U_1_17 | U_2_17 | U_3_17;
                                                }, "parts">;
                                                selectors: () => Record<V_16 | U_27 | U_1_17 | U_2_17, string>;
                                                classnames: () => Record<V_16 | U_27 | U_1_17 | U_2_17, string>;
                                                keys: (V_16 | U_27 | U_1_17 | U_2_17)[];
                                                __type: V_16 | U_27 | U_1_17 | U_2_17;
                                            }, "parts">;
                                            selectors: () => Record<V_16 | U_27 | U_1_17, string>;
                                            classnames: () => Record<V_16 | U_27 | U_1_17, string>;
                                            keys: (V_16 | U_27 | U_1_17)[];
                                            __type: V_16 | U_27 | U_1_17;
                                        }, "parts">;
                                        selectors: () => Record<V_16 | U_27, string>;
                                        classnames: () => Record<V_16 | U_27, string>;
                                        keys: (V_16 | U_27)[];
                                        __type: V_16 | U_27;
                                    }, "parts">;
                                    selectors: () => Record<V_16, string>;
                                    classnames: () => Record<V_16, string>;
                                    keys: V_16[];
                                    __type: V_16;
                                }, "parts">;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_5_17 extends string>(...parts: U_5_17[]) => Omit<{
                                    parts: <V_17 extends string>(...values: V_17[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_28 extends string>(...parts: U_28[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_1_18 extends string>(...parts: U_1_18[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_2_18 extends string>(...parts: U_2_18[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_3_18 extends string>(...parts: U_3_18[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_4_18 extends string>(...parts: U_4_18[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_5_18 extends string>(...parts: U_5_18[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_6_17 extends string>(...parts: U_6_17[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_7_17 extends string>(...parts: U_7_17[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_8_17 extends string>(...parts: U_8_17[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_9_17 extends string>(...parts: U_9_17[]) => Omit<any, "parts">;
                                                                            selectors: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17 | U_8_17, string>;
                                                                            classnames: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17 | U_8_17, string>;
                                                                            keys: (V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17 | U_8_17)[];
                                                                            __type: V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17 | U_8_17;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17, string>;
                                                                        classnames: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17, string>;
                                                                        keys: (V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17)[];
                                                                        __type: V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17 | U_7_17;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17, string>;
                                                                    classnames: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17, string>;
                                                                    keys: (V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17)[];
                                                                    __type: V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18 | U_6_17;
                                                                }, "parts">;
                                                                selectors: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18, string>;
                                                                classnames: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18, string>;
                                                                keys: (V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18)[];
                                                                __type: V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18 | U_5_18;
                                                            }, "parts">;
                                                            selectors: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18, string>;
                                                            classnames: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18, string>;
                                                            keys: (V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18)[];
                                                            __type: V_17 | U_28 | U_1_18 | U_2_18 | U_3_18 | U_4_18;
                                                        }, "parts">;
                                                        selectors: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18, string>;
                                                        classnames: () => Record<V_17 | U_28 | U_1_18 | U_2_18 | U_3_18, string>;
                                                        keys: (V_17 | U_28 | U_1_18 | U_2_18 | U_3_18)[];
                                                        __type: V_17 | U_28 | U_1_18 | U_2_18 | U_3_18;
                                                    }, "parts">;
                                                    selectors: () => Record<V_17 | U_28 | U_1_18 | U_2_18, string>;
                                                    classnames: () => Record<V_17 | U_28 | U_1_18 | U_2_18, string>;
                                                    keys: (V_17 | U_28 | U_1_18 | U_2_18)[];
                                                    __type: V_17 | U_28 | U_1_18 | U_2_18;
                                                }, "parts">;
                                                selectors: () => Record<V_17 | U_28 | U_1_18, string>;
                                                classnames: () => Record<V_17 | U_28 | U_1_18, string>;
                                                keys: (V_17 | U_28 | U_1_18)[];
                                                __type: V_17 | U_28 | U_1_18;
                                            }, "parts">;
                                            selectors: () => Record<V_17 | U_28, string>;
                                            classnames: () => Record<V_17 | U_28, string>;
                                            keys: (V_17 | U_28)[];
                                            __type: V_17 | U_28;
                                        }, "parts">;
                                        selectors: () => Record<V_17, string>;
                                        classnames: () => Record<V_17, string>;
                                        keys: V_17[];
                                        __type: V_17;
                                    }, "parts">;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_6_18 extends string>(...parts: U_6_18[]) => Omit<{
                                        parts: <V_18 extends string>(...values: V_18[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_29 extends string>(...parts: U_29[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_1_19 extends string>(...parts: U_1_19[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_2_19 extends string>(...parts: U_2_19[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_3_19 extends string>(...parts: U_3_19[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_4_19 extends string>(...parts: U_4_19[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_5_19 extends string>(...parts: U_5_19[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_6_19 extends string>(...parts: U_6_19[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_7_18 extends string>(...parts: U_7_18[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_8_18 extends string>(...parts: U_8_18[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_9_18 extends string>(...parts: U_9_18[]) => Omit<any, "parts">;
                                                                                selectors: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18 | U_8_18, string>;
                                                                                classnames: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18 | U_8_18, string>;
                                                                                keys: (V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18 | U_8_18)[];
                                                                                __type: V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18 | U_8_18;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18, string>;
                                                                            classnames: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18, string>;
                                                                            keys: (V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18)[];
                                                                            __type: V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19 | U_7_18;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19, string>;
                                                                        classnames: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19, string>;
                                                                        keys: (V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19)[];
                                                                        __type: V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19 | U_6_19;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19, string>;
                                                                    classnames: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19, string>;
                                                                    keys: (V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19)[];
                                                                    __type: V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19 | U_5_19;
                                                                }, "parts">;
                                                                selectors: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19, string>;
                                                                classnames: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19, string>;
                                                                keys: (V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19)[];
                                                                __type: V_18 | U_29 | U_1_19 | U_2_19 | U_3_19 | U_4_19;
                                                            }, "parts">;
                                                            selectors: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19, string>;
                                                            classnames: () => Record<V_18 | U_29 | U_1_19 | U_2_19 | U_3_19, string>;
                                                            keys: (V_18 | U_29 | U_1_19 | U_2_19 | U_3_19)[];
                                                            __type: V_18 | U_29 | U_1_19 | U_2_19 | U_3_19;
                                                        }, "parts">;
                                                        selectors: () => Record<V_18 | U_29 | U_1_19 | U_2_19, string>;
                                                        classnames: () => Record<V_18 | U_29 | U_1_19 | U_2_19, string>;
                                                        keys: (V_18 | U_29 | U_1_19 | U_2_19)[];
                                                        __type: V_18 | U_29 | U_1_19 | U_2_19;
                                                    }, "parts">;
                                                    selectors: () => Record<V_18 | U_29 | U_1_19, string>;
                                                    classnames: () => Record<V_18 | U_29 | U_1_19, string>;
                                                    keys: (V_18 | U_29 | U_1_19)[];
                                                    __type: V_18 | U_29 | U_1_19;
                                                }, "parts">;
                                                selectors: () => Record<V_18 | U_29, string>;
                                                classnames: () => Record<V_18 | U_29, string>;
                                                keys: (V_18 | U_29)[];
                                                __type: V_18 | U_29;
                                            }, "parts">;
                                            selectors: () => Record<V_18, string>;
                                            classnames: () => Record<V_18, string>;
                                            keys: V_18[];
                                            __type: V_18;
                                        }, "parts">;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_7_19 extends string>(...parts: U_7_19[]) => Omit<{
                                            parts: <V_19 extends string>(...values: V_19[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_30 extends string>(...parts: U_30[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_1_20 extends string>(...parts: U_1_20[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_2_20 extends string>(...parts: U_2_20[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_3_20 extends string>(...parts: U_3_20[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_4_20 extends string>(...parts: U_4_20[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_5_20 extends string>(...parts: U_5_20[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_6_20 extends string>(...parts: U_6_20[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_7_20 extends string>(...parts: U_7_20[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_8_19 extends string>(...parts: U_8_19[]) => Omit<{
                                                                                    parts: any;
                                                                                    toPart: (part: string) => {
                                                                                        className: string;
                                                                                        selector: string;
                                                                                        toString: () => string;
                                                                                    };
                                                                                    extend: <U_9_19 extends string>(...parts: U_9_19[]) => Omit<any, "parts">;
                                                                                    selectors: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20 | U_8_19, string>;
                                                                                    classnames: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20 | U_8_19, string>;
                                                                                    keys: (V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20 | U_8_19)[];
                                                                                    __type: V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20 | U_8_19;
                                                                                }, "parts">;
                                                                                selectors: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20, string>;
                                                                                classnames: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20, string>;
                                                                                keys: (V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20)[];
                                                                                __type: V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20 | U_7_20;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20, string>;
                                                                            classnames: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20, string>;
                                                                            keys: (V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20)[];
                                                                            __type: V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20 | U_6_20;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20, string>;
                                                                        classnames: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20, string>;
                                                                        keys: (V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20)[];
                                                                        __type: V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20 | U_5_20;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20, string>;
                                                                    classnames: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20, string>;
                                                                    keys: (V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20)[];
                                                                    __type: V_19 | U_30 | U_1_20 | U_2_20 | U_3_20 | U_4_20;
                                                                }, "parts">;
                                                                selectors: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20, string>;
                                                                classnames: () => Record<V_19 | U_30 | U_1_20 | U_2_20 | U_3_20, string>;
                                                                keys: (V_19 | U_30 | U_1_20 | U_2_20 | U_3_20)[];
                                                                __type: V_19 | U_30 | U_1_20 | U_2_20 | U_3_20;
                                                            }, "parts">;
                                                            selectors: () => Record<V_19 | U_30 | U_1_20 | U_2_20, string>;
                                                            classnames: () => Record<V_19 | U_30 | U_1_20 | U_2_20, string>;
                                                            keys: (V_19 | U_30 | U_1_20 | U_2_20)[];
                                                            __type: V_19 | U_30 | U_1_20 | U_2_20;
                                                        }, "parts">;
                                                        selectors: () => Record<V_19 | U_30 | U_1_20, string>;
                                                        classnames: () => Record<V_19 | U_30 | U_1_20, string>;
                                                        keys: (V_19 | U_30 | U_1_20)[];
                                                        __type: V_19 | U_30 | U_1_20;
                                                    }, "parts">;
                                                    selectors: () => Record<V_19 | U_30, string>;
                                                    classnames: () => Record<V_19 | U_30, string>;
                                                    keys: (V_19 | U_30)[];
                                                    __type: V_19 | U_30;
                                                }, "parts">;
                                                selectors: () => Record<V_19, string>;
                                                classnames: () => Record<V_19, string>;
                                                keys: V_19[];
                                                __type: V_19;
                                            }, "parts">;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_8_20 extends string>(...parts: U_8_20[]) => Omit<{
                                                parts: <V_20 extends string>(...values: V_20[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_31 extends string>(...parts: U_31[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_1_21 extends string>(...parts: U_1_21[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_2_21 extends string>(...parts: U_2_21[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_3_21 extends string>(...parts: U_3_21[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_4_21 extends string>(...parts: U_4_21[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_5_21 extends string>(...parts: U_5_21[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_6_21 extends string>(...parts: U_6_21[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_7_21 extends string>(...parts: U_7_21[]) => Omit<{
                                                                                    parts: any;
                                                                                    toPart: (part: string) => {
                                                                                        className: string;
                                                                                        selector: string;
                                                                                        toString: () => string;
                                                                                    };
                                                                                    extend: <U_8_21 extends string>(...parts: U_8_21[]) => Omit<{
                                                                                        parts: any;
                                                                                        toPart: (part: string) => {
                                                                                            className: string;
                                                                                            selector: string;
                                                                                            toString: () => string;
                                                                                        };
                                                                                        extend: <U_9_20 extends string>(...parts: U_9_20[]) => Omit<any, "parts">;
                                                                                        selectors: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21 | U_8_21, string>;
                                                                                        classnames: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21 | U_8_21, string>;
                                                                                        keys: (V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21 | U_8_21)[];
                                                                                        __type: V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21 | U_8_21;
                                                                                    }, "parts">;
                                                                                    selectors: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21, string>;
                                                                                    classnames: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21, string>;
                                                                                    keys: (V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21)[];
                                                                                    __type: V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21 | U_7_21;
                                                                                }, "parts">;
                                                                                selectors: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21, string>;
                                                                                classnames: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21, string>;
                                                                                keys: (V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21)[];
                                                                                __type: V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21 | U_6_21;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21, string>;
                                                                            classnames: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21, string>;
                                                                            keys: (V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21)[];
                                                                            __type: V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21 | U_5_21;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21, string>;
                                                                        classnames: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21, string>;
                                                                        keys: (V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21)[];
                                                                        __type: V_20 | U_31 | U_1_21 | U_2_21 | U_3_21 | U_4_21;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21, string>;
                                                                    classnames: () => Record<V_20 | U_31 | U_1_21 | U_2_21 | U_3_21, string>;
                                                                    keys: (V_20 | U_31 | U_1_21 | U_2_21 | U_3_21)[];
                                                                    __type: V_20 | U_31 | U_1_21 | U_2_21 | U_3_21;
                                                                }, "parts">;
                                                                selectors: () => Record<V_20 | U_31 | U_1_21 | U_2_21, string>;
                                                                classnames: () => Record<V_20 | U_31 | U_1_21 | U_2_21, string>;
                                                                keys: (V_20 | U_31 | U_1_21 | U_2_21)[];
                                                                __type: V_20 | U_31 | U_1_21 | U_2_21;
                                                            }, "parts">;
                                                            selectors: () => Record<V_20 | U_31 | U_1_21, string>;
                                                            classnames: () => Record<V_20 | U_31 | U_1_21, string>;
                                                            keys: (V_20 | U_31 | U_1_21)[];
                                                            __type: V_20 | U_31 | U_1_21;
                                                        }, "parts">;
                                                        selectors: () => Record<V_20 | U_31, string>;
                                                        classnames: () => Record<V_20 | U_31, string>;
                                                        keys: (V_20 | U_31)[];
                                                        __type: V_20 | U_31;
                                                    }, "parts">;
                                                    selectors: () => Record<V_20, string>;
                                                    classnames: () => Record<V_20, string>;
                                                    keys: V_20[];
                                                    __type: V_20;
                                                }, "parts">;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_9_21 extends string>(...parts: U_9_21[]) => Omit<{
                                                    parts: <V_21 extends string>(...values: V_21[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_32 extends string>(...parts: U_32[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_1_22 extends string>(...parts: U_1_22[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_2_22 extends string>(...parts: U_2_22[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_3_22 extends string>(...parts: U_3_22[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_4_22 extends string>(...parts: U_4_22[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_5_22 extends string>(...parts: U_5_22[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_6_22 extends string>(...parts: U_6_22[]) => Omit<{
                                                                                    parts: any;
                                                                                    toPart: (part: string) => {
                                                                                        className: string;
                                                                                        selector: string;
                                                                                        toString: () => string;
                                                                                    };
                                                                                    extend: <U_7_22 extends string>(...parts: U_7_22[]) => Omit<{
                                                                                        parts: any;
                                                                                        toPart: (part: string) => {
                                                                                            className: string;
                                                                                            selector: string;
                                                                                            toString: () => string;
                                                                                        };
                                                                                        extend: <U_8_22 extends string>(...parts: U_8_22[]) => Omit<{
                                                                                            parts: any;
                                                                                            toPart: (part: string) => {
                                                                                                className: string;
                                                                                                selector: string;
                                                                                                toString: () => string;
                                                                                            };
                                                                                            extend: <U_9_22 extends string>(...parts: U_9_22[]) => Omit<any, "parts">;
                                                                                            selectors: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22 | U_8_22, string>;
                                                                                            classnames: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22 | U_8_22, string>;
                                                                                            keys: (V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22 | U_8_22)[];
                                                                                            __type: V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22 | U_8_22;
                                                                                        }, "parts">;
                                                                                        selectors: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22, string>;
                                                                                        classnames: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22, string>;
                                                                                        keys: (V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22)[];
                                                                                        __type: V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22 | U_7_22;
                                                                                    }, "parts">;
                                                                                    selectors: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22, string>;
                                                                                    classnames: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22, string>;
                                                                                    keys: (V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22)[];
                                                                                    __type: V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22 | U_6_22;
                                                                                }, "parts">;
                                                                                selectors: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22, string>;
                                                                                classnames: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22, string>;
                                                                                keys: (V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22)[];
                                                                                __type: V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22 | U_5_22;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22, string>;
                                                                            classnames: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22, string>;
                                                                            keys: (V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22)[];
                                                                            __type: V_21 | U_32 | U_1_22 | U_2_22 | U_3_22 | U_4_22;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22, string>;
                                                                        classnames: () => Record<V_21 | U_32 | U_1_22 | U_2_22 | U_3_22, string>;
                                                                        keys: (V_21 | U_32 | U_1_22 | U_2_22 | U_3_22)[];
                                                                        __type: V_21 | U_32 | U_1_22 | U_2_22 | U_3_22;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V_21 | U_32 | U_1_22 | U_2_22, string>;
                                                                    classnames: () => Record<V_21 | U_32 | U_1_22 | U_2_22, string>;
                                                                    keys: (V_21 | U_32 | U_1_22 | U_2_22)[];
                                                                    __type: V_21 | U_32 | U_1_22 | U_2_22;
                                                                }, "parts">;
                                                                selectors: () => Record<V_21 | U_32 | U_1_22, string>;
                                                                classnames: () => Record<V_21 | U_32 | U_1_22, string>;
                                                                keys: (V_21 | U_32 | U_1_22)[];
                                                                __type: V_21 | U_32 | U_1_22;
                                                            }, "parts">;
                                                            selectors: () => Record<V_21 | U_32, string>;
                                                            classnames: () => Record<V_21 | U_32, string>;
                                                            keys: (V_21 | U_32)[];
                                                            __type: V_21 | U_32;
                                                        }, "parts">;
                                                        selectors: () => Record<V_21, string>;
                                                        classnames: () => Record<V_21, string>;
                                                        keys: V_21[];
                                                        __type: V_21;
                                                    }, "parts">;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_10_1 extends string>(...parts: U_10_1[]) => Omit<any, "parts">;
                                                    selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20 | U_9_21, string>;
                                                    classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20 | U_9_21, string>;
                                                    keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20 | U_9_21)[];
                                                    __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20 | U_9_21;
                                                }, "parts">;
                                                selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20, string>;
                                                classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20, string>;
                                                keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20)[];
                                                __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19 | U_8_20;
                                            }, "parts">;
                                            selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19, string>;
                                            classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19, string>;
                                            keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19)[];
                                            __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18 | U_7_19;
                                        }, "parts">;
                                        selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18, string>;
                                        classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18, string>;
                                        keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18)[];
                                        __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17 | U_6_18;
                                    }, "parts">;
                                    selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17, string>;
                                    classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17, string>;
                                    keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17)[];
                                    __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16 | U_5_17;
                                }, "parts">;
                                selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16, string>;
                                classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16, string>;
                                keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16)[];
                                __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15 | U_4_16;
                            }, "parts">;
                            selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15, string>;
                            classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15, string>;
                            keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15)[];
                            __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14 | U_3_15;
                        }, "parts">;
                        selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14, string>;
                        classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14, string>;
                        keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14)[];
                        __type: "label" | "track" | "filledTrack" | U_22 | U_1_13 | U_2_14;
                    }, "parts">;
                    selectors: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13, string>;
                    classnames: () => Record<"label" | "track" | "filledTrack" | U_22 | U_1_13, string>;
                    keys: ("label" | "track" | "filledTrack" | U_22 | U_1_13)[];
                    __type: "label" | "track" | "filledTrack" | U_22 | U_1_13;
                }, "parts">;
                selectors: () => Record<"label" | "track" | "filledTrack" | U_22, string>;
                classnames: () => Record<"label" | "track" | "filledTrack" | U_22, string>;
                keys: ("label" | "track" | "filledTrack" | U_22)[];
                __type: "label" | "track" | "filledTrack" | U_22;
            }, "parts">;
            selectors: () => Record<"label" | "track" | "filledTrack", string>;
            classnames: () => Record<"label" | "track" | "filledTrack", string>;
            keys: ("label" | "track" | "filledTrack")[];
            __type: "label" | "track" | "filledTrack";
        }, "parts">>;
        parts: ("label" | "track" | "filledTrack")[];
        sizes: Record<string, Partial<Record<"label" | "track" | "filledTrack", import("@chakra-ui/styled-system").SystemStyleObject>>>;
        defaultProps: {
            size: string;
            colorScheme: string;
        };
    };
    Radio: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            control: {
                bg: string;
                cursor: string;
                border: string;
                borderColor: string;
                alignSelf: string;
                _before: {
                    content: string;
                    transition: string;
                };
                _focus: {
                    boxShadow: string;
                };
                _checked: {
                    bg: string;
                    borderColor: string;
                    color: string;
                };
                _invalid: {
                    borderColor: string;
                };
                _disabled: {
                    cursor: string;
                    borderColor: string;
                    bg: string;
                    _checked: {
                        bg: string;
                        borderColor: string;
                        color: string;
                    };
                };
            };
            container: {
                w: string;
                color: string;
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
                _focusWithin: {
                    outlineOffset: number;
                    boxShadow: string;
                    outline: string;
                    _dark: {
                        outline: string;
                    };
                };
            };
            label: {
                _disabled: {
                    color: string;
                    opacity: number;
                };
                textStyle: string;
                color: string;
            };
            othersContainer: {
                _hover: {
                    bg: string;
                    _disabled: {
                        bg: string;
                    };
                };
                _focusWithin: {
                    outlineOffset: number;
                    boxShadow: string;
                    outline: string;
                    _dark: {
                        outline: string;
                    };
                };
            };
            othersRadio: {
                _focusWithin: {
                    boxShadow: string;
                };
                _hover: {
                    bg: string;
                };
                p: number;
            };
        }) | undefined;
        sizes?: {
            xs: {
                control: {
                    w: string;
                    h: string;
                    mt: string;
                    _before: {
                        w: string;
                        h: string;
                        transform: string;
                    };
                    _checked: {
                        _before: {
                            w: string;
                            h: string;
                            transform: string;
                        };
                    };
                };
                label: {
                    ml: string;
                    textStyle: string;
                };
                container: {
                    px: string;
                    py: string;
                };
                othersContainer: {
                    px: string;
                    py: string;
                };
                othersInput: {
                    ml: string;
                    mt: string;
                    w: string;
                };
            };
            sm: {
                control: {
                    width: string;
                    height: string;
                    _before: {
                        w: string;
                        h: string;
                        transform: string;
                    };
                    _checked: {
                        _before: {
                            w: string;
                            h: string;
                            transform: string;
                        };
                    };
                };
                label: {
                    textStyle: string;
                    ml: string;
                };
                container: {
                    px: string;
                    py: string;
                };
                othersContainer: {
                    px: string;
                    py: string;
                };
                othersInput: {
                    ml: string;
                    mt: string;
                    w: string;
                };
            };
            md: {
                label: {
                    ml: string;
                };
                container: {
                    px: string;
                    py: string;
                };
                othersContainer: {
                    px: string;
                    py: string;
                };
                othersInput: {
                    ml: string;
                    mt: string;
                    w: string;
                };
                control: {
                    w: string;
                    h: string;
                    _before: {
                        w: string;
                        h: string;
                        transform: string;
                    };
                    _checked: {
                        _before: {
                            w: string;
                            h: string;
                            transform: string;
                        };
                    };
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("label" | "container" | "othersInput" | "othersContainer" | "control" | "othersRadio")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("label" | "container" | "othersInput" | "othersContainer" | "control" | "othersRadio")[];
    };
    Searchbar: {
        baseStyle?: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
            keys: "icon"[];
        }> | undefined;
        sizes?: {
            xs: {
                icon: {
                    fontSize: string;
                };
            };
            sm: {
                icon: {
                    fontSize: string;
                };
            };
            md: {
                icon: {
                    fontSize: string;
                };
            };
        } | undefined;
        variants?: {
            outline: {
                icon: {
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    color: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: "icon"[];
    };
    Sidebar: {
        baseStyle?: {
            header: {
                textStyle: string;
                px: string;
                pt: string;
                pb: string;
            };
            section: {
                display: string;
                flexDirection: string;
            };
            child: {
                borderRadius: number;
                borderLeftWidth: string;
                borderColor: string;
                _active: {
                    ml: string;
                    borderLeftWidth: string;
                    color: string;
                    borderColor: string;
                };
                _focusVisible: {
                    borderRadius: string;
                };
            };
            parent: {
                _hover: {
                    bg: string;
                };
                _active: {
                    bg: string;
                    color: string;
                };
                _expanded: {
                    bg: string;
                    color: string;
                };
                borderRadius: string;
            };
            label: {
                display: string;
                alignItems: string;
            };
            item: {
                width: string;
                display: string;
                alignItems: string;
                listStyleType: string;
                color: string;
                cursor: string;
                _hover: {
                    color: string;
                };
                _focusVisible: {
                    outlineOffset: string;
                    boxShadow: string;
                    outline: string;
                    _dark: {
                        outline: string;
                    };
                };
            };
            list: {
                listStyleType: string;
                display: string;
                flexDirection: string;
            };
            nest: {
                listStyleType: string;
            };
        } | undefined;
        sizes?: {
            sm: {
                section: {
                    textStyle: string;
                };
                list: {
                    paddingInlineStart: string;
                };
                nest: {
                    paddingInlineStart: string;
                };
                label: {
                    gap: string;
                };
                item: {
                    textStyle: string;
                    py: string;
                    px: string;
                };
                child: {
                    px: string;
                };
                icon: {
                    cursor: string;
                    fontSize: string;
                };
            };
            md: {
                section: {
                    textStyle: string;
                };
                list: {
                    paddingInlineStart: string;
                };
                nest: {
                    paddingInlineStart: string;
                };
                label: {
                    gap: string;
                };
                item: {
                    textStyle: string;
                    py: string;
                    px: string;
                };
                child: {
                    px: string;
                };
                icon: {
                    cursor: string;
                    fontSize: string;
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("header" | "label" | "section" | "list" | "child" | "icon" | "item" | "parent" | "nest")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("header" | "label" | "section" | "list" | "child" | "icon" | "item" | "parent" | "nest")[];
    };
    SingleCountryPhoneNumberInput: {
        baseStyle?: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
            keys: ("icon" | "field" | "iconContainer")[];
        }> | undefined;
        sizes?: {
            xs: ({ isSuccess }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                field: {
                    paddingInlineEnd: string | undefined;
                };
                iconContainer: {
                    w: string;
                    px: string;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                    h?: string | undefined;
                };
                icon: {
                    fontSize: string;
                };
            };
            sm: ({ isSuccess }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                field: {
                    paddingInlineEnd: string | undefined;
                };
                iconContainer: {
                    w: string;
                    px: string;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                    h?: string | undefined;
                };
                icon: {
                    fontSize: string;
                };
            };
            md: ({ isSuccess }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                field: {
                    paddingInlineEnd: string | undefined;
                };
                icon: {
                    fontSize: string;
                };
                iconContainer: {
                    w: string;
                    px: string;
                    h?: string | undefined;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                field: {
                    borderRadius?: string | undefined;
                    bg?: string | undefined;
                    border?: string | undefined;
                    borderColor?: string | undefined;
                    _placeholder?: {
                        color: string;
                    } | undefined;
                    _hover?: {
                        borderColor: string;
                    } | undefined;
                    _invalid?: {
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _focusVisible?: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _disabled?: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    } | undefined;
                    paddingInlineEnd?: string | undefined;
                };
                icon: {
                    w: string;
                };
                iconContainer: {
                    _disabled: {
                        opacity: number;
                    };
                    mr?: string | undefined;
                    pointerEvents: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("icon" | "field" | "iconContainer")[];
    };
    SingleSelect: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            item: {
                bg: string;
                textStyle: string;
                fontWeight: string;
                color: string;
                _hover: {
                    bg: string;
                };
                _disabled: {
                    color: string;
                    opacity: number;
                    cursor: string;
                };
                _focus: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                };
                _focusVisible: {
                    boxShadow: string;
                    _active: {
                        [x: string]: string;
                    };
                };
                _active: {
                    [x: string]: string;
                };
            } & {
                _selected: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                } | undefined;
            };
            highlight: {
                bg: string;
            };
            selected: {
                zIndex: number;
                gridArea: string;
                alignItems: string;
                pointerEvents: string;
                _disabled: {
                    color: string;
                };
            };
            itemDescription: {
                textStyle: string;
                color: string;
            };
            emptyItem: {
                fontStyle: string;
                cursor: string;
                _hover: {
                    bg: string;
                };
                _active: {
                    bg: string;
                };
                bg: string;
                textStyle: string;
                fontWeight: string;
                color: string;
                _disabled: {
                    color: string;
                    opacity: number;
                    cursor: string;
                };
                _focus: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                };
                _focusVisible: {
                    boxShadow: string;
                    _active: {
                        [x: string]: string;
                    };
                };
                _selected: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string;
                    };
                } | undefined;
            };
            list: {
                [x: string]: string | number;
                mt: string;
                border: string;
                borderRadius: number;
                minWidth: string;
                boxShadow: string;
            } & {
                my: string;
                w: string;
                overflowY: string;
                maxH: string;
                bg: string;
            };
            icon: {
                transitionProperty: string;
                transitionDuration: string;
                color: string;
                _disabled: {
                    cursor: string;
                    color: string;
                };
            };
        }) | undefined;
        sizes?: {
            xs: {
                item: {
                    textStyle: string;
                    padding: string;
                } | undefined;
                emptyItem: {
                    textStyle: string;
                    padding: string;
                } | undefined;
                field: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                } | undefined;
                icon: {
                    fontSize: string;
                };
                selected: {
                    pl: string;
                    pr: string;
                    textStyle: string;
                };
            };
            sm: {
                item: {
                    textStyle: string;
                    padding: string;
                } | undefined;
                emptyItem: {
                    textStyle: string;
                    padding: string;
                } | undefined;
                field: {
                    textStyle: string;
                    fontSize: string;
                    px: string;
                    h: string;
                } | undefined;
                icon: {
                    fontSize: string;
                };
                selected: {
                    pl: string;
                    pr: string;
                    textStyle: string;
                };
            };
            md: {
                icon: {
                    fontSize: string;
                };
                item: {
                    textStyle: string;
                    padding: string;
                } | undefined;
                emptyItem: {
                    textStyle: string;
                    padding: string;
                } | undefined;
                field: {
                    px: string;
                    h: string;
                    textStyle: string;
                    fontSize: string;
                } | undefined;
                selected: {
                    pl: string;
                    pr: string;
                    textStyle: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                list: {
                    py: number;
                };
                item: {
                    cursor: string;
                };
                field: {
                    borderRadius: string;
                    bg: string;
                    border: string;
                    borderColor: string;
                    _placeholder: {
                        color: string;
                    };
                    _hover: {
                        borderColor: string;
                    };
                    _invalid: {
                        borderColor: any;
                        boxShadow: string;
                    };
                    _focusVisible: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    };
                } & {
                    borderRightRadius: number | undefined;
                    gridArea: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem")[];
    };
    Switch: {
        baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            track: {
                bg: string;
                _checked: {
                    bg: string;
                };
                _groupDisabled: {
                    bg: string;
                    opacity: number;
                };
                p: number;
                outlineWidth: string;
                _focusVisible: {
                    outlineWidth: string;
                    boxShadow: string;
                    outline: string;
                    outlineOffset: string;
                    _dark: {
                        outline: string;
                    };
                };
                _focus: {
                    boxShadow: string;
                };
            };
            thumb: {
                display: string;
                justifyContent: string;
                alignItems: string;
                _groupDisabled: {
                    bg: string;
                };
            };
            thumbIcon: {
                color: string;
                _checked: {
                    color: string;
                };
                _groupDisabled: {
                    color: string;
                };
            };
        }) | undefined;
        sizes?: {
            sm: {
                track: {
                    w: string;
                    h: string;
                };
                thumb: {
                    w: string;
                    h: string;
                    m: string;
                    _checked: {
                        transform: string;
                    };
                };
                thumbIcon: {
                    fontSize: string;
                };
            };
            md: {
                track: {
                    w: string;
                    h: string;
                };
                thumb: {
                    w: string;
                    h: string;
                    m: string;
                    _checked: {
                        transform: string;
                    };
                };
                thumbIcon: {
                    fontSize: string;
                };
            };
            lg: {
                track: {
                    w: string;
                    h: string;
                };
                thumb: {
                    w: string;
                    h: string;
                    m: string;
                    _checked: {
                        transform: string;
                    };
                };
                thumbIcon: {
                    fontSize: string;
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("track" | "container" | "thumbIcon" | "thumb")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "lg" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("track" | "container" | "thumbIcon" | "thumb")[];
    };
    Tabs: {
        baseStyle?: (({ orientation }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            tablist: {
                overflowX: string | undefined;
                overflowY: string | undefined;
                whiteSpace: string;
                scrollbarWidth: number;
                '&::-webkit-scrollbar': {
                    width: number;
                    height: number;
                };
            };
            tabpanel: {
                p: string;
            };
        }) | undefined;
        sizes?: {
            sm: ({ orientation }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                tablist: {
                    gap: string | number;
                };
                tab: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                    px: string | number;
                    py: string;
                };
            };
            md: ({ orientation }: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                tablist: {
                    gap: string | number;
                };
                tab: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: string;
                    fontFamily: string;
                    textTransform: string;
                    px: string | number;
                    py: string;
                    mx: string;
                };
            };
        } | undefined;
        variants?: {
            line: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                tablist: {
                    [x: string]: string;
                    borderColor: string;
                };
                tab: {
                    [x: string]: string | number | {
                        fontWeight: number;
                        lineHeight: string;
                        fontSize: string;
                        letterSpacing: string;
                        fontFamily: string;
                        textTransform: string;
                        _dark: {
                            [x: string]: string;
                        };
                        borderColor: string;
                        _hover: {
                            borderColor: string;
                        };
                    } | {
                        [x: string]: string;
                        borderColor?: undefined;
                        _dark?: undefined;
                    } | {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        borderColor: string;
                        _dark: {
                            [x: string]: string;
                        };
                    } | {
                        outlineOffset: number;
                        _dark: {
                            boxShadow: string;
                            outline: string;
                            outlineOffset: string;
                        };
                        boxShadow: string;
                        outline: string;
                        borderColor?: undefined;
                    };
                    justifyContent: string;
                    mt: string | number;
                    textTransform: string;
                    color: string;
                    bg: string;
                    borderColor: string;
                    outlineOffset: number;
                    _selected: {
                        fontWeight: number;
                        lineHeight: string;
                        fontSize: string;
                        letterSpacing: string;
                        fontFamily: string;
                        textTransform: string;
                        _dark: {
                            [x: string]: string;
                        };
                        borderColor: string;
                        _hover: {
                            borderColor: string;
                        };
                    };
                    _active: {
                        [x: string]: string;
                    };
                    _hover: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        borderColor: string;
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    _focusVisible: {
                        outlineOffset: number;
                        _dark: {
                            boxShadow: string;
                            outline: string;
                            outlineOffset: string;
                        };
                        boxShadow: string;
                        outline: string;
                    };
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | undefined;
            variant?: "line" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("tab" | "tablist" | "tabpanel" | "tabpanels" | "root" | "indicator")[];
    };
    Tag: {
        baseStyle?: {
            container: {
                transitionProperty: string;
                transitionDuration: string;
                _focusWithin: {
                    boxShadow: string;
                    outline: string;
                    outlineOffset: string;
                    _dark: {
                        outline: string;
                    };
                };
                borderRadius: string;
                _disabled: {
                    bg: string;
                    color: string;
                    cursor: string;
                };
                _hover: {
                    _disabled: {
                        bg: string;
                    };
                };
                width: string;
                height: string;
            };
            label: {
                textStyle: string;
                whiteSpace: string;
            };
            closeButton: {
                display: string;
                alignItems: string;
                opacity: number;
                outline: string;
                _hover: {
                    opacity: number;
                };
                _disabled: {
                    cursor: string;
                    opacity: number;
                };
                _focusVisible: {
                    boxShadow: string;
                    bg: string;
                };
            };
        } | undefined;
        sizes?: {
            xs: {
                container: {
                    px: string;
                    py: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                label: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                icon: {
                    fontSize: string;
                    marginStart: string;
                    marginEnd: string;
                    height: string;
                };
                closeButton: {
                    fontSize: string;
                    marginStart: string;
                    height: string;
                };
            };
            sm: {
                container: {
                    px: string;
                    py: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                label: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                icon: {
                    fontSize: string;
                    marginStart: string;
                    marginEnd: string;
                    height: string;
                };
                closeButton: {
                    fontSize: string;
                    marginStart: string;
                    height: string;
                };
            };
            md: {
                container: {
                    px: string;
                    py: string;
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                label: {
                    fontWeight: number;
                    lineHeight: string;
                    fontSize: string;
                    letterSpacing: number;
                    fontFamily: string;
                };
                closeButton: {
                    fontSize: string;
                    marginStart: string;
                    height: string;
                };
                icon: {
                    fontSize: string;
                    marginStart: string;
                    marginEnd: string;
                    height: string;
                };
            };
        } | undefined;
        variants?: {
            subtle: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                container: any;
            };
            solid: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                container: any;
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "solid" | "subtle" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("label" | "icon" | "container" | "closeButton")[];
    };
    TagInput: {
        baseStyle?: {
            container: {
                display: string;
                flexWrap: string;
                cursor: string;
                height: string;
                maxW: string;
                w: string;
                _disabled: {
                    cursor: string;
                };
                transitionProperty: string;
                transitionDuration: string;
            };
            field: {
                _focusVisible: {
                    outline: string;
                };
                flexGrow: number;
                _disabled: {
                    cursor: string;
                };
            };
        } | undefined;
        sizes?: {
            sm: {
                container: {
                    p: string;
                    minH: string | undefined;
                    gap: string;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                    px?: string | undefined;
                    h?: string | undefined;
                };
                field: {
                    h: string;
                    pl: string;
                };
            };
            md: {
                container: {
                    p: string;
                    minH: string | undefined;
                    gap: string;
                    px?: string | undefined;
                    h?: string | undefined;
                    textStyle?: string | undefined;
                    fontSize?: string | undefined;
                };
                field: {
                    h: string;
                    pl: string;
                };
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                container: {
                    _focusWithin: {
                        zIndex?: number | undefined;
                        borderColor?: any;
                        boxShadow?: string | undefined;
                    };
                    h: string;
                    borderRadius?: string | undefined;
                    bg?: string | undefined;
                    border?: string | undefined;
                    borderColor?: string | undefined;
                    _placeholder?: {
                        color: string;
                    } | undefined;
                    _hover?: {
                        borderColor: string;
                    } | undefined;
                    _invalid?: {
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _focusVisible?: {
                        zIndex: number;
                        borderColor: any;
                        boxShadow: string;
                    } | undefined;
                    _disabled?: {
                        bg: string;
                        borderColor: string;
                        color: string;
                        cursor: string;
                        opacity: number;
                        _hover: {
                            bg: string;
                        };
                        _active: {
                            bg: string;
                        };
                    } | undefined;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("container" | "field")[];
    };
    Textarea: {
        baseStyle?: {
            transitionProperty: string;
            transitionDuration: string;
        } | undefined;
        sizes?: {
            xs: {
                px: string;
                py: string;
                textStyle?: string | undefined;
                fontSize?: string | undefined;
                h?: string | undefined;
            };
            sm: {
                px: string;
                py: string;
                textStyle?: string | undefined;
                fontSize?: string | undefined;
                h?: string | undefined;
            };
            md: {
                px: string;
                py: string;
                h?: string | undefined;
                textStyle?: string | undefined;
                fontSize?: string | undefined;
            };
        } | undefined;
        variants?: {
            outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                borderRadius?: string | undefined;
                bg?: string | undefined;
                border?: string | undefined;
                borderColor?: string | undefined;
                _placeholder?: {
                    color: string;
                } | undefined;
                _hover?: {
                    borderColor: string;
                } | undefined;
                _invalid?: {
                    borderColor: any;
                    boxShadow: string;
                } | undefined;
                _focusVisible?: {
                    zIndex: number;
                    borderColor: any;
                    boxShadow: string;
                } | undefined;
                _disabled?: {
                    bg: string;
                    borderColor: string;
                    color: string;
                    cursor: string;
                    opacity: number;
                    _hover: {
                        bg: string;
                    };
                    _active: {
                        bg: string;
                    };
                } | undefined;
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "outline" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
    Tile: {
        baseStyle?: {
            container: {
                transitionProperty: string;
                transitionDuration: string;
                color: string;
                borderRadius: string;
                padding: string;
                height: string;
                _hover: {
                    bg: string;
                };
                outline: string;
                _focusVisible: {
                    boxShadow: string;
                    borderColor: string;
                    outline: string;
                };
                _active: {
                    bg: string;
                    borderColor: string;
                    boxShadow: string;
                };
                bg: string;
                border: string;
                borderColor: string;
                whiteSpace: string;
                flexDir: string;
                alignItems: string;
                maxWidth: string;
                textAlign: string;
                alignSelf: string;
                justifyContent: string;
            };
            title: {
                color: string;
                textStyle: string;
                mt: string;
            };
            icon: {
                boxSize: string;
                color: string;
            };
            subtitle: {
                color: string;
                textStyle: string;
            };
            text: {
                color: string;
                textStyle: string;
                textAlign: string;
            };
        } | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("title" | "text" | "icon" | "container" | "subtitle")[];
            }>;
        } | undefined;
        variants?: {
            complex: {
                title: {
                    mb: number;
                };
                subtitle: {
                    mb: string;
                };
            };
            simple: {
                title: {
                    mb: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: "simple" | "complex" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("title" | "text" | "icon" | "container" | "subtitle")[];
    };
    Toast: {
        baseStyle?: {
            title: {
                fontWeight: number;
                lineHeight: string;
                fontSize: string;
                letterSpacing: string;
                fontFamily: string;
            };
            description: {
                textStyle: string;
            };
            icon: {
                position: string;
            };
            wrapper: {
                borderRadius: string;
                boxSizing: string;
            };
            container: {
                borderRadius: string;
                background: string;
            };
            close: {
                position: string;
            };
        } | undefined;
        sizes?: {
            md: {
                icon: {
                    left: string;
                    top: string;
                    boxSize: string;
                };
                content: {
                    ml: string;
                };
                wrapper: {
                    width: {
                        base: "auto";
                        lg: "42.5rem";
                    };
                    maxW: string;
                };
                container: {
                    padding: string;
                    pr: string;
                };
                close: {
                    w: string;
                    h: string;
                    insetEnd: string;
                    top: string;
                    fontSize: string;
                };
            };
        } | undefined;
        variants?: {
            subtle: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                wrapper: {
                    color: string;
                    bg: string;
                    border: string;
                };
                icon: {
                    fill: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "md" | undefined;
            variant?: "subtle" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("content" | "title" | "icon" | "spinner" | "container" | "close" | "description" | "wrapper")[];
    };
    Toggle: {
        baseStyle?: {
            label: {
                textStyle: string;
                color: string;
            };
            description: {
                textStyle: string;
                color: string;
            };
            overallContainer: {
                display: string;
                justifyContent: string;
            };
        } | undefined;
        sizes?: {
            md: {
                label: {
                    mr: string;
                    mb: number;
                };
            };
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").PartsStyleInterpolation<{
                keys: ("label" | "description" | "overallContainer")[];
            }>;
        } | undefined;
        defaultProps?: {
            size?: "md" | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("label" | "description" | "overallContainer")[];
    };
    Toolbar: {
        baseStyle?: {
            container: {
                textStyle: string;
            };
            divider: {
                borderColor: string;
            };
        } | undefined;
        sizes?: {
            xs: {
                container: {
                    gap: string;
                    h: string;
                    py: string;
                    pl: string;
                    pr: string;
                };
            };
            sm: {
                container: {
                    gap: string;
                    h: string;
                    py: string;
                    pl: string;
                    pr: string;
                };
            };
            md: {
                container: {
                    gap: string;
                    h: string;
                    py: string;
                    pl: string;
                    pr: string;
                };
            };
        } | undefined;
        variants?: {
            solid: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
                container: {
                    bg: string;
                    color: string;
                    display: string;
                    flexDirection: string;
                    alignItems: string;
                } | {
                    bg: string;
                    color?: undefined;
                    display: string;
                    flexDirection: string;
                    alignItems: string;
                };
            };
        } | undefined;
        defaultProps?: {
            size?: "sm" | "md" | "xs" | undefined;
            variant?: "solid" | undefined;
            colorScheme?: string | undefined;
        } | undefined;
        parts: ("group" | "divider" | "container")[];
    };
    Tooltip: {
        baseStyle?: {
            fontWeight: number;
            lineHeight: string;
            fontSize: string;
            letterSpacing: number;
            fontFamily: string;
            bg: string;
            color: string;
            px: string;
            py: string;
            borderRadius: string;
            textAlign: string;
            margin: string;
            maxWidth: string;
        } | undefined;
        sizes?: {
            [key: string]: import("@chakra-ui/styled-system").SystemStyleInterpolation;
        } | undefined;
        variants?: {
            [key: string]: import("@chakra-ui/styled-system").SystemStyleInterpolation;
        } | undefined;
        defaultProps?: {
            size?: string | number | undefined;
            variant?: string | number | undefined;
            colorScheme?: string | undefined;
        } | undefined;
    };
};
