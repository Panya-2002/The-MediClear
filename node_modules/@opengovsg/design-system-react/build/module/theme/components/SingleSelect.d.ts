export declare const comboboxParts: Omit<{
    parts: <V extends string>(...values: V[]) => Omit<{
        parts: any;
        toPart: (part: string) => {
            className: string;
            selector: string;
            toString: () => string;
        };
        extend: <U extends string>(...parts: U[]) => Omit<{
            parts: any;
            toPart: (part: string) => {
                className: string;
                selector: string;
                toString: () => string;
            };
            extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                parts: any;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                }, "parts">;
                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                            }, "parts">;
                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                            keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                            __type: V | U | U_1 | U_2 | U_3 | U_4;
                        }, "parts">;
                        selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                        classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                        keys: (V | U | U_1 | U_2 | U_3)[];
                        __type: V | U | U_1 | U_2 | U_3;
                    }, "parts">;
                    selectors: () => Record<V | U | U_1 | U_2, string>;
                    classnames: () => Record<V | U | U_1 | U_2, string>;
                    keys: (V | U | U_1 | U_2)[];
                    __type: V | U | U_1 | U_2;
                }, "parts">;
                selectors: () => Record<V | U | U_1, string>;
                classnames: () => Record<V | U | U_1, string>;
                keys: (V | U | U_1)[];
                __type: V | U | U_1;
            }, "parts">;
            selectors: () => Record<V | U, string>;
            classnames: () => Record<V | U, string>;
            keys: (V | U)[];
            __type: V | U;
        }, "parts">;
        selectors: () => Record<V, string>;
        classnames: () => Record<V, string>;
        keys: V[];
        __type: V;
    }, "parts">;
    toPart: (part: string) => {
        className: string;
        selector: string;
        toString: () => string;
    };
    extend: <U_10 extends string>(...parts: U_10[]) => Omit<{
        parts: <V extends string>(...values: V[]) => Omit<{
            parts: any;
            toPart: (part: string) => {
                className: string;
                selector: string;
                toString: () => string;
            };
            extend: <U extends string>(...parts: U[]) => Omit<{
                parts: any;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                }, "parts">;
                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                __type: V | U | U_1 | U_2 | U_3 | U_4;
                            }, "parts">;
                            selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                            classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                            keys: (V | U | U_1 | U_2 | U_3)[];
                            __type: V | U | U_1 | U_2 | U_3;
                        }, "parts">;
                        selectors: () => Record<V | U | U_1 | U_2, string>;
                        classnames: () => Record<V | U | U_1 | U_2, string>;
                        keys: (V | U | U_1 | U_2)[];
                        __type: V | U | U_1 | U_2;
                    }, "parts">;
                    selectors: () => Record<V | U | U_1, string>;
                    classnames: () => Record<V | U | U_1, string>;
                    keys: (V | U | U_1)[];
                    __type: V | U | U_1;
                }, "parts">;
                selectors: () => Record<V | U, string>;
                classnames: () => Record<V | U, string>;
                keys: (V | U)[];
                __type: V | U;
            }, "parts">;
            selectors: () => Record<V, string>;
            classnames: () => Record<V, string>;
            keys: V[];
            __type: V;
        }, "parts">;
        toPart: (part: string) => {
            className: string;
            selector: string;
            toString: () => string;
        };
        extend: <U_11 extends string>(...parts: U_11[]) => Omit<{
            parts: <V extends string>(...values: V[]) => Omit<{
                parts: any;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U extends string>(...parts: U[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                            }, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                    keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                    __type: V | U | U_1 | U_2 | U_3 | U_4;
                                }, "parts">;
                                selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                keys: (V | U | U_1 | U_2 | U_3)[];
                                __type: V | U | U_1 | U_2 | U_3;
                            }, "parts">;
                            selectors: () => Record<V | U | U_1 | U_2, string>;
                            classnames: () => Record<V | U | U_1 | U_2, string>;
                            keys: (V | U | U_1 | U_2)[];
                            __type: V | U | U_1 | U_2;
                        }, "parts">;
                        selectors: () => Record<V | U | U_1, string>;
                        classnames: () => Record<V | U | U_1, string>;
                        keys: (V | U | U_1)[];
                        __type: V | U | U_1;
                    }, "parts">;
                    selectors: () => Record<V | U, string>;
                    classnames: () => Record<V | U, string>;
                    keys: (V | U)[];
                    __type: V | U;
                }, "parts">;
                selectors: () => Record<V, string>;
                classnames: () => Record<V, string>;
                keys: V[];
                __type: V;
            }, "parts">;
            toPart: (part: string) => {
                className: string;
                selector: string;
                toString: () => string;
            };
            extend: <U_12 extends string>(...parts: U_12[]) => Omit<{
                parts: <V extends string>(...values: V[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U extends string>(...parts: U[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                }, "parts">;
                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                            }, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                        keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                        __type: V | U | U_1 | U_2 | U_3 | U_4;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                    classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                    keys: (V | U | U_1 | U_2 | U_3)[];
                                    __type: V | U | U_1 | U_2 | U_3;
                                }, "parts">;
                                selectors: () => Record<V | U | U_1 | U_2, string>;
                                classnames: () => Record<V | U | U_1 | U_2, string>;
                                keys: (V | U | U_1 | U_2)[];
                                __type: V | U | U_1 | U_2;
                            }, "parts">;
                            selectors: () => Record<V | U | U_1, string>;
                            classnames: () => Record<V | U | U_1, string>;
                            keys: (V | U | U_1)[];
                            __type: V | U | U_1;
                        }, "parts">;
                        selectors: () => Record<V | U, string>;
                        classnames: () => Record<V | U, string>;
                        keys: (V | U)[];
                        __type: V | U;
                    }, "parts">;
                    selectors: () => Record<V, string>;
                    classnames: () => Record<V, string>;
                    keys: V[];
                    __type: V;
                }, "parts">;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_13 extends string>(...parts: U_13[]) => Omit<{
                    parts: <V extends string>(...values: V[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U extends string>(...parts: U[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                }, "parts">;
                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                            }, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                            keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                            __type: V | U | U_1 | U_2 | U_3 | U_4;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                        classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                        keys: (V | U | U_1 | U_2 | U_3)[];
                                        __type: V | U | U_1 | U_2 | U_3;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1 | U_2, string>;
                                    classnames: () => Record<V | U | U_1 | U_2, string>;
                                    keys: (V | U | U_1 | U_2)[];
                                    __type: V | U | U_1 | U_2;
                                }, "parts">;
                                selectors: () => Record<V | U | U_1, string>;
                                classnames: () => Record<V | U | U_1, string>;
                                keys: (V | U | U_1)[];
                                __type: V | U | U_1;
                            }, "parts">;
                            selectors: () => Record<V | U, string>;
                            classnames: () => Record<V | U, string>;
                            keys: (V | U)[];
                            __type: V | U;
                        }, "parts">;
                        selectors: () => Record<V, string>;
                        classnames: () => Record<V, string>;
                        keys: V[];
                        __type: V;
                    }, "parts">;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_14 extends string>(...parts: U_14[]) => Omit<{
                        parts: <V extends string>(...values: V[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U extends string>(...parts: U[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                                }, "parts">;
                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                                __type: V | U | U_1 | U_2 | U_3 | U_4;
                                            }, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                            keys: (V | U | U_1 | U_2 | U_3)[];
                                            __type: V | U | U_1 | U_2 | U_3;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2, string>;
                                        classnames: () => Record<V | U | U_1 | U_2, string>;
                                        keys: (V | U | U_1 | U_2)[];
                                        __type: V | U | U_1 | U_2;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1, string>;
                                    classnames: () => Record<V | U | U_1, string>;
                                    keys: (V | U | U_1)[];
                                    __type: V | U | U_1;
                                }, "parts">;
                                selectors: () => Record<V | U, string>;
                                classnames: () => Record<V | U, string>;
                                keys: (V | U)[];
                                __type: V | U;
                            }, "parts">;
                            selectors: () => Record<V, string>;
                            classnames: () => Record<V, string>;
                            keys: V[];
                            __type: V;
                        }, "parts">;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_15 extends string>(...parts: U_15[]) => Omit<{
                            parts: <V extends string>(...values: V[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U extends string>(...parts: U[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                                    __type: V | U | U_1 | U_2 | U_3 | U_4;
                                                }, "parts">;
                                                selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                keys: (V | U | U_1 | U_2 | U_3)[];
                                                __type: V | U | U_1 | U_2 | U_3;
                                            }, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2, string>;
                                            classnames: () => Record<V | U | U_1 | U_2, string>;
                                            keys: (V | U | U_1 | U_2)[];
                                            __type: V | U | U_1 | U_2;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1, string>;
                                        classnames: () => Record<V | U | U_1, string>;
                                        keys: (V | U | U_1)[];
                                        __type: V | U | U_1;
                                    }, "parts">;
                                    selectors: () => Record<V | U, string>;
                                    classnames: () => Record<V | U, string>;
                                    keys: (V | U)[];
                                    __type: V | U;
                                }, "parts">;
                                selectors: () => Record<V, string>;
                                classnames: () => Record<V, string>;
                                keys: V[];
                                __type: V;
                            }, "parts">;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_16 extends string>(...parts: U_16[]) => Omit<{
                                parts: <V extends string>(...values: V[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U extends string>(...parts: U[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                                        __type: V | U | U_1 | U_2 | U_3 | U_4;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                    keys: (V | U | U_1 | U_2 | U_3)[];
                                                    __type: V | U | U_1 | U_2 | U_3;
                                                }, "parts">;
                                                selectors: () => Record<V | U | U_1 | U_2, string>;
                                                classnames: () => Record<V | U | U_1 | U_2, string>;
                                                keys: (V | U | U_1 | U_2)[];
                                                __type: V | U | U_1 | U_2;
                                            }, "parts">;
                                            selectors: () => Record<V | U | U_1, string>;
                                            classnames: () => Record<V | U | U_1, string>;
                                            keys: (V | U | U_1)[];
                                            __type: V | U | U_1;
                                        }, "parts">;
                                        selectors: () => Record<V | U, string>;
                                        classnames: () => Record<V | U, string>;
                                        keys: (V | U)[];
                                        __type: V | U;
                                    }, "parts">;
                                    selectors: () => Record<V, string>;
                                    classnames: () => Record<V, string>;
                                    keys: V[];
                                    __type: V;
                                }, "parts">;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_17 extends string>(...parts: U_17[]) => Omit<{
                                    parts: <V extends string>(...values: V[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U extends string>(...parts: U[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                            keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                                            __type: V | U | U_1 | U_2 | U_3 | U_4;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                        keys: (V | U | U_1 | U_2 | U_3)[];
                                                        __type: V | U | U_1 | U_2 | U_3;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U | U_1 | U_2, string>;
                                                    classnames: () => Record<V | U | U_1 | U_2, string>;
                                                    keys: (V | U | U_1 | U_2)[];
                                                    __type: V | U | U_1 | U_2;
                                                }, "parts">;
                                                selectors: () => Record<V | U | U_1, string>;
                                                classnames: () => Record<V | U | U_1, string>;
                                                keys: (V | U | U_1)[];
                                                __type: V | U | U_1;
                                            }, "parts">;
                                            selectors: () => Record<V | U, string>;
                                            classnames: () => Record<V | U, string>;
                                            keys: (V | U)[];
                                            __type: V | U;
                                        }, "parts">;
                                        selectors: () => Record<V, string>;
                                        classnames: () => Record<V, string>;
                                        keys: V[];
                                        __type: V;
                                    }, "parts">;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_18 extends string>(...parts: U_18[]) => Omit<{
                                        parts: <V extends string>(...values: V[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U extends string>(...parts: U[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                                keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                                                __type: V | U | U_1 | U_2 | U_3 | U_4;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                            classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                            keys: (V | U | U_1 | U_2 | U_3)[];
                                                            __type: V | U | U_1 | U_2 | U_3;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U | U_1 | U_2, string>;
                                                        classnames: () => Record<V | U | U_1 | U_2, string>;
                                                        keys: (V | U | U_1 | U_2)[];
                                                        __type: V | U | U_1 | U_2;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U | U_1, string>;
                                                    classnames: () => Record<V | U | U_1, string>;
                                                    keys: (V | U | U_1)[];
                                                    __type: V | U | U_1;
                                                }, "parts">;
                                                selectors: () => Record<V | U, string>;
                                                classnames: () => Record<V | U, string>;
                                                keys: (V | U)[];
                                                __type: V | U;
                                            }, "parts">;
                                            selectors: () => Record<V, string>;
                                            classnames: () => Record<V, string>;
                                            keys: V[];
                                            __type: V;
                                        }, "parts">;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_19 extends string>(...parts: U_19[]) => Omit<{
                                            parts: <V extends string>(...values: V[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U extends string>(...parts: U[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_8 extends string>(...parts: U_8[]) => Omit<any, "parts">;
                                                                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                                                                    keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                                                                    __type: V | U | U_1 | U_2 | U_3 | U_4;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                                classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                                                                keys: (V | U | U_1 | U_2 | U_3)[];
                                                                __type: V | U | U_1 | U_2 | U_3;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U | U_1 | U_2, string>;
                                                            classnames: () => Record<V | U | U_1 | U_2, string>;
                                                            keys: (V | U | U_1 | U_2)[];
                                                            __type: V | U | U_1 | U_2;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U | U_1, string>;
                                                        classnames: () => Record<V | U | U_1, string>;
                                                        keys: (V | U | U_1)[];
                                                        __type: V | U | U_1;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U, string>;
                                                    classnames: () => Record<V | U, string>;
                                                    keys: (V | U)[];
                                                    __type: V | U;
                                                }, "parts">;
                                                selectors: () => Record<V, string>;
                                                classnames: () => Record<V, string>;
                                                keys: V[];
                                                __type: V;
                                            }, "parts">;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_20 extends string>(...parts: U_20[]) => Omit<any, "parts">;
                                            selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19, string>;
                                            classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19, string>;
                                            keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19)[];
                                            __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18 | U_19;
                                        }, "parts">;
                                        selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18, string>;
                                        classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18, string>;
                                        keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18)[];
                                        __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18;
                                    }, "parts">;
                                    selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17, string>;
                                    classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17, string>;
                                    keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17)[];
                                    __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17;
                                }, "parts">;
                                selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16, string>;
                                classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16, string>;
                                keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16)[];
                                __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16;
                            }, "parts">;
                            selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15, string>;
                            classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15, string>;
                            keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15)[];
                            __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14 | U_15;
                        }, "parts">;
                        selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14, string>;
                        classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14, string>;
                        keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14)[];
                        __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13 | U_14;
                    }, "parts">;
                    selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13, string>;
                    classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13, string>;
                    keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13)[];
                    __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12 | U_13;
                }, "parts">;
                selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12, string>;
                classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12, string>;
                keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12)[];
                __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11 | U_12;
            }, "parts">;
            selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11, string>;
            classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11, string>;
            keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11)[];
            __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10 | U_11;
        }, "parts">;
        selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10, string>;
        classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10, string>;
        keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10)[];
        __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem" | U_10;
    }, "parts">;
    selectors: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem", string>;
    classnames: () => Record<"list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem", string>;
    keys: ("list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem")[];
    __type: "list" | "icon" | "item" | "highlight" | "itemDescription" | "emptyItem";
}, "parts">;
export declare const parts: Omit<{
    parts: <V extends string>(...values: V[]) => Omit<{
        parts: any;
        toPart: (part: string) => {
            className: string;
            selector: string;
            toString: () => string;
        };
        extend: <U extends string>(...parts: U[]) => Omit<{
            parts: any;
            toPart: (part: string) => {
                className: string;
                selector: string;
                toString: () => string;
            };
            extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                parts: any;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                            keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                            __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                        }, "parts">;
                                        selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                        classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                        keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                        __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                    }, "parts">;
                                    selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                    classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                    keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                    __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                }, "parts">;
                                selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                keys: (V | U | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                __type: V | U | U_1 | U_2 | U_3 | U_4 | U_5;
                            }, "parts">;
                            selectors: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                            classnames: () => Record<V | U | U_1 | U_2 | U_3 | U_4, string>;
                            keys: (V | U | U_1 | U_2 | U_3 | U_4)[];
                            __type: V | U | U_1 | U_2 | U_3 | U_4;
                        }, "parts">;
                        selectors: () => Record<V | U | U_1 | U_2 | U_3, string>;
                        classnames: () => Record<V | U | U_1 | U_2 | U_3, string>;
                        keys: (V | U | U_1 | U_2 | U_3)[];
                        __type: V | U | U_1 | U_2 | U_3;
                    }, "parts">;
                    selectors: () => Record<V | U | U_1 | U_2, string>;
                    classnames: () => Record<V | U | U_1 | U_2, string>;
                    keys: (V | U | U_1 | U_2)[];
                    __type: V | U | U_1 | U_2;
                }, "parts">;
                selectors: () => Record<V | U | U_1, string>;
                classnames: () => Record<V | U | U_1, string>;
                keys: (V | U | U_1)[];
                __type: V | U | U_1;
            }, "parts">;
            selectors: () => Record<V | U, string>;
            classnames: () => Record<V | U, string>;
            keys: (V | U)[];
            __type: V | U;
        }, "parts">;
        selectors: () => Record<V, string>;
        classnames: () => Record<V, string>;
        keys: V[];
        __type: V;
    }, "parts">;
    toPart: (part: string) => {
        className: string;
        selector: string;
        toString: () => string;
    };
    extend: <U extends string>(...parts: U[]) => Omit<{
        parts: <V extends string>(...values: V[]) => Omit<{
            parts: any;
            toPart: (part: string) => {
                className: string;
                selector: string;
                toString: () => string;
            };
            extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                parts: any;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                        }, "parts">;
                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                    }, "parts">;
                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                }, "parts">;
                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                            }, "parts">;
                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                            keys: (V | U_1 | U_2 | U_3 | U_4)[];
                            __type: V | U_1 | U_2 | U_3 | U_4;
                        }, "parts">;
                        selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                        classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                        keys: (V | U_1 | U_2 | U_3)[];
                        __type: V | U_1 | U_2 | U_3;
                    }, "parts">;
                    selectors: () => Record<V | U_1 | U_2, string>;
                    classnames: () => Record<V | U_1 | U_2, string>;
                    keys: (V | U_1 | U_2)[];
                    __type: V | U_1 | U_2;
                }, "parts">;
                selectors: () => Record<V | U_1, string>;
                classnames: () => Record<V | U_1, string>;
                keys: (V | U_1)[];
                __type: V | U_1;
            }, "parts">;
            selectors: () => Record<V, string>;
            classnames: () => Record<V, string>;
            keys: V[];
            __type: V;
        }, "parts">;
        toPart: (part: string) => {
            className: string;
            selector: string;
            toString: () => string;
        };
        extend: <U_10 extends string>(...parts: U_10[]) => Omit<{
            parts: <V extends string>(...values: V[]) => Omit<{
                parts: any;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                            }, "parts">;
                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                        }, "parts">;
                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                    }, "parts">;
                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                }, "parts">;
                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                __type: V | U_1 | U_2 | U_3 | U_4;
                            }, "parts">;
                            selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                            classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                            keys: (V | U_1 | U_2 | U_3)[];
                            __type: V | U_1 | U_2 | U_3;
                        }, "parts">;
                        selectors: () => Record<V | U_1 | U_2, string>;
                        classnames: () => Record<V | U_1 | U_2, string>;
                        keys: (V | U_1 | U_2)[];
                        __type: V | U_1 | U_2;
                    }, "parts">;
                    selectors: () => Record<V | U_1, string>;
                    classnames: () => Record<V | U_1, string>;
                    keys: (V | U_1)[];
                    __type: V | U_1;
                }, "parts">;
                selectors: () => Record<V, string>;
                classnames: () => Record<V, string>;
                keys: V[];
                __type: V;
            }, "parts">;
            toPart: (part: string) => {
                className: string;
                selector: string;
                toString: () => string;
            };
            extend: <U_11 extends string>(...parts: U_11[]) => Omit<{
                parts: <V extends string>(...values: V[]) => Omit<{
                    parts: any;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                }, "parts">;
                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                            }, "parts">;
                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                        }, "parts">;
                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                    }, "parts">;
                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                    keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                    __type: V | U_1 | U_2 | U_3 | U_4;
                                }, "parts">;
                                selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                keys: (V | U_1 | U_2 | U_3)[];
                                __type: V | U_1 | U_2 | U_3;
                            }, "parts">;
                            selectors: () => Record<V | U_1 | U_2, string>;
                            classnames: () => Record<V | U_1 | U_2, string>;
                            keys: (V | U_1 | U_2)[];
                            __type: V | U_1 | U_2;
                        }, "parts">;
                        selectors: () => Record<V | U_1, string>;
                        classnames: () => Record<V | U_1, string>;
                        keys: (V | U_1)[];
                        __type: V | U_1;
                    }, "parts">;
                    selectors: () => Record<V, string>;
                    classnames: () => Record<V, string>;
                    keys: V[];
                    __type: V;
                }, "parts">;
                toPart: (part: string) => {
                    className: string;
                    selector: string;
                    toString: () => string;
                };
                extend: <U_12 extends string>(...parts: U_12[]) => Omit<{
                    parts: <V extends string>(...values: V[]) => Omit<{
                        parts: any;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                }, "parts">;
                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                            }, "parts">;
                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                        }, "parts">;
                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                        keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                        __type: V | U_1 | U_2 | U_3 | U_4;
                                    }, "parts">;
                                    selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                    classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                    keys: (V | U_1 | U_2 | U_3)[];
                                    __type: V | U_1 | U_2 | U_3;
                                }, "parts">;
                                selectors: () => Record<V | U_1 | U_2, string>;
                                classnames: () => Record<V | U_1 | U_2, string>;
                                keys: (V | U_1 | U_2)[];
                                __type: V | U_1 | U_2;
                            }, "parts">;
                            selectors: () => Record<V | U_1, string>;
                            classnames: () => Record<V | U_1, string>;
                            keys: (V | U_1)[];
                            __type: V | U_1;
                        }, "parts">;
                        selectors: () => Record<V, string>;
                        classnames: () => Record<V, string>;
                        keys: V[];
                        __type: V;
                    }, "parts">;
                    toPart: (part: string) => {
                        className: string;
                        selector: string;
                        toString: () => string;
                    };
                    extend: <U_13 extends string>(...parts: U_13[]) => Omit<{
                        parts: <V extends string>(...values: V[]) => Omit<{
                            parts: any;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                }, "parts">;
                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                            }, "parts">;
                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                            keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                            __type: V | U_1 | U_2 | U_3 | U_4;
                                        }, "parts">;
                                        selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                        classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                        keys: (V | U_1 | U_2 | U_3)[];
                                        __type: V | U_1 | U_2 | U_3;
                                    }, "parts">;
                                    selectors: () => Record<V | U_1 | U_2, string>;
                                    classnames: () => Record<V | U_1 | U_2, string>;
                                    keys: (V | U_1 | U_2)[];
                                    __type: V | U_1 | U_2;
                                }, "parts">;
                                selectors: () => Record<V | U_1, string>;
                                classnames: () => Record<V | U_1, string>;
                                keys: (V | U_1)[];
                                __type: V | U_1;
                            }, "parts">;
                            selectors: () => Record<V, string>;
                            classnames: () => Record<V, string>;
                            keys: V[];
                            __type: V;
                        }, "parts">;
                        toPart: (part: string) => {
                            className: string;
                            selector: string;
                            toString: () => string;
                        };
                        extend: <U_14 extends string>(...parts: U_14[]) => Omit<{
                            parts: <V extends string>(...values: V[]) => Omit<{
                                parts: any;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                                }, "parts">;
                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                                __type: V | U_1 | U_2 | U_3 | U_4;
                                            }, "parts">;
                                            selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                            classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                            keys: (V | U_1 | U_2 | U_3)[];
                                            __type: V | U_1 | U_2 | U_3;
                                        }, "parts">;
                                        selectors: () => Record<V | U_1 | U_2, string>;
                                        classnames: () => Record<V | U_1 | U_2, string>;
                                        keys: (V | U_1 | U_2)[];
                                        __type: V | U_1 | U_2;
                                    }, "parts">;
                                    selectors: () => Record<V | U_1, string>;
                                    classnames: () => Record<V | U_1, string>;
                                    keys: (V | U_1)[];
                                    __type: V | U_1;
                                }, "parts">;
                                selectors: () => Record<V, string>;
                                classnames: () => Record<V, string>;
                                keys: V[];
                                __type: V;
                            }, "parts">;
                            toPart: (part: string) => {
                                className: string;
                                selector: string;
                                toString: () => string;
                            };
                            extend: <U_15 extends string>(...parts: U_15[]) => Omit<{
                                parts: <V extends string>(...values: V[]) => Omit<{
                                    parts: any;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                    keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                                    __type: V | U_1 | U_2 | U_3 | U_4;
                                                }, "parts">;
                                                selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                                classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                                keys: (V | U_1 | U_2 | U_3)[];
                                                __type: V | U_1 | U_2 | U_3;
                                            }, "parts">;
                                            selectors: () => Record<V | U_1 | U_2, string>;
                                            classnames: () => Record<V | U_1 | U_2, string>;
                                            keys: (V | U_1 | U_2)[];
                                            __type: V | U_1 | U_2;
                                        }, "parts">;
                                        selectors: () => Record<V | U_1, string>;
                                        classnames: () => Record<V | U_1, string>;
                                        keys: (V | U_1)[];
                                        __type: V | U_1;
                                    }, "parts">;
                                    selectors: () => Record<V, string>;
                                    classnames: () => Record<V, string>;
                                    keys: V[];
                                    __type: V;
                                }, "parts">;
                                toPart: (part: string) => {
                                    className: string;
                                    selector: string;
                                    toString: () => string;
                                };
                                extend: <U_16 extends string>(...parts: U_16[]) => Omit<{
                                    parts: <V extends string>(...values: V[]) => Omit<{
                                        parts: any;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                        keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                                        __type: V | U_1 | U_2 | U_3 | U_4;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                                    classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                                    keys: (V | U_1 | U_2 | U_3)[];
                                                    __type: V | U_1 | U_2 | U_3;
                                                }, "parts">;
                                                selectors: () => Record<V | U_1 | U_2, string>;
                                                classnames: () => Record<V | U_1 | U_2, string>;
                                                keys: (V | U_1 | U_2)[];
                                                __type: V | U_1 | U_2;
                                            }, "parts">;
                                            selectors: () => Record<V | U_1, string>;
                                            classnames: () => Record<V | U_1, string>;
                                            keys: (V | U_1)[];
                                            __type: V | U_1;
                                        }, "parts">;
                                        selectors: () => Record<V, string>;
                                        classnames: () => Record<V, string>;
                                        keys: V[];
                                        __type: V;
                                    }, "parts">;
                                    toPart: (part: string) => {
                                        className: string;
                                        selector: string;
                                        toString: () => string;
                                    };
                                    extend: <U_17 extends string>(...parts: U_17[]) => Omit<{
                                        parts: <V extends string>(...values: V[]) => Omit<{
                                            parts: any;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                            keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                                            __type: V | U_1 | U_2 | U_3 | U_4;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                                        classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                                        keys: (V | U_1 | U_2 | U_3)[];
                                                        __type: V | U_1 | U_2 | U_3;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U_1 | U_2, string>;
                                                    classnames: () => Record<V | U_1 | U_2, string>;
                                                    keys: (V | U_1 | U_2)[];
                                                    __type: V | U_1 | U_2;
                                                }, "parts">;
                                                selectors: () => Record<V | U_1, string>;
                                                classnames: () => Record<V | U_1, string>;
                                                keys: (V | U_1)[];
                                                __type: V | U_1;
                                            }, "parts">;
                                            selectors: () => Record<V, string>;
                                            classnames: () => Record<V, string>;
                                            keys: V[];
                                            __type: V;
                                        }, "parts">;
                                        toPart: (part: string) => {
                                            className: string;
                                            selector: string;
                                            toString: () => string;
                                        };
                                        extend: <U_18 extends string>(...parts: U_18[]) => Omit<{
                                            parts: <V extends string>(...values: V[]) => Omit<{
                                                parts: any;
                                                toPart: (part: string) => {
                                                    className: string;
                                                    selector: string;
                                                    toString: () => string;
                                                };
                                                extend: <U_1 extends string>(...parts: U_1[]) => Omit<{
                                                    parts: any;
                                                    toPart: (part: string) => {
                                                        className: string;
                                                        selector: string;
                                                        toString: () => string;
                                                    };
                                                    extend: <U_2 extends string>(...parts: U_2[]) => Omit<{
                                                        parts: any;
                                                        toPart: (part: string) => {
                                                            className: string;
                                                            selector: string;
                                                            toString: () => string;
                                                        };
                                                        extend: <U_3 extends string>(...parts: U_3[]) => Omit<{
                                                            parts: any;
                                                            toPart: (part: string) => {
                                                                className: string;
                                                                selector: string;
                                                                toString: () => string;
                                                            };
                                                            extend: <U_4 extends string>(...parts: U_4[]) => Omit<{
                                                                parts: any;
                                                                toPart: (part: string) => {
                                                                    className: string;
                                                                    selector: string;
                                                                    toString: () => string;
                                                                };
                                                                extend: <U_5 extends string>(...parts: U_5[]) => Omit<{
                                                                    parts: any;
                                                                    toPart: (part: string) => {
                                                                        className: string;
                                                                        selector: string;
                                                                        toString: () => string;
                                                                    };
                                                                    extend: <U_6 extends string>(...parts: U_6[]) => Omit<{
                                                                        parts: any;
                                                                        toPart: (part: string) => {
                                                                            className: string;
                                                                            selector: string;
                                                                            toString: () => string;
                                                                        };
                                                                        extend: <U_7 extends string>(...parts: U_7[]) => Omit<{
                                                                            parts: any;
                                                                            toPart: (part: string) => {
                                                                                className: string;
                                                                                selector: string;
                                                                                toString: () => string;
                                                                            };
                                                                            extend: <U_8 extends string>(...parts: U_8[]) => Omit<{
                                                                                parts: any;
                                                                                toPart: (part: string) => {
                                                                                    className: string;
                                                                                    selector: string;
                                                                                    toString: () => string;
                                                                                };
                                                                                extend: <U_9 extends string>(...parts: U_9[]) => Omit<any, "parts">;
                                                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8, string>;
                                                                                keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8)[];
                                                                                __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7 | U_8;
                                                                            }, "parts">;
                                                                            selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                            classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7, string>;
                                                                            keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7)[];
                                                                            __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6 | U_7;
                                                                        }, "parts">;
                                                                        selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                        classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6, string>;
                                                                        keys: (V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6)[];
                                                                        __type: V | U_1 | U_2 | U_3 | U_4 | U_5 | U_6;
                                                                    }, "parts">;
                                                                    selectors: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                    classnames: () => Record<V | U_1 | U_2 | U_3 | U_4 | U_5, string>;
                                                                    keys: (V | U_1 | U_2 | U_3 | U_4 | U_5)[];
                                                                    __type: V | U_1 | U_2 | U_3 | U_4 | U_5;
                                                                }, "parts">;
                                                                selectors: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                                classnames: () => Record<V | U_1 | U_2 | U_3 | U_4, string>;
                                                                keys: (V | U_1 | U_2 | U_3 | U_4)[];
                                                                __type: V | U_1 | U_2 | U_3 | U_4;
                                                            }, "parts">;
                                                            selectors: () => Record<V | U_1 | U_2 | U_3, string>;
                                                            classnames: () => Record<V | U_1 | U_2 | U_3, string>;
                                                            keys: (V | U_1 | U_2 | U_3)[];
                                                            __type: V | U_1 | U_2 | U_3;
                                                        }, "parts">;
                                                        selectors: () => Record<V | U_1 | U_2, string>;
                                                        classnames: () => Record<V | U_1 | U_2, string>;
                                                        keys: (V | U_1 | U_2)[];
                                                        __type: V | U_1 | U_2;
                                                    }, "parts">;
                                                    selectors: () => Record<V | U_1, string>;
                                                    classnames: () => Record<V | U_1, string>;
                                                    keys: (V | U_1)[];
                                                    __type: V | U_1;
                                                }, "parts">;
                                                selectors: () => Record<V, string>;
                                                classnames: () => Record<V, string>;
                                                keys: V[];
                                                __type: V;
                                            }, "parts">;
                                            toPart: (part: string) => {
                                                className: string;
                                                selector: string;
                                                toString: () => string;
                                            };
                                            extend: <U_19 extends string>(...parts: U_19[]) => Omit<any, "parts">;
                                            selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18, string>;
                                            classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18, string>;
                                            keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18)[];
                                            __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17 | U_18;
                                        }, "parts">;
                                        selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17, string>;
                                        classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17, string>;
                                        keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17)[];
                                        __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16 | U_17;
                                    }, "parts">;
                                    selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16, string>;
                                    classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16, string>;
                                    keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16)[];
                                    __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15 | U_16;
                                }, "parts">;
                                selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15, string>;
                                classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15, string>;
                                keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15)[];
                                __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14 | U_15;
                            }, "parts">;
                            selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14, string>;
                            classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14, string>;
                            keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14)[];
                            __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13 | U_14;
                        }, "parts">;
                        selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13, string>;
                        classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13, string>;
                        keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13)[];
                        __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12 | U_13;
                    }, "parts">;
                    selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12, string>;
                    classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12, string>;
                    keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12)[];
                    __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11 | U_12;
                }, "parts">;
                selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11, string>;
                classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11, string>;
                keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11)[];
                __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10 | U_11;
            }, "parts">;
            selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10, string>;
            classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10, string>;
            keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10)[];
            __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U | U_10;
        }, "parts">;
        selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U, string>;
        classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U, string>;
        keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U)[];
        __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem" | U;
    }, "parts">;
    selectors: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem", string>;
    classnames: () => Record<"list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem", string>;
    keys: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem")[];
    __type: "list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem";
}, "parts">;
export declare const SingleSelect: {
    baseStyle?: ((props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
        item: {
            bg: string;
            textStyle: string;
            fontWeight: string;
            color: string;
            _hover: {
                bg: string;
            };
            _disabled: {
                color: string;
                opacity: number;
                cursor: string;
            };
            _focus: {
                [x: string]: string | {
                    [x: string]: string;
                };
                _active: {
                    [x: string]: string;
                };
            };
            _focusVisible: {
                boxShadow: string;
                _active: {
                    [x: string]: string;
                };
            };
            _active: {
                [x: string]: string;
            };
        } & {
            _selected: {
                [x: string]: string | {
                    [x: string]: string;
                };
                _active: {
                    [x: string]: string;
                };
            } | undefined;
        };
        highlight: {
            bg: string;
        };
        selected: {
            zIndex: number;
            gridArea: string;
            alignItems: string;
            pointerEvents: string;
            _disabled: {
                color: string;
            };
        };
        itemDescription: {
            textStyle: string;
            color: string;
        };
        emptyItem: {
            fontStyle: string;
            cursor: string;
            _hover: {
                bg: string;
            };
            _active: {
                bg: string;
            };
            bg: string;
            textStyle: string;
            fontWeight: string;
            color: string;
            _disabled: {
                color: string;
                opacity: number;
                cursor: string;
            };
            _focus: {
                [x: string]: string | {
                    [x: string]: string;
                };
                _active: {
                    [x: string]: string;
                };
            };
            _focusVisible: {
                boxShadow: string;
                _active: {
                    [x: string]: string;
                };
            };
            _selected: {
                [x: string]: string | {
                    [x: string]: string;
                };
                _active: {
                    [x: string]: string;
                };
            } | undefined;
        };
        list: {
            [x: string]: string | number;
            mt: string;
            border: string;
            borderRadius: number;
            minWidth: string;
            boxShadow: string;
        } & {
            my: string;
            w: string;
            overflowY: string;
            maxH: string;
            bg: string;
        };
        icon: {
            transitionProperty: string;
            transitionDuration: string;
            color: string;
            _disabled: {
                cursor: string;
                color: string;
            };
        };
    }) | undefined;
    sizes?: {
        xs: {
            item: {
                textStyle: string;
                padding: string;
            } | undefined;
            emptyItem: {
                textStyle: string;
                padding: string;
            } | undefined;
            field: {
                textStyle: string;
                fontSize: string;
                px: string;
                h: string;
            } | undefined;
            icon: {
                fontSize: string;
            };
            selected: {
                pl: string;
                pr: string;
                textStyle: string;
            };
        };
        sm: {
            item: {
                textStyle: string;
                padding: string;
            } | undefined;
            emptyItem: {
                textStyle: string;
                padding: string;
            } | undefined;
            field: {
                textStyle: string;
                fontSize: string;
                px: string;
                h: string;
            } | undefined;
            icon: {
                fontSize: string;
            };
            selected: {
                pl: string;
                pr: string;
                textStyle: string;
            };
        };
        md: {
            icon: {
                fontSize: string;
            };
            item: {
                textStyle: string;
                padding: string;
            } | undefined;
            emptyItem: {
                textStyle: string;
                padding: string;
            } | undefined;
            field: {
                px: string;
                h: string;
                textStyle: string;
                fontSize: string;
            } | undefined;
            selected: {
                pl: string;
                pr: string;
                textStyle: string;
            };
        };
    } | undefined;
    variants?: {
        outline: (props: import("@chakra-ui/styled-system").StyleFunctionProps) => {
            list: {
                py: number;
            };
            item: {
                cursor: string;
            };
            field: {
                borderRadius: string;
                bg: string;
                border: string;
                borderColor: string;
                _placeholder: {
                    color: string;
                };
                _hover: {
                    borderColor: string;
                };
                _invalid: {
                    borderColor: any;
                    boxShadow: string;
                };
                _focusVisible: {
                    zIndex: number;
                    borderColor: any;
                    boxShadow: string;
                };
                _disabled: {
                    bg: string;
                    borderColor: string;
                    color: string;
                    cursor: string;
                    opacity: number;
                    _hover: {
                        bg: string;
                    };
                    _active: {
                        bg: string;
                    };
                };
            } & {
                borderRightRadius: number | undefined;
                gridArea: string;
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "xs" | undefined;
        variant?: "outline" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
    parts: ("list" | "icon" | "item" | "selected" | "field" | "highlight" | "itemDescription" | "emptyItem")[];
};
