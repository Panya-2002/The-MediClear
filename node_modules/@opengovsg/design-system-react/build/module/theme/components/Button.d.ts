import { StyleFunctionProps } from '@chakra-ui/theme-tools';
export type ThemeButtonVariant = 'solid' | 'reverse' | 'outline' | 'clear' | 'link' | 'inputAttached';
export type ThemeButtonColorScheme = 'main' | 'success' | 'critical' | 'inverse' | 'sub';
export declare const Button: {
    baseStyle?: {
        _focusVisible: {
            boxShadow: string;
            outline: string;
            outlineOffset: string;
            _dark: {
                outline: string;
            };
        };
        whiteSpace: string;
        borderRadius: string;
        border: string;
        flexShrink: number;
        px: string;
        py: string;
        _disabled: {
            bg: string;
            borderColor: string;
            opacity: number;
            color: string;
        };
        fontWeight: number;
        lineHeight: string;
        fontSize: string;
        letterSpacing: string;
        fontFamily: string;
    } | undefined;
    sizes?: {
        xs: {
            minH: string;
            minW: string;
            fontWeight: number;
            lineHeight: string;
            fontSize: string;
            letterSpacing: number;
            fontFamily: string;
        };
        sm: {
            minH: string;
            minW: string;
            fontWeight: number;
            lineHeight: string;
            fontSize: string;
            letterSpacing: string;
            fontFamily: string;
        };
        md: {
            minH: string;
            minW: string;
            fontWeight: number;
            lineHeight: string;
            fontSize: string;
            letterSpacing: string;
            fontFamily: string;
        };
        lg: {
            minH: string;
            minW: string;
            fontWeight: number;
            lineHeight: string;
            fontSize: string;
            letterSpacing: string;
            fontFamily: string;
        };
    } | undefined;
    variants?: {
        solid: (props: StyleFunctionProps) => {
            bg: string;
            borderColor: string;
            color: string;
            px: string;
            _active: {
                bg: string;
                borderColor: string;
            };
            _hover: {
                bg: string;
                borderColor: string;
                _disabled: {
                    bg: string;
                    borderColor: string;
                };
            };
        };
        reverse: (props: StyleFunctionProps) => {
            bg: string;
            borderColor: string;
            color: string;
            px: string;
            _disabled: {
                bg: string;
                borderColor: string;
            };
            _active: {
                bg: string;
            };
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
            };
        };
        outline: (props: StyleFunctionProps) => {
            bg: string;
            px: string;
            borderColor: string;
            color: string;
            _disabled: {
                borderColor: string;
                bg: string;
            };
            _active: {
                bg: string;
                borderColor: string;
            };
            _hover: {
                bg: string;
                borderColor: string;
                _disabled: {
                    borderColor: string;
                    bg: string;
                };
            };
        };
        clear: (props: StyleFunctionProps) => {
            bg: string;
            px: string;
            borderColor: string;
            color: string;
            _disabled: {
                borderColor: string;
                bg: string;
            };
            _active: {
                bg: string;
                borderColor: string;
            };
            _hover: {
                bg: string;
                borderColor: string;
                _disabled: {
                    borderColor: string;
                    bg: string;
                };
            };
        };
        link: (props: StyleFunctionProps) => {
            outlineOffset: number;
            height: string;
            width: string;
            position: string;
            textUnderlineOffset: string;
            color: string;
            _dark: {
                color: string;
                _hover: {
                    color: string;
                };
            };
            borderRadius: string;
            _hover: {
                color: string;
                _disabled: {
                    color: string;
                };
            };
            _disabled: {
                color: string;
                cursor: string;
            };
            _focusVisible: {
                outlineOffset: number;
                boxShadow: string;
                outline: string;
                _dark: {
                    outline: string;
                };
            };
        } & {
            p: string;
            textStyle: {
                sm: string;
                md: string;
            };
            _hover: {
                textDecorationLine: string;
            };
        } & {
            border: string;
            minHeight: string;
            fontWeight: string;
            w: string;
            _disabled: {
                bg: string;
            };
        };
        inputAttached: (props: StyleFunctionProps) => {
            bg: string;
            color: string;
            borderColor: string;
            borderStartRadius: number;
            borderEndRadius: string;
            _hover: {
                bg: string;
                _disabled: {
                    bg: string;
                };
            };
            outlineOffset: number;
            _active: {
                color: string;
                _disabled: {
                    color: string;
                };
            };
            _invalid: {
                borderColor: any;
            };
            _focus: {
                zIndex: number;
                borderColor: any;
                boxShadow: string;
            };
            _focusVisible: {
                boxShadow: string;
                outline: string;
            };
            _disabled: {
                bg: string;
                borderColor: string;
                color: string;
            };
        };
    } | undefined;
    defaultProps?: {
        size?: "sm" | "md" | "lg" | "xs" | undefined;
        variant?: "link" | "clear" | "outline" | "solid" | "reverse" | "inputAttached" | undefined;
        colorScheme?: string | undefined;
    } | undefined;
};
