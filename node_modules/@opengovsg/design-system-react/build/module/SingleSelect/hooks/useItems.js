// Hook to normalize item array for easy filtering and checking of state
import { useCallback, useMemo } from 'react';
import { itemToValue } from '../utils/itemUtils';
export const useItems = ({ rawItems, }) => {
    const normalizedItems = useMemo(() => {
        const initialStore = {
            // Normalized store for filtering and retrieval of state
            byValue: {},
        };
        let itemIndex = 0;
        return rawItems.reduce((store, item) => {
            const value = itemToValue(item);
            // Do nothing if no value.
            if (!value) {
                return store;
            }
            store.byValue[value] = {
                item,
                index: itemIndex,
            };
            // Only increment if item has a value.
            itemIndex++;
            return store;
        }, initialStore);
    }, [rawItems]);
    const getItemByValue = useCallback((value) => {
        return normalizedItems.byValue[value] ?? null;
    }, [normalizedItems.byValue]);
    return {
        items: rawItems,
        getItemByValue,
    };
};
