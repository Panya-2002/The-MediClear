import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Flex, Icon, ListItem, Stack, Text } from '@chakra-ui/react';
import { dataAttr } from '@chakra-ui/utils';
import { useSelectContext } from '../../SelectContext';
import { isItemDisabled, itemToDescriptionString, itemToIcon, itemToLabelString, } from '../../utils/itemUtils';
import { DropdownItemTextHighlighter } from './DropdownItemTextHighlighter';
export const DropdownItem = ({ item, index, }) => {
    const { getItemProps, isItemSelected, inputValue, styles } = useSelectContext();
    const { icon, label, description, isDisabled, isActive } = useMemo(() => ({
        icon: itemToIcon(item),
        label: itemToLabelString(item),
        description: itemToDescriptionString(item),
        isDisabled: isItemDisabled(item),
        isActive: isItemSelected(item),
    }), [isItemSelected, item]);
    return (_jsx(ListItem, { sx: styles.item, "data-active": dataAttr(isActive), ...getItemProps({
            item,
            index,
            disabled: isDisabled,
        }), children: _jsxs(Flex, { flexDir: "column", children: [_jsxs(Stack, { direction: "row", align: "center", spacing: "1rem", children: [icon ? _jsx(Icon, { as: icon, sx: styles.icon }) : null, _jsx(Text, { minWidth: 0, textOverflow: "ellipsis", whiteSpace: "nowrap", overflowX: "hidden", children: _jsx(DropdownItemTextHighlighter, { inputValue: inputValue ?? '', textToHighlight: label }) })] }), description && (_jsx(Text, { sx: styles.itemDescription, children: _jsx(DropdownItemTextHighlighter, { inputValue: inputValue ?? '', textToHighlight: description }) }))] }) }));
};
