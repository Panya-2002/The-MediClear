import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useMemo } from 'react';
import { Flex, Icon, InputGroup, Stack, Text, useMergeRefs, } from '@chakra-ui/react';
import { Input } from '../../../Input';
import { useSelectContext } from '../../SelectContext';
import { itemToIcon, itemToLabelString } from '../../utils/itemUtils';
import { ComboboxClearButton } from './ComboboxClearButton';
import { ToggleChevron } from './ToggleChevron';
export const SelectCombobox = forwardRef((_props, ref) => {
    const { toggleMenu, selectedItem, getInputProps, styles, isDisabled, isSearchable, isReadOnly, isInvalid, inputValue, isRequired, placeholder, isOpen, resetInputValue, inputRef, isClearable, size, } = useSelectContext();
    const mergedInputRef = useMergeRefs(inputRef, ref);
    const selectedItemMeta = useMemo(() => ({
        icon: itemToIcon(selectedItem),
        label: itemToLabelString(selectedItem),
    }), [selectedItem]);
    const handleToggleMenu = useCallback(() => {
        if (isReadOnly || isDisabled)
            return;
        return toggleMenu();
    }, [isDisabled, isReadOnly, toggleMenu]);
    return (_jsxs(Flex, { children: [_jsxs(InputGroup, { size: size, pos: "relative", display: "grid", marginInlineEnd: isClearable ? '-1px' : undefined, _focusWithin: {
                    zIndex: 1,
                }, gridTemplateColumns: "1fr", children: [_jsxs(Stack, { visibility: inputValue ? 'hidden' : 'initial', direction: "row", spacing: "1rem", "aria-disabled": isDisabled, sx: styles.selected, "aria-hidden": true, children: [selectedItemMeta.icon ? (_jsx(Icon, { sx: styles.icon, as: selectedItemMeta.icon, "aria-disabled": isDisabled })) : null, _jsx(Text, { noOfLines: 1, children: selectedItemMeta.label })] }), _jsx(Input, { isReadOnly: !isSearchable || isReadOnly, isInvalid: isInvalid, isDisabled: isDisabled, placeholder: selectedItem ? undefined : placeholder, sx: styles.field, ...getInputProps({
                            onClick: handleToggleMenu,
                            onBlur: () => !isOpen && resetInputValue(),
                            ref: mergedInputRef,
                            disabled: isDisabled,
                            readOnly: isReadOnly,
                            required: isRequired,
                            'aria-expanded': !!isOpen,
                        }) }), _jsx(ToggleChevron, {})] }), _jsx(ComboboxClearButton, {})] }));
});
SelectCombobox.displayName = 'SelectCombobox';
