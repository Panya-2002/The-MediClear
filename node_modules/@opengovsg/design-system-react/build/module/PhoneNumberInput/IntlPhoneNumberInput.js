import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Phone Number Input field component.
 * Some of the code is sourced from
 * https://www.npmjs.com/package/react-headless-phone-input but adapted for the
 * application's needs.
 */
import { useCallback, useMemo } from 'react';
import { chakra, createStylesContext, Flex, forwardRef, Icon, InputGroup, InputLeftAddon, useFormControl, useMergeRefs, useMultiStyleConfig, } from '@chakra-ui/react';
import Flags from 'country-flag-icons/react/3x2';
import { BxChevronDown } from '../icons';
import { Input } from '../Input';
import { COUNTRY_CODE_TO_NAME, getCountrySelectOptions, } from './utils/countrySelectUtils';
import { usePhoneNumberInput } from './PhoneNumberInputContext';
const [IntlPhoneNumberInputStylesProvider, useIntlPhoneNumberInputStyles] = createStylesContext('PhoneNumberInput');
export const IntlPhoneNumberInput = forwardRef((props, ref) => {
    const { inputValue, innerInputRef, inputPlaceholder, handleInputChange, handleInputBlur, } = usePhoneNumberInput();
    const styles = useMultiStyleConfig('PhoneNumberInput', props);
    // Used so any forwarded refs passed can be merged with internal ref.
    const inputRef = useMergeRefs(innerInputRef, ref);
    return (_jsx(IntlPhoneNumberInputStylesProvider, { value: styles, children: _jsxs(InputGroup, { children: [_jsx(CountrySelect, { isReadOnly: props.isReadOnly, isDisabled: props.isDisabled }), _jsx(Input, { onBlur: handleInputBlur, ref: inputRef, value: inputValue, onChange: handleInputChange, type: "tel", sx: styles.field, ...props, placeholder: inputPlaceholder })] }) }));
});
const CountrySelect = (props) => {
    const { country, handleCountryChange } = usePhoneNumberInput();
    const styles = useIntlPhoneNumberInputStyles();
    const onCountryChange = useCallback((e) => {
        handleCountryChange(e.target.value);
    }, [handleCountryChange]);
    const inputProps = useFormControl(props);
    const selectOptions = useMemo(() => getCountrySelectOptions(), []);
    return (_jsxs(InputLeftAddon, { "aria-disabled": inputProps.disabled, title: COUNTRY_CODE_TO_NAME[country], as: "label", sx: styles.country, children: [_jsxs(Flex, { align: "center", children: [_jsx(Icon, { "aria-disabled": inputProps.disabled, "aria-readonly": inputProps.readOnly, 
                        // Show Flags if available. If value does not exist for any reason,
                        // a default fallback icon will be used by ChakraUI.
                        // See https://chakra-ui.com/docs/media-and-icons/icon#fallback-icon.
                        as: Flags[country], sx: styles.icon }), _jsx(Icon, { as: BxChevronDown })] }), _jsx(chakra.select, { "aria-label": "Country selector", sx: styles.selector, ...inputProps, disabled: inputProps.disabled || inputProps.readOnly, value: country, id: `${inputProps.id}-country`, 
                // Override props on change with one that takes in ChangeEvent as a param.
                onChange: onCountryChange, children: selectOptions.map(({ value, label }) => (_jsx("option", { value: value, children: label }, value))) })] }));
};
IntlPhoneNumberInput.displayName = 'IntlPhoneNumberInput';
