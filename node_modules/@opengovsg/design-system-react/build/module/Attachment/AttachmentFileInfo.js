import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useMemo, useState } from 'react';
import { Flex, forwardRef, Image, Stack, Text, VisuallyHidden, } from '@chakra-ui/react';
import { dataAttr } from '@chakra-ui/utils';
import { IconButton } from '../IconButton';
import { BxTrash } from '../icons';
import { getReadableFileSize } from './utils/getReadableFileSize';
import { useAttachmentStyles } from './AttachmentContext';
export const AttachmentFileInfo = forwardRef(({ file, handleRemoveFile, imagePreview, isDisabled, isReadOnly }, ref) => {
    const [previewSrc, setPreviewSrc] = useState('');
    const styles = useAttachmentStyles();
    const readableFileSize = useMemo(() => getReadableFileSize(file.size), [file.size]);
    useEffect(() => {
        let objectUrl = '';
        // create the preview
        if (file.type.startsWith('image/')) {
            objectUrl = URL.createObjectURL(file);
            setPreviewSrc(objectUrl);
        }
        // free memory when ever this component is unmounted
        return () => URL.revokeObjectURL(objectUrl);
    }, [file]);
    return (_jsxs(Flex, { "aria-disabled": isDisabled, ref: ref, sx: styles.fileInfoContainer, children: [_jsxs(VisuallyHidden, { children: ["File attached: ", file.name, " with file size of ", readableFileSize] }), imagePreview && previewSrc && (_jsx(Image, { alt: "uploaded image preview", sx: styles.fileInfoImage, src: previewSrc })), _jsxs(Flex, { sx: styles.fileInfo, children: [_jsxs(Stack, { spacing: "0.25rem", flexDir: "column", "aria-hidden": true, children: [_jsx(Text, { children: file.name }), _jsx(Text, { "data-disabled": dataAttr(isDisabled), sx: styles.fileInfoDescription, children: readableFileSize })] }), _jsx(IconButton, { variant: "clear", colorScheme: "critical", "aria-label": "Remove file", icon: _jsx(BxTrash, {}), onClick: handleRemoveFile, isDisabled: isDisabled || isReadOnly })] })] }));
});
AttachmentFileInfo.displayName = 'AttachmentFileInfo';
