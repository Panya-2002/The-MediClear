import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Box, CloseButton, Collapse, Flex, Icon, useDisclosure, useMultiStyleConfig, } from '@chakra-ui/react';
import { BxsErrorCircle, BxsInfoCircle, BxX } from '../icons';
export const Banner = ({ variant = 'info', children, isDismissable: isDismissableProp, icon: iconProp, closeButton, }) => {
    const { isOpen, onToggle } = useDisclosure({
        defaultIsOpen: true,
    });
    const styles = useMultiStyleConfig('Banner', { variant });
    const iconToUse = useMemo(() => {
        if (iconProp) {
            return iconProp;
        }
        return variant === 'info' ? BxsInfoCircle : BxsErrorCircle;
    }, [iconProp, variant]);
    const isDismissable = useMemo(() => {
        if (isDismissableProp !== undefined) {
            return isDismissableProp;
        }
        return variant === 'info';
    }, [isDismissableProp, variant]);
    const closeButtonRendered = useMemo(() => {
        if (!isDismissable)
            return null;
        if (closeButton !== undefined)
            closeButton;
        return (_jsx(CloseButton, { children: _jsx(BxX, {}), onClick: onToggle, sx: styles.close }));
    }, [closeButton, isDismissable, onToggle, styles.close]);
    return (_jsx(Collapse, { in: isOpen, animateOpacity: true, children: _jsx(Box, { __css: styles.banner, children: _jsxs(Flex, { sx: styles.item, children: [_jsxs(Flex, { children: [_jsx(Icon, { as: iconToUse, __css: styles.icon }), children] }), closeButtonRendered] }) }) }));
};
