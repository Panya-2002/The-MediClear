import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useRef } from 'react';
import { Box, forwardRef, Icon, Input, InputGroup, InputLeftElement, InputRightElement, useControllableState, useMergeRefs, useMultiStyleConfig, } from '@chakra-ui/react';
import { IconButton } from '../IconButton';
import { BxSearch, BxX } from '../icons';
export const Searchbar = forwardRef(({ onSearch, defaultIsExpanded, isExpanded: isExpandedProp, onExpansion: onExpansionProp, showClearButton = true, collapseOnClear, size, focusOnExpand = true, ...props }, ref) => {
    const [isExpanded, onExpansion] = useControllableState({
        defaultValue: defaultIsExpanded,
        value: isExpandedProp,
        onChange: onExpansionProp,
    });
    const innerRef = useRef(null);
    const styles = useMultiStyleConfig('Searchbar', {
        isExpanded,
        size,
        ...props,
    });
    const inputRef = useMergeRefs(innerRef, ref);
    const handleSearch = useCallback((e) => {
        if (e.key === 'Enter' && innerRef.current && onSearch) {
            onSearch(innerRef.current.value);
        }
    }, [onSearch]);
    const handleClearButtonClick = useCallback(() => {
        if (innerRef.current) {
            innerRef.current.value = '';
        }
        if (collapseOnClear) {
            onExpansion(false);
        }
        innerRef.current?.focus();
    }, [collapseOnClear, onExpansion]);
    const handleExpansion = useCallback(() => {
        onExpansion(true);
        if (focusOnExpand) {
            // Set timeout to allow the input to expand before focusing
            setTimeout(() => {
                innerRef.current?.focus();
            }, 0);
        }
    }, [focusOnExpand, onExpansion]);
    return (_jsxs(InputGroup, { flex: isExpanded ? 1 : 0, size: size, children: [isExpanded ? (_jsx(InputLeftElement, { pointerEvents: "none", children: _jsx(Box, { __css: styles.icon, children: _jsx(Icon, { as: BxSearch }) }) })) : (_jsx(IconButton, { "aria-label": "Expand search", icon: _jsx(BxSearch, {}), variant: "clear", colorScheme: "neutral", onClick: handleExpansion, sx: styles.icon })), _jsx(Input, { hidden: !isExpanded, "aria-label": "Press enter to search", ref: inputRef, sx: styles.field, onKeyDown: handleSearch, ...props }), showClearButton && isExpanded && (_jsx(InputRightElement, { children: _jsx(IconButton, { "aria-label": "Clear search", icon: _jsx(BxX, {}), size: size, variant: "clear", colorScheme: "neutral", onClick: handleClearButtonClick, sx: styles.icon }) }))] }));
});
Searchbar.displayName = 'Searchbar';
