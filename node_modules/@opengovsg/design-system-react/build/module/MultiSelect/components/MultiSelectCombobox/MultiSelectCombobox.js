import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback } from 'react';
import { Box, chakra, Flex, Icon, useMergeRefs } from '@chakra-ui/react';
import { BxsChevronDown, BxsChevronUp } from '../../../icons';
import { useSelectContext } from '../../../SingleSelect';
import { useMultiSelectContext } from '../../MultiSelectContext';
import { SelectedItems } from './SelectedItems';
const MultiItemsContainer = ({ children }) => {
    const { styles } = useSelectContext();
    return _jsx(Box, { sx: styles.itemContainer, children: children });
};
export const MultiSelectCombobox = forwardRef((_props, ref) => {
    const { getInputProps, styles, isDisabled, isReadOnly, isRequired, placeholder, setIsFocused, isOpen, toggleMenu, isInvalid, isSearchable, inputRef, getToggleButtonProps, } = useSelectContext();
    const { getDropdownProps } = useMultiSelectContext();
    const mergedRefs = useMergeRefs(inputRef, ref);
    const handleToggleMenu = useCallback(() => {
        if (isDisabled || isReadOnly)
            return;
        if (!isOpen) {
            inputRef?.current?.focus();
        }
        toggleMenu();
        setIsFocused(true);
    }, [inputRef, isDisabled, isOpen, isReadOnly, setIsFocused, toggleMenu]);
    /**
     * So faux input gets correctly blurred when navigated away.
     */
    const handleInputTabKeydown = useCallback((event) => {
        if (event.key === 'Tab') {
            setIsFocused(false);
        }
    }, [setIsFocused]);
    return (_jsxs(Flex, { "aria-disabled": isDisabled, "aria-invalid": isInvalid, "aria-readonly": isReadOnly, __css: styles.fieldwrapper, onClick: handleToggleMenu, children: [_jsxs(MultiItemsContainer, { children: [_jsx(SelectedItems, {}), _jsx(chakra.input, { placeholder: placeholder, __css: styles.field, ...getInputProps({
                            ...getDropdownProps({
                                ref: mergedRefs,
                                onFocus: () => setIsFocused(true),
                                onKeyDown: handleInputTabKeydown,
                                readOnly: isReadOnly || !isSearchable,
                                disabled: isDisabled,
                            }),
                            required: isRequired,
                            'aria-expanded': !!isOpen,
                        }) })] }), _jsx(Box, { as: "button", type: "button", _disabled: {
                    cursor: 'not-allowed',
                }, alignSelf: "flex-start", sx: styles.chevron, "aria-label": `${isOpen ? 'Close' : 'Open'} dropdown options`, ...getToggleButtonProps({
                    disabled: isDisabled || isReadOnly,
                    // Allow navigation to this button with screen readers.
                    tabIndex: 0,
                    // onClick needs to be defined on the toggle button itself to allow
                    // screen readers to activate the click action, but need to stop
                    // bubbling up to the parent to avoid double-toggling
                    onClick: (e) => e.stopPropagation(),
                }), children: _jsx(Icon, { as: isOpen ? BxsChevronUp : BxsChevronDown, "aria-disabled": isDisabled || isReadOnly }) })] }));
});
MultiSelectCombobox.displayName = 'MultiSelectCombobox';
