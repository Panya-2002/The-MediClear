import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useMemo } from 'react';
import { Icon } from '@chakra-ui/react';
import { useSelectContext } from '../../../SingleSelect';
import { itemToIcon, itemToLabelString } from '../../../SingleSelect/utils';
import { Tag, TagCloseButton, TagLabel } from '../../../Tag';
import { useMultiSelectContext } from '../../MultiSelectContext';
export const MultiSelectItem = ({ item, index, }) => {
    const { isDisabled, isReadOnly, setIsFocused, closeMenu, isOpen, styles, size, } = useSelectContext();
    const { getSelectedItemProps, removeSelectedItem, colorScheme } = useMultiSelectContext();
    const itemMeta = useMemo(() => {
        return {
            label: itemToLabelString(item),
            icon: itemToIcon(item),
        };
    }, [item]);
    const handleRemoveItem = useCallback((e) => {
        // Required so tag can properly gain focus without the parent from
        // stealing focus due to parent's onClick handler.
        e.stopPropagation();
        if (isDisabled || isReadOnly)
            return;
        removeSelectedItem(item);
    }, [isDisabled, isReadOnly, item, removeSelectedItem]);
    const handleTagClick = useCallback((e) => {
        // Required so tag can properly gain focus without the parent from
        // stealing focus due to parent's onClick handler.
        e.stopPropagation();
        if (isDisabled || isReadOnly)
            return;
        setIsFocused(true);
        if (isOpen) {
            closeMenu();
        }
    }, [closeMenu, isDisabled, isOpen, isReadOnly, setIsFocused]);
    return (_jsxs(Tag, { title: itemMeta.label, sx: styles.tag, size: size, colorScheme: colorScheme, ...getSelectedItemProps({
            selectedItem: item,
            index,
            disabled: isDisabled,
            onKeyDown: (event) => {
                if ((isDisabled || isReadOnly) &&
                    (event.key === 'Backspace' || event.key === 'Delete')) {
                    // Prevent Downshift's default behavior where backspace or delete will
                    // remove the item from selection regardless of whether the input is disabled.
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    event.nativeEvent.preventDownshiftDefault = true;
                }
            },
            onClick: handleTagClick,
        }), children: [itemMeta.icon ? (_jsx(Icon, { "aria-hidden": true, as: itemMeta.icon, sx: styles.tagIcon, "aria-disabled": isDisabled })) : null, _jsx(TagLabel, { children: itemMeta.label }), _jsx(TagCloseButton, { tabIndex: -1, "aria-hidden": true, isDisabled: isDisabled, onClick: handleRemoveItem })] }));
};
