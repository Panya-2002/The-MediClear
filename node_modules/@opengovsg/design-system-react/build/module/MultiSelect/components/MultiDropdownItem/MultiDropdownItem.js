import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Flex, Icon, ListItem, Stack, Text, VisuallyHidden, } from '@chakra-ui/react';
import { useSelectContext } from '../../../SingleSelect';
import { DropdownItemTextHighlighter } from '../../../SingleSelect/components';
import { isItemDisabled, itemToDescriptionString, itemToIcon, itemToLabelString, } from '../../../SingleSelect/utils/itemUtils';
import { ItemCheckboxIcon } from './ItemCheckboxIcon';
export const MultiDropdownItem = ({ item, index, }) => {
    const { getItemProps, isItemSelected, styles, inputValue, size } = useSelectContext();
    const { isSelected, icon, label, description, isDisabled } = useMemo(() => ({
        isSelected: isItemSelected(item),
        icon: itemToIcon(item),
        label: itemToLabelString(item),
        description: itemToDescriptionString(item),
        isDisabled: isItemDisabled(item),
    }), [isItemSelected, item]);
    return (_jsx(ListItem, { sx: styles.item, ...getItemProps({
            item,
            index,
            disabled: isDisabled,
        }), title: label, children: _jsxs(Stack, { direction: "row", spacing: "1rem", overflowX: "auto", children: [_jsx(ItemCheckboxIcon, { isDisabled: isDisabled, isChecked: isSelected, size: size }), _jsxs(Flex, { flexDir: "column", minW: 0, children: [_jsxs(Stack, { direction: "row", spacing: "0.5rem", align: "center", children: [icon ? _jsx(Icon, { as: icon, sx: styles.icon }) : null, _jsx(Text, { minWidth: 0, textOverflow: "ellipsis", whiteSpace: "nowrap", overflowX: "hidden", children: _jsx(DropdownItemTextHighlighter, { inputValue: inputValue, textToHighlight: label }) })] }), description && (_jsx(Text, { sx: styles.itemDescription, children: _jsx(DropdownItemTextHighlighter, { inputValue: inputValue, textToHighlight: description }) })), isSelected && (_jsx(VisuallyHidden, { "aria-live": "assertive", children: ", selected" }))] })] }) }));
};
