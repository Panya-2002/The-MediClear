import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useMemo, useState } from 'react';
import ReactInputMask from 'react-input-mask';
import { forwardRef, InputGroup, InputRightAddon, useMergeRefs, VisuallyHidden, } from '@chakra-ui/react';
import { Input } from '../../Input';
import { useDatePicker } from '../DatePickerContext';
import { CalendarButton } from './CalendarButton';
// eslint-disable-next-line @typescript-eslint/ban-types
export const DatePickerInput = forwardRef((_props, ref) => {
    const { internalInputValue, handleInputChange, handleInputBlur, handleInputClick, fcProps, allowManualInput, placeholder, inputRef, internalValue, size, } = useDatePicker();
    const mergedInputRef = useMergeRefs(inputRef, ref);
    const selectedDateAriaLiveText = useMemo(() => {
        if (!internalValue) {
            return 'No date selected';
        }
        return `Selected date: ${internalValue.toLocaleDateString()}`;
    }, [internalValue]);
    // Allow for SSR with react-input-mask package.
    const [hasMounted, setHasMounted] = useState(false);
    useEffect(() => {
        setHasMounted(true);
    }, []);
    return (_jsxs(_Fragment, { children: [_jsx(VisuallyHidden, { "aria-live": "assertive", children: selectedDateAriaLiveText }), _jsxs(InputGroup, { size: size, children: [hasMounted ? (_jsx(Input, { size: size, inputMode: "numeric" // Nudge Android mobile keyboard to be numeric
                        , pattern: "\\d*" // Nudge numeric keyboard on iOS Safari.
                        , as: ReactInputMask, mask: "99/99/9999", value: internalInputValue, onChange: handleInputChange, placeholder: placeholder, maskPlaceholder: placeholder, ref: mergedInputRef, ...fcProps, onBlur: handleInputBlur, onClick: handleInputClick, isReadOnly: fcProps.isReadOnly || !allowManualInput })) : (_jsx(Input, { pattern: "\\d*", size: size, inputMode: "numeric", placeholder: placeholder })), _jsx(InputRightAddon, { p: 0, border: "none", children: _jsx(CalendarButton, {}) })] })] }));
});
DatePickerInput.displayName = 'DatePickerInput';
