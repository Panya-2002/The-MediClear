import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment, useMemo } from 'react';
import { Box, DarkMode, Divider, Flex, Link, Stack, Text, useMultiStyleConfig, Wrap, } from '@chakra-ui/react';
import { DEFAULT_FOOTER_ICON_LINK, DEFAULT_SOCIAL_MEDIA_LINKS, } from './common/constants';
import { FooterStylesProvider, useFooterStyles, } from './RestrictedFooterStyleProvider';
export const RestrictedFullFooter = ({ appName, appLink, tagline, footerLinks, footerIconLink = DEFAULT_FOOTER_ICON_LINK, socialMediaLinks = DEFAULT_SOCIAL_MEDIA_LINKS, colorMode, containerProps, }) => {
    const ColorModeWrapper = useMemo(() => {
        if (colorMode === 'dark') {
            return DarkMode;
        }
        return Fragment;
    }, [colorMode]);
    const currentYear = useMemo(() => new Date().getFullYear(), []);
    const styles = useMultiStyleConfig('Footer', { variant: 'full' });
    return (_jsx(ColorModeWrapper, { children: _jsx(FooterStylesProvider, { value: styles, children: _jsxs(RestrictedFullFooter.Container, { ...containerProps, children: [_jsxs(RestrictedFullFooter.Section, { children: [_jsxs(Stack, { direction: { base: 'column', lg: 'row' }, sx: styles.brandContainer, children: [_jsx(Link, { colorScheme: "neutral", variant: "inline", textDecorationLine: "none", isExternal: true, href: appLink, children: _jsx(Text, { textStyle: "h4", children: appName }) }), tagline && (_jsx(Text, { textStyle: "body-2", color: "base.content.default", _dark: {
                                            color: 'base.content.inverse',
                                        }, children: tagline }))] }), _jsx(Wrap, { flex: 1, shouldWrapChildren: true, overflow: "visible", spacing: { base: '1rem', lg: '1.25rem' }, direction: { base: 'column', lg: 'row' }, justify: { base: 'normal', lg: 'flex-end' }, children: footerLinks?.map(({ label, href }, index) => (_jsx(Link, { isExternal: true, sx: styles.link, colorScheme: "neutral", variant: "standalone", href: href, children: label }, index))) })] }), _jsx(Divider, { my: "1.5rem" }), _jsxs(RestrictedFullFooter.Section, { children: [_jsxs(Flex, { flexDirection: "column", children: [_jsx(Text, { textStyle: "caption-1", color: "base.content.medium", _dark: {
                                            color: 'base.content.inverse',
                                        }, mb: "0.5rem", children: "Built by" }), _jsx(Link, { isExternal: true, title: footerIconLink.label, colorScheme: "neutral", mb: "2rem", href: footerIconLink.href, children: _jsx(footerIconLink.Icon, { width: "183px" }) })] }), _jsxs(Box, { children: [_jsx(Stack, { spacing: "1rem", direction: "row", mt: "2rem", mb: "0.5rem", justify: { base: 'normal', lg: 'flex-end' }, children: socialMediaLinks?.map(({ label, href, Icon }, index) => (_jsx(Link, { isExternal: true, title: label, w: "2rem", href: href, colorScheme: "neutral", children: _jsx(Icon, {}) }, index))) }), _jsxs(Text, { textStyle: "legal", color: "base.content.medium", _dark: {
                                            color: 'base.content.inverse',
                                        }, children: ["\u00A9", currentYear, " Open Government Products"] })] })] })] }) }) }));
};
const RestrictedFullFooterContainer = ({ children, ...props }) => {
    const styles = useFooterStyles();
    return (_jsx(Box, { as: "footer", __css: styles.container, ...props, children: children }));
};
RestrictedFullFooter.Container = RestrictedFullFooterContainer;
const RestrictedFullFooterSection = ({ children, ...props }) => {
    const styles = useFooterStyles();
    return (_jsx(Flex, { __css: styles.section, ...props, children: children }));
};
RestrictedFullFooter.Section = RestrictedFullFooterSection;
