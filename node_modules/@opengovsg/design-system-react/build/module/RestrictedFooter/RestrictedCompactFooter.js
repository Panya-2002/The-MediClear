import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment, useMemo } from 'react';
import { Box, DarkMode, Divider, Link, Stack, useMultiStyleConfig, Wrap, } from '@chakra-ui/react';
import { FooterStylesProvider, useFooterStyles, } from './RestrictedFooterStyleProvider';
/** Desktop only compact footer variant */
export const RestrictedCompactFooter = ({ appName, footerIconLink, footerLinks, colorMode, brandLogo, appLink, containerProps, }) => {
    const ColorModeWrapper = useMemo(() => {
        if (colorMode === 'dark') {
            return DarkMode;
        }
        return Fragment;
    }, [colorMode]);
    const styles = useMultiStyleConfig('Footer', {
        variant: 'compact',
    });
    return (_jsx(ColorModeWrapper, { children: _jsx(FooterStylesProvider, { value: styles, children: _jsxs(RestrictedCompactFooter.Container, { ...containerProps, children: [_jsxs(Stack, { direction: "row", sx: styles.brandContainer, children: [_jsx(Link, { colorScheme: "neutral", variant: "inline", textDecorationLine: "none", isExternal: true, title: "Link to application homepage", href: appLink, children: brandLogo ?? appName }), _jsx(Divider, { orientation: "vertical", variant: "medium" }), _jsx(Link, { isExternal: true, title: footerIconLink.label, colorScheme: "neutral", href: footerIconLink.href, children: _jsx(footerIconLink.Icon, { height: "1.5rem" }) })] }), _jsx(Wrap, { flex: 1, overflow: "visible", shouldWrapChildren: true, spacingX: "1.5rem", justify: "flex-end", children: footerLinks?.map(({ label, href }, index) => (_jsx(Link, { isExternal: true, sx: styles.link, colorScheme: "neutral", variant: "standalone", href: href, children: label }, index))) })] }) }) }));
};
const RestrictedCompactFooterContainer = ({ children, ...props }) => {
    const styles = useFooterStyles();
    return (_jsx(Box, { __css: styles.container, ...props, children: children }));
};
RestrictedCompactFooter.Container = RestrictedCompactFooterContainer;
RestrictedCompactFooter.Container.displayName =
    'RestrictedCompactFooter.Container';
