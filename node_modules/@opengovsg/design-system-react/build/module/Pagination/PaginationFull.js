import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Desktop variant for the Pagination component.
 */
import { useCallback, useMemo } from 'react';
import { Button, chakra, IconButton, useMultiStyleConfig, } from '@chakra-ui/react';
import { BxChevronLeft, BxChevronRight } from '../icons';
import { usePaginationRange } from './usePaginationRange';
// Separate constant to denote a separator in the pagination component.
const SEPARATOR = '\u2026';
const FullPageButton = ({ selectedPage, page, onClick, isDisabled, }) => {
    const isSelected = useMemo(() => page === selectedPage, [page, selectedPage]);
    const styles = useMultiStyleConfig('Pagination');
    const handleClick = useCallback(() => {
        if (page === SEPARATOR)
            return;
        onClick(page);
    }, [onClick, page]);
    if (page === SEPARATOR) {
        return (_jsx(chakra.li, { "aria-disabled": isDisabled, sx: styles.separator, children: page }));
    }
    return (_jsx(chakra.li, { children: _jsx(Button, { variant: "unstyled", "aria-current": isSelected ? 'page' : 'false', sx: styles.button, onClick: handleClick, isDisabled: isDisabled, children: page }) }));
};
export const PaginationFull = ({ siblingCount = 1, pageSize, onPageChange, totalCount, currentPage, isDisabled, }) => {
    const paginationRange = usePaginationRange({
        totalCount,
        pageSize,
        currentPage,
        siblingCount,
        separator: SEPARATOR,
    });
    const styles = useMultiStyleConfig('Pagination', { variant: 'full' });
    const totalPageCount = Math.ceil(totalCount / pageSize);
    const isDisableNextPage = isDisabled || currentPage >= totalPageCount;
    const isDisablePrevPage = isDisabled || currentPage <= 1;
    const handlePageBack = useCallback(() => {
        if (isDisablePrevPage)
            return;
        onPageChange(currentPage - 1);
    }, [currentPage, isDisablePrevPage, onPageChange]);
    const handlePageNext = useCallback(() => {
        if (isDisableNextPage)
            return;
        onPageChange(currentPage + 1);
    }, [currentPage, isDisableNextPage, onPageChange]);
    return (_jsx(chakra.nav, { "aria-label": "Pagination", children: _jsxs(chakra.ul, { display: "flex", flexFlow: "row nowrap", listStyleType: "none", alignItems: "center", gap: "2px", children: [_jsx(chakra.li, { children: _jsx(IconButton, { variant: "unstyled", sx: styles.stepper, "aria-label": "Previous page", isDisabled: isDisablePrevPage, onClick: handlePageBack, icon: _jsx(BxChevronLeft, {}) }) }), paginationRange.map((p, i) => (_jsx(FullPageButton, { page: p, isDisabled: isDisabled, selectedPage: currentPage, onClick: onPageChange }, i))), _jsx(chakra.li, { children: _jsx(IconButton, { variant: "unstyled", sx: styles.stepper, "aria-label": "Next page", isDisabled: isDisableNextPage, onClick: handlePageNext, icon: _jsx(BxChevronRight, {}) }) })] }) }));
};
