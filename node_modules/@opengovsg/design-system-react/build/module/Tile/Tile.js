import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, createStylesContext, forwardRef, HStack, Icon, Text, useMultiStyleConfig, } from '@chakra-ui/react';
const [TileStylesProvider, useTileStyles] = createStylesContext('Tile');
export const Tile = forwardRef(({ badge, icon, children, variant, isSelected, ...props }, ref) => {
    const styles = useMultiStyleConfig('Tile', { ...props, variant });
    return (
    // Ref passed into the component as a whole so that it can be focused
    _jsx(TileStylesProvider, { value: styles, children: _jsxs(Button, { variant: "unstyled", sx: styles.container, isActive: isSelected, ref: ref, ...props, children: [_jsxs(HStack, { spacing: "1rem", children: [icon && _jsx(Icon, { __css: styles.icon, as: icon }), badge] }), children] }) }));
});
const TileTitle = (props) => {
    const styles = useTileStyles();
    // Allow consumers to override default style props with their own styling
    return _jsx(Text, { sx: styles.title, ...props });
};
const TileSubtitle = (props) => {
    const styles = useTileStyles();
    // Allow consumers to override default style props with their own styling
    return _jsx(Text, { sx: styles.subtitle, ...props });
};
const TileText = (props) => {
    const styles = useTileStyles();
    // Allow consumers to override default style props with their own styling
    return _jsx(Text, { sx: styles.text, ...props });
};
Tile.Title = TileTitle;
Tile.Subtitle = TileSubtitle;
Tile.Text = TileText;
Tile.displayName = 'Tile';
Tile.Title.displayName = 'Tile.Title';
Tile.Subtitle.displayName = 'Tile.Subtitle';
Tile.Text.displayName = 'Tile.Text';
