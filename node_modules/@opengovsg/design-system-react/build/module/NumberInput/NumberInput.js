import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef } from 'react';
import { Box, chakra, Divider, forwardRef, useFormControlProps, useMergeRefs, useMultiStyleConfig, useNumberInput, } from '@chakra-ui/react';
import { IconButton } from '../IconButton';
import { BxMinus, BxPlus } from '../icons';
export const NumberInput = forwardRef(({ showSteppers = true, clampValueOnBlur = false, isSuccess, isPrefilled, ...props }, ref) => {
    const styles = useMultiStyleConfig('NumberInput', {
        ...props,
        isSuccess,
        isPrefilled,
    });
    const stepperWrapperRef = useRef(null);
    /**
     * Used here so this component can retrieve a parent FormControl's props, if
     * any. This allows a FormControl parent component to pass props such as
     * isInvalid, isDisabled, etc, to this component.
     */
    const controlProps = useFormControlProps(props);
    const { htmlProps, getInputProps, getIncrementButtonProps, getDecrementButtonProps, } = useNumberInput({
        ...controlProps,
        clampValueOnBlur,
    });
    const inputProps = getInputProps({ placeholder: props.placeholder });
    const incProps = getIncrementButtonProps();
    const decProps = getDecrementButtonProps();
    const inputRef = useMergeRefs(inputProps.ref, ref);
    const inputEndPadding = showSteppers
        ? stepperWrapperRef.current?.offsetWidth
        : undefined;
    return (_jsxs(Box, { ...htmlProps, __css: styles.root, children: [_jsx(chakra.input, { ...inputProps, paddingInlineEnd: inputEndPadding, 
                // Passing in ref to the input element so that it can be focused by
                // the parent.
                // No point passing the ref to the div wrapper as the main component
                // is this input.
                ref: inputRef, __css: styles.field }), showSteppers && (_jsxs(Box, { __css: styles.stepperWrapper, ref: stepperWrapperRef, children: [_jsx(IconButton, { sx: styles.stepperButton, "aria-hidden": true, "aria-label": "Decrement number", variant: "clear", icon: _jsx(BxMinus, {}), ...decProps }), _jsx(Divider, { sx: styles.stepperDivider, orientation: "vertical" }), _jsx(IconButton, { sx: styles.stepperButton, "aria-hidden": true, "aria-label": "Increment number", variant: "clear", icon: _jsx(BxPlus, {}), ...incProps })] }))] }));
});
NumberInput.displayName = 'NumberInput';
