import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Icon, Menu as ChakraMenu, MenuButton as ChakraMenuButton, MenuDivider as ChakraMenuDivider, MenuItem as ChakraMenuItem, MenuList as ChakraMenuList, useMultiStyleConfig, } from '@chakra-ui/react';
import { Button } from '../Button';
import { BxsChevronDown, BxsChevronUp } from '../icons';
/**
 * @preconditions Must be a child of Menu component,
 * and returned using a render prop (see implementation in Menu.stories).
 */
const MenuButton = ({ isOpen, isStretch, chevronSize, ...props }) => {
    const styles = useMultiStyleConfig('Menu', props);
    const ChevronIcon = useMemo(() => (_jsx(Icon, { as: isOpen ? BxsChevronUp : BxsChevronDown, fontSize: chevronSize, sx: styles.chevron })), [chevronSize, isOpen, styles.chevron]);
    return (_jsx(ChakraMenuButton, { as: Button, rightIcon: ChevronIcon, width: isStretch ? '100%' : undefined, sx: styles.button, ...props }));
};
/**
 * @preconditions Must be a child of Menu component
 * after MenuButton, and returned using a render prop
 * (see implementation in Menu.stories).
 *
 * Used to wrap MenuItem component
 */
const MenuList = ChakraMenuList;
/**
 * Item in MenuList
 */
const MenuItem = ChakraMenuItem;
/**
 * Divider in DropdownMenu
 */
const MenuDivider = ChakraMenuDivider;
/**
 * Used to wrap MenuButton, MenuItem and MenuList components
 */
export const Menu = ({ isStretch, ...props }) => {
    return _jsx(ChakraMenu, { matchWidth: isStretch, gutter: 4, ...props });
};
Menu.Button = MenuButton;
Menu.List = MenuList;
Menu.Item = MenuItem;
Menu.Divider = MenuDivider;
Menu.Button.displayName = 'Menu.Button';
Menu.List.displayName = 'Menu.List';
Menu.Item.displayName = 'Menu.Item';
Menu.Divider.displayName = 'Menu.Divider';
