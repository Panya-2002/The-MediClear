/**
 * Full names of calendar months
 */
export declare const MONTH_NAMES: {
    shortName: string;
    fullName: string;
}[];
/**
 * Names of days to display at top of calendar columns
 */
export declare const DAY_NAMES: {
    shortName: string;
    fullName: string;
}[];
/**
 * Generates array of years which are options in the year dropdown.
 * @returns array of years
 */
export declare const getYearOptions: () => number[];
/**
 * Finds the number of months by which a target date is offset from today.
 * @param today Current date
 * @param month Month of target from which to find offset
 * @param year Year of target from which to find offset
 * @returns Number of months target is offset from today
 */
export declare const getMonthOffsetFromToday: (today: Date, month: number, year: number) => number;
/**
 * Calculates what date should be newly focused based on the previously
 * focused date and which key a user has pressed.
 * @param originalDate Date which was originally focused
 * @param key Key pressed
 * @returns New date which should be focused
 */
export declare const getNewDateFromKeyPress: (originalDate: Date, key: string) => Date;
/**
 * Based on a custom className given to a date element, finds the
 * date corresponding to that element.
 * The pattern used is id_dateTime, where dateTime corresponds to
 * Date.getTime().
 * @param className Class name of element
 * @param id ID to find
 * @returns Date corresponding to element
 */
export declare const getDateFromClassName: (className: string, id: string) => Date | null;
/**
 * Creates a unique className for a date element, from which the corresponding
 * date can be derived.
 * @param id class name id to include in className
 * @param date Date of element
 * @returns A unique className from which the corresponding date can be derived
 */
export declare const generateClassNameForDate: (id: string, date: Date) => string;
