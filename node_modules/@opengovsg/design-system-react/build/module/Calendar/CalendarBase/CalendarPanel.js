import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { chakra, forwardRef, Stack, Text, VisuallyHidden, } from '@chakra-ui/react';
import { isSameDay } from 'date-fns';
import { useCalendar } from './CalendarContext';
import { CalendarHeader } from './CalendarHeader';
import { useCalendarStyles } from './CalendarStyleProvider';
import { DayOfMonth } from './DayOfMonth';
import { DAY_NAMES, generateClassNameForDate, MONTH_NAMES } from './utils';
// eslint-disable-next-line @typescript-eslint/ban-types
export const CalendarPanel = forwardRef((_props, initialFocusRef) => {
    const styles = useCalendarStyles();
    const { classNameId, dateToFocus, onMouseLeaveCalendar, renderProps: { calendars, getDateProps }, } = useCalendar();
    return (_jsx(Stack, { direction: { base: 'column', md: 'row' }, spacing: "2rem", sx: styles.calendarContainer, onMouseLeave: onMouseLeaveCalendar, children: calendars.map((calendar, i) => (_jsxs(Stack, { spacing: 0, children: [_jsx(CalendarHeader, { monthOffset: i }), _jsxs(chakra.table, { "aria-label": `${MONTH_NAMES[calendar.month].fullName} ${calendar.year}`, sx: styles.monthGrid, children: [_jsx(chakra.thead, { children: _jsx(chakra.tr, { children: DAY_NAMES.map(({ fullName, shortName }, index) => (_jsxs(chakra.th, { sx: styles.dayNamesContainer, children: [_jsx(Text, { "aria-hidden": true, children: shortName }), _jsx(VisuallyHidden, { children: fullName })] }, index))) }) }), _jsx(chakra.tbody, { children: calendar.weeks.map((week, windex) => {
                                return (_jsx(chakra.tr, { children: week.map((dateObj, index) => {
                                        if (!dateObj) {
                                            return (_jsx(chakra.td, { padding: 0 }, `${calendar.month}${calendar.year}${windex}${index}`));
                                        }
                                        return (_jsx(chakra.td, { px: 0, py: "0.125rem", children: _jsx(DayOfMonth, { ...getDateProps({
                                                    dateObj,
                                                }), dateObj: dateObj, isOutsideCurrMonth: dateObj.date.getMonth() !== calendar.month, className: generateClassNameForDate(classNameId, dateObj.date), ref: isSameDay(dateObj.date, dateToFocus)
                                                    ? initialFocusRef
                                                    : undefined }) }, `${calendar.month}${calendar.year}${windex}${index}`));
                                    }) }, windex));
                            }) })] }, `${calendar.month}${calendar.year}`), _jsx(VisuallyHidden, { "aria-live": "polite", children: "Cursor keys can navigate dates when a date is being focused." })] }, i))) }));
});
CalendarPanel.displayName = 'CalendarPanel';
