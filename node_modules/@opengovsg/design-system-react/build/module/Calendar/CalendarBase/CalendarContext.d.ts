import { Dispatch, SetStateAction } from 'react';
import { ThemingProps } from '@chakra-ui/react';
import { Props as DayzedProps, RenderProps } from 'dayzed';
import type { WithSsr } from '../../types/WithSsr';
import type { CalendarProps } from '../Calendar';
import type { DateRangeValue } from './types';
type PassthroughProps = {
    /**
     * Function to be passed to CalendarPanel to determine range styling.
     * Used for multi-calendar variant.
     */
    isDateInRange?: (d: Date) => boolean;
    /**
     * Function to be passed to CalendarPanel to determine range styling.
     * Called when a date is selected and a mouseover is detected over a date.
     * Used for multi-calendar variant.
     */
    onMouseEnterHighlight?: (date: Date) => void;
    /**
     * Function to be passed to CalendarPanel to determine range styling.
     * Called when mouse leaves the calendar.
     * Used for multi-calendar variant.
     */
    onMouseLeaveCalendar?: () => void;
    /**
     * The dates that are selected.
     */
    selectedDates?: Date | DateRangeValue;
    /**
     * Handler for when date is selected.
     */
    onSelectDate: (d: Date) => void;
    /**
     * Function to determine whether a date should be made
     * unavailable.
     */
    isDateUnavailable?: (d: Date) => boolean;
    /**
     * Date currently being hovered, if any.
     */
    hoveredDate?: Date;
    /**
     * Color scheme of date input
     */
    colorScheme?: ThemingProps<'Calendar'>['colorScheme'];
    /** Size of the component */
    size?: ThemingProps<'Calendar'>['size'];
};
export interface UseProvideCalendarProps extends Pick<DayzedProps, 'monthsToDisplay'>, PassthroughProps, WithSsr {
    /** The date to focus when calendar first renders. */
    defaultFocusedDate?: Date;
}
interface CalendarContextProps extends CalendarProps, PassthroughProps {
    classNameId: string;
    currMonth: number;
    currYear: number;
    setCurrMonth: Dispatch<SetStateAction<number>>;
    setCurrYear: Dispatch<SetStateAction<number>>;
    renderProps: RenderProps;
    yearOptions: number[];
    isDateFocusable: (d: Date) => boolean;
    handleTodayClick: () => void;
    dateToFocus: Date;
    selectedDates?: Date | DateRangeValue;
    monthsToDisplay: Required<CalendarProps>['monthsToDisplay'];
    isMobile: boolean;
}
interface CalendarProviderProps extends UseProvideCalendarProps {
    children: React.ReactNode;
}
export declare const CalendarProvider: ({ children, ...props }: CalendarProviderProps) => import("react/jsx-runtime").JSX.Element;
export declare const useCalendar: () => CalendarContextProps;
export {};
