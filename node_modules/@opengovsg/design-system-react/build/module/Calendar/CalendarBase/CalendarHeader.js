import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { memo, useCallback, useMemo, } from 'react';
import { Flex, HStack, Select, Text } from '@chakra-ui/react';
import { addMonths } from 'date-fns';
import { IconButton } from '../../IconButton';
import { BxChevronLeft, BxChevronRight } from '../../icons';
import { useCalendar } from './CalendarContext';
import { useCalendarStyles } from './CalendarStyleProvider';
import { MONTH_NAMES } from './utils';
const MonthYearSelect = ({ children, ...props }) => {
    const styles = useCalendarStyles();
    return (_jsx(Select
    // Prevents any parent form control from applying error styles to this select.
    , { 
        // Prevents any parent form control from applying error styles to this select.
        isInvalid: false, variant: "flushed", flexBasis: "fit-content", sx: styles.monthYearSelect, ...props, children: children }));
};
const SelectableMonthYear = memo(() => {
    const { currMonth, setCurrMonth, currYear, setCurrYear, yearOptions, isMobile, } = useCalendar();
    const memoizedMonthOptions = useMemo(() => {
        return MONTH_NAMES.map(({ shortName, fullName }, index) => (_jsx("option", { value: index, children: isMobile ? shortName : fullName }, index)));
    }, [isMobile]);
    const memoizedYearOptions = useMemo(() => {
        return yearOptions.map((year, index) => (_jsx("option", { value: year, children: year }, index)));
    }, [yearOptions]);
    const handleMonthChange = useCallback((e) => {
        setCurrMonth(parseInt(e.target.value));
    }, [setCurrMonth]);
    const handleYearChange = useCallback((e) => {
        setCurrYear(parseInt(e.target.value));
    }, [setCurrYear]);
    return (_jsxs(HStack, { children: [_jsx(MonthYearSelect, { value: currMonth, onChange: handleMonthChange, "aria-label": "Change displayed month", children: memoizedMonthOptions }), _jsx(MonthYearSelect, { value: currYear, onChange: handleYearChange, "aria-label": "Change displayed year", children: memoizedYearOptions })] }));
});
const MonthYear = memo(({ monthOffset }) => {
    const { currMonth, currYear, isMobile } = useCalendar();
    const styles = useCalendarStyles();
    const newOffsetDate = useMemo(() => addMonths(new Date(currYear, currMonth), monthOffset), [currMonth, currYear, monthOffset]);
    const monthDisplay = useMemo(() => {
        const month = MONTH_NAMES[newOffsetDate.getMonth()];
        return isMobile ? month.shortName : month.fullName;
    }, [isMobile, newOffsetDate]);
    const yearDisplay = useMemo(() => {
        return newOffsetDate.getFullYear();
    }, [newOffsetDate]);
    return (_jsxs(HStack, { sx: styles.monthYearDisplay, children: [_jsx(Text, { children: monthDisplay }), _jsx(Text, { children: yearDisplay })] }));
});
export const CalendarHeader = memo(({ monthOffset }) => {
    const styles = useCalendarStyles();
    const { renderProps: { calendars, getBackProps, getForwardProps }, size, } = useCalendar();
    return (_jsxs(Flex, { sx: styles.monthYearSelectorContainer, children: [monthOffset === 0 ? (_jsx(SelectableMonthYear, {})) : (_jsx(MonthYear, { monthOffset: monthOffset })), calendars.length - 1 === monthOffset ? (_jsxs(Flex, { sx: styles.monthArrowContainer, children: [_jsx(IconButton, { variant: "clear", colorScheme: "neutral", size: size, icon: _jsx(BxChevronLeft, {}), "aria-label": "Back one month", ...getBackProps({ calendars }) }), _jsx(IconButton, { variant: "clear", colorScheme: "neutral", size: size, icon: _jsx(BxChevronRight, {}), "aria-label": "Forward one month", ...getForwardProps({ calendars }) })] })) : null] }));
});
