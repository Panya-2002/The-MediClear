import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Adapted from
 * https://github.com/chakra-ui/chakra-ui/blob/main/packages/switch/src/switch.tsx
 * so as to support inserting icons in the switch thumb (the circular part).
 */
import { useMemo } from 'react';
import { useCheckbox } from '@chakra-ui/checkbox';
import { Icon, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';
import { chakra, forwardRef, omitThemingProps, useMultiStyleConfig, } from '@chakra-ui/system';
import { cx, dataAttr } from '@chakra-ui/utils';
import { BxCheck, BxLoader, BxLockAlt, BxX } from '../icons';
export const Switch = forwardRef(({ disabledIcon = BxLockAlt, checkedIcon = BxCheck, uncheckedIcon = BxX, loadingIcon = BxLoader, isLoading, ...props }, ref) => {
    const styles = useMultiStyleConfig('Switch', props);
    const prefersReducedMotion = usePrefersReducedMotion();
    const { spacing = '0.5rem', children, ...ownProps } = omitThemingProps(props);
    const { state, getInputProps, getCheckboxProps, getRootProps, getLabelProps, } = useCheckbox({ ...ownProps, isReadOnly: isLoading });
    const containerStyles = useMemo(() => ({
        display: 'inline-block',
        position: 'relative',
        verticalAlign: 'middle',
        lineHeight: 0,
        ...styles.container,
    }), [styles.container]);
    const trackStyles = useMemo(() => ({
        display: 'inline-flex',
        flexShrink: 0,
        justifyContent: 'flex-start',
        boxSizing: 'content-box',
        cursor: 'pointer',
        ...styles.track,
    }), [styles.track]);
    const labelStyles = useMemo(() => ({
        userSelect: 'none',
        marginStart: spacing,
        ...styles.label,
    }), [spacing, styles.label]);
    const ThumbIcon = useMemo(() => {
        if (isLoading)
            return loadingIcon;
        if (state.isDisabled)
            return disabledIcon;
        return state.isChecked ? checkedIcon : uncheckedIcon;
    }, [
        checkedIcon,
        disabledIcon,
        isLoading,
        loadingIcon,
        state.isChecked,
        state.isDisabled,
        uncheckedIcon,
    ]);
    const iconComponent = useMemo(() => {
        let animation;
        if (isLoading) {
            const spin = keyframes({
                '0%': {
                    transform: 'rotate(0deg)',
                },
                '100%': {
                    transform: 'rotate(360deg)',
                },
            });
            animation = prefersReducedMotion
                ? undefined
                : `${spin} 2.5s linear infinite`;
        }
        return (_jsx(Icon, { as: ThumbIcon, animation: animation, __css: styles.thumbIcon, "data-checked": dataAttr(state.isChecked) }));
    }, [
        ThumbIcon,
        isLoading,
        prefersReducedMotion,
        state.isChecked,
        styles.thumbIcon,
    ]);
    return (_jsxs(chakra.label, { ...getRootProps(), className: cx('chakra-switch', props.className), __css: containerStyles, "data-group": true, children: [_jsx("input", { className: "chakra-switch__input", ...getInputProps({}, ref) }), _jsx(chakra.span, { ...getCheckboxProps(), className: "chakra-switch__track", __css: trackStyles, children: _jsx(chakra.span, { __css: styles.thumb, className: "chakra-switch__thumb", "data-checked": dataAttr(state.isChecked), "data-hover": dataAttr(state.isHovered), children: iconComponent }) }), children && (_jsx(chakra.span, { className: "chakra-switch__label", ...getLabelProps(), __css: labelStyles, children: children }))] }));
});
Switch.displayName = 'Switch';
