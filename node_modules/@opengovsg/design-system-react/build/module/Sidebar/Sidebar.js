import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo } from 'react';
import { SidebarContainer } from './SidebarContainer';
import { SidebarHeader } from './SidebarHeader';
import { SidebarItem } from './SidebarItem';
import { SidebarList } from './SidebarList';
const isNestableItem = (item) => {
    return 'subItems' in item;
};
const isHeaderItem = (item) => {
    return 'type' in item && item.type === 'header';
};
// Generate recursive sidebar items if nested
export const generateSidebarItems = (items) => {
    return items.map((item, index) => {
        if (isNestableItem(item)) {
            const { label, icon, subItems, props, ...rest } = item;
            return (_jsx(SidebarList, { label: label, icon: icon, ...props, ...rest, children: generateSidebarItems(subItems) }, index));
        }
        if (isHeaderItem(item)) {
            return _jsx(SidebarHeader, { ...item }, index);
        }
        const { props, ...rest } = item;
        return _jsx(SidebarItem, { ...rest, ...props }, index);
    });
};
export const Sidebar = ({ items, ...rest }) => {
    const sidebarItems = useMemo(() => generateSidebarItems(items), [items]);
    return _jsx(SidebarContainer, { ...rest, children: sidebarItems });
};
