import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Box, chakra, forwardRef, Icon } from '@chakra-ui/react';
import { dataAttr, isFunction } from '@chakra-ui/utils';
import { merge } from 'lodash';
import { useSidebarNestContext, useSidebarStyles } from './SidebarContext';
export const SidebarItem = forwardRef(({ children, icon, iconProps, isActive, ...props }, ref) => {
    const styles = useSidebarStyles();
    const { nested } = useSidebarNestContext();
    const css = useMemo(() => {
        if (!nested) {
            return merge({}, styles.item, styles.label, styles.parent);
        }
        return merge({}, styles.item, styles.label, styles.child);
    }, [nested, styles.child, styles.item, styles.label, styles.parent]);
    const dataActive = useMemo(() => {
        if (isFunction(isActive)) {
            return isActive();
        }
        return isActive;
    }, [isActive]);
    return (_jsx(chakra.li, { listStyleType: "none", children: _jsxs(Box, { __css: css, ref: ref, ...props, "data-active": dataAttr(dataActive), children: [icon ? _jsx(Icon, { as: icon, __css: styles.icon, ...iconProps }) : null, children] }) }));
});
SidebarItem.displayName = 'SidebarItem';
