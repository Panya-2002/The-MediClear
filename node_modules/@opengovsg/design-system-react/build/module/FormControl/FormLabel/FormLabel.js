import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Box, chakra, FormHelperText, FormLabel as ChakraFormLabel, forwardRef, Icon, Text, useFormControlContext, useMultiStyleConfig, VisuallyHidden, } from '@chakra-ui/react';
import { merge } from 'lodash';
import { BxsHelpCircle } from '../../icons/BxsHelpCircle';
import { Tooltip } from '../../Tooltip';
/**
 * @preconditions Must be a child of Chakra's `FormControl` component.
 * Used to enhance the usability of form controls.
 *
 * It is used to inform users as to what information
 * is requested for a form field.
 *
 * ♿️ Accessibility: Every form field should have a form label.
 */
export const FormLabel = ({ isRequired, tooltipText, questionNumber, description, children, size, ...labelProps }) => {
    return (_jsxs(FormLabel.Label, { requiredIndicator: _jsx(Box, {}), display: "flex", flexDir: "column", size: size, ...labelProps, children: [_jsxs(Box, { children: [questionNumber && (_jsx(FormLabel.QuestionNumber, { size: size, children: questionNumber })), children, _jsx(FormLabel.OptionalIndicator, { size: size, isRequired: isRequired }), tooltipText && (_jsx(Tooltip, { size: size, label: tooltipText, "aria-label": "Label tooltip", wrapperStyles: {
                            display: 'inline-flex',
                        }, children: _jsx(Icon, { lineHeight: 1, ml: "0.5rem", color: "base.content.strong", as: BxsHelpCircle }) }))] }), description && (_jsx(FormLabel.Description, { children: description }))] }));
};
// Required for FormControl parent to be able to find FormLabel children components.
FormLabel.displayName = 'FormLabel';
FormLabel.Label = ChakraFormLabel;
const FormLabelDescription = ({ children, ...props }) => {
    // useFormControlContext is a ChakraUI hook that returns props passed down
    // from a parent ChakraUI's `FormControl` component.
    // The return object is used to determine whether FormHelperText or Text is
    // used.
    // Using FormHelperText allows for the children text to be added to the parent
    // FormLabel's aria-describedby attribute. This is done internally by ChakraUI.
    const field = useFormControlContext();
    const styles = useMultiStyleConfig('Form', props);
    const mergedStyles = useMemo(() => merge({}, styles.helperText, props.sx), [props.sx, styles.helperText]);
    // Render normal Text component if no form context is found.
    const ComponentToRender = useMemo(() => {
        if (field)
            return FormHelperText;
        return Text;
    }, [field]);
    return (_jsx(ComponentToRender, { ...props, sx: mergedStyles, children: children }));
};
FormLabel.Description = FormLabelDescription;
FormLabel.QuestionNumber = ({ children, ...props }) => {
    return (_jsxs(Text, { as: "span", textStyle: "caption-1", color: "base.content.strong", mr: "0.5rem", verticalAlign: "baseline", lineHeight: 0, ...props, children: [_jsx(VisuallyHidden, { children: "Question number:" }), children] }));
};
const OptionalIndicator = forwardRef(({ isRequired, ...props }, ref) => {
    // useFormControlContext is a ChakraUI hook that returns props passed down
    // from a parent ChakraUI's `FormControl` component.
    // Valid hook usage since composited component is still a component.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const field = useFormControlContext();
    const styles = useMultiStyleConfig('Form', props);
    // If isRequired is explicitly provided, ignore form control context value.
    if (isRequired ?? field?.isRequired)
        return null;
    return (_jsx(chakra.span, { ref: ref, role: "presentation", "aria-hidden": true, __css: styles.optionalIndicator, ...props, children: "(optional)" }));
});
OptionalIndicator.displayName = 'OptionalIndicator';
FormLabel.OptionalIndicator = OptionalIndicator;
FormLabel.OptionalIndicator.displayName = 'FormLabel.OptionalIndicator';
