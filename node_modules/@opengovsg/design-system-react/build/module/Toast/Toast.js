import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { Alert, AlertDescription, AlertTitle, Box, CloseButton, Icon, useMultiStyleConfig, } from '@chakra-ui/react';
import { BxsCheckCircle, BxsErrorCircle, BxsInfoCircle, BxX } from '../icons';
import { SpinnerIcon } from '../Spinner';
const STATUS_TO_COLOR_SCHEME = {
    success: 'success',
    error: 'error',
    warning: 'warning',
    info: 'main',
    loading: 'main',
};
const STATUS_TO_ICON = {
    success: BxsCheckCircle,
    error: BxsErrorCircle,
    warning: BxsErrorCircle,
    info: BxsInfoCircle,
    loading: SpinnerIcon,
};
export const Toast = ({ status = 'success', title, id, description, isClosable, onClose, onCloseComplete, ...toastStyleProps }) => {
    const styles = useMultiStyleConfig('Toast', {
        colorScheme: STATUS_TO_COLOR_SCHEME[status],
        ...toastStyleProps,
    });
    const StatusIcon = useMemo(() => {
        return STATUS_TO_ICON[status];
    }, [status]);
    return (_jsx(Box, { sx: styles.wrapper, children: _jsxs(Alert, { sx: styles.container, id: String(id), "aria-live": "assertive", children: [_jsx(Icon, { sx: styles.icon, as: StatusIcon }), _jsxs(Box, { sx: styles.content, children: [_jsx(AlertTitle, { sx: styles.title, children: title }), _jsx(AlertDescription, { sx: styles.description, children: description })] }), isClosable && (_jsx(CloseButton, { variant: "clear", colorScheme: "neutral", children: _jsx(BxX, { "aria-hidden": "true" }), onClick: () => {
                        onClose?.();
                        onCloseComplete?.();
                    }, __css: styles.close }))] }) }));
};
